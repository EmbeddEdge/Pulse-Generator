
L4_NucleoPulseGen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b94  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c4  08002d24  08002d24  00012d24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08002fe8  08002fe8  00012fe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08002ff0  08002ff0  00012ff0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08002ff4  08002ff4  00012ff4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001d4  20000000  08002ff8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000bc  200001d4  080031cc  000201d4  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000290  080031cc  00020290  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001061c  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002100  00000000  00000000  00030820  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000044e1  00000000  00000000  00032920  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000007b8  00000000  00000000  00036e08  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000008b0  00000000  00000000  000375c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000443d  00000000  00000000  00037e70  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00003527  00000000  00000000  0003c2ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0003f7d4  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001894  00000000  00000000  0003f850  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002d0c 	.word	0x08002d0c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	08002d0c 	.word	0x08002d0c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b97a 	b.w	800058c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	468c      	mov	ip, r1
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	9e08      	ldr	r6, [sp, #32]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d151      	bne.n	8000364 <__udivmoddi4+0xb4>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d96d      	bls.n	80003a2 <__udivmoddi4+0xf2>
 80002c6:	fab2 fe82 	clz	lr, r2
 80002ca:	f1be 0f00 	cmp.w	lr, #0
 80002ce:	d00b      	beq.n	80002e8 <__udivmoddi4+0x38>
 80002d0:	f1ce 0c20 	rsb	ip, lr, #32
 80002d4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002d8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002dc:	fa02 f70e 	lsl.w	r7, r2, lr
 80002e0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002e4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002e8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002ec:	0c25      	lsrs	r5, r4, #16
 80002ee:	fbbc f8fa 	udiv	r8, ip, sl
 80002f2:	fa1f f987 	uxth.w	r9, r7
 80002f6:	fb0a cc18 	mls	ip, sl, r8, ip
 80002fa:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80002fe:	fb08 f309 	mul.w	r3, r8, r9
 8000302:	42ab      	cmp	r3, r5
 8000304:	d90a      	bls.n	800031c <__udivmoddi4+0x6c>
 8000306:	19ed      	adds	r5, r5, r7
 8000308:	f108 32ff 	add.w	r2, r8, #4294967295
 800030c:	f080 8123 	bcs.w	8000556 <__udivmoddi4+0x2a6>
 8000310:	42ab      	cmp	r3, r5
 8000312:	f240 8120 	bls.w	8000556 <__udivmoddi4+0x2a6>
 8000316:	f1a8 0802 	sub.w	r8, r8, #2
 800031a:	443d      	add	r5, r7
 800031c:	1aed      	subs	r5, r5, r3
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb5 f0fa 	udiv	r0, r5, sl
 8000324:	fb0a 5510 	mls	r5, sl, r0, r5
 8000328:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800032c:	fb00 f909 	mul.w	r9, r0, r9
 8000330:	45a1      	cmp	r9, r4
 8000332:	d909      	bls.n	8000348 <__udivmoddi4+0x98>
 8000334:	19e4      	adds	r4, r4, r7
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	f080 810a 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800033e:	45a1      	cmp	r9, r4
 8000340:	f240 8107 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000344:	3802      	subs	r0, #2
 8000346:	443c      	add	r4, r7
 8000348:	eba4 0409 	sub.w	r4, r4, r9
 800034c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000350:	2100      	movs	r1, #0
 8000352:	2e00      	cmp	r6, #0
 8000354:	d061      	beq.n	800041a <__udivmoddi4+0x16a>
 8000356:	fa24 f40e 	lsr.w	r4, r4, lr
 800035a:	2300      	movs	r3, #0
 800035c:	6034      	str	r4, [r6, #0]
 800035e:	6073      	str	r3, [r6, #4]
 8000360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000364:	428b      	cmp	r3, r1
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0xc8>
 8000368:	2e00      	cmp	r6, #0
 800036a:	d054      	beq.n	8000416 <__udivmoddi4+0x166>
 800036c:	2100      	movs	r1, #0
 800036e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000372:	4608      	mov	r0, r1
 8000374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000378:	fab3 f183 	clz	r1, r3
 800037c:	2900      	cmp	r1, #0
 800037e:	f040 808e 	bne.w	800049e <__udivmoddi4+0x1ee>
 8000382:	42ab      	cmp	r3, r5
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xdc>
 8000386:	4282      	cmp	r2, r0
 8000388:	f200 80fa 	bhi.w	8000580 <__udivmoddi4+0x2d0>
 800038c:	1a84      	subs	r4, r0, r2
 800038e:	eb65 0503 	sbc.w	r5, r5, r3
 8000392:	2001      	movs	r0, #1
 8000394:	46ac      	mov	ip, r5
 8000396:	2e00      	cmp	r6, #0
 8000398:	d03f      	beq.n	800041a <__udivmoddi4+0x16a>
 800039a:	e886 1010 	stmia.w	r6, {r4, ip}
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	b912      	cbnz	r2, 80003aa <__udivmoddi4+0xfa>
 80003a4:	2701      	movs	r7, #1
 80003a6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003aa:	fab7 fe87 	clz	lr, r7
 80003ae:	f1be 0f00 	cmp.w	lr, #0
 80003b2:	d134      	bne.n	800041e <__udivmoddi4+0x16e>
 80003b4:	1beb      	subs	r3, r5, r7
 80003b6:	0c3a      	lsrs	r2, r7, #16
 80003b8:	fa1f fc87 	uxth.w	ip, r7
 80003bc:	2101      	movs	r1, #1
 80003be:	fbb3 f8f2 	udiv	r8, r3, r2
 80003c2:	0c25      	lsrs	r5, r4, #16
 80003c4:	fb02 3318 	mls	r3, r2, r8, r3
 80003c8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003cc:	fb0c f308 	mul.w	r3, ip, r8
 80003d0:	42ab      	cmp	r3, r5
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x134>
 80003d4:	19ed      	adds	r5, r5, r7
 80003d6:	f108 30ff 	add.w	r0, r8, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x132>
 80003dc:	42ab      	cmp	r3, r5
 80003de:	f200 80d1 	bhi.w	8000584 <__udivmoddi4+0x2d4>
 80003e2:	4680      	mov	r8, r0
 80003e4:	1aed      	subs	r5, r5, r3
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003ec:	fb02 5510 	mls	r5, r2, r0, r5
 80003f0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80003f4:	fb0c fc00 	mul.w	ip, ip, r0
 80003f8:	45a4      	cmp	ip, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x15c>
 80003fc:	19e4      	adds	r4, r4, r7
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x15a>
 8000404:	45a4      	cmp	ip, r4
 8000406:	f200 80b8 	bhi.w	800057a <__udivmoddi4+0x2ca>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 040c 	sub.w	r4, r4, ip
 8000410:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000414:	e79d      	b.n	8000352 <__udivmoddi4+0xa2>
 8000416:	4631      	mov	r1, r6
 8000418:	4630      	mov	r0, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1ce 0420 	rsb	r4, lr, #32
 8000422:	fa05 f30e 	lsl.w	r3, r5, lr
 8000426:	fa07 f70e 	lsl.w	r7, r7, lr
 800042a:	fa20 f804 	lsr.w	r8, r0, r4
 800042e:	0c3a      	lsrs	r2, r7, #16
 8000430:	fa25 f404 	lsr.w	r4, r5, r4
 8000434:	ea48 0803 	orr.w	r8, r8, r3
 8000438:	fbb4 f1f2 	udiv	r1, r4, r2
 800043c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000440:	fb02 4411 	mls	r4, r2, r1, r4
 8000444:	fa1f fc87 	uxth.w	ip, r7
 8000448:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800044c:	fb01 f30c 	mul.w	r3, r1, ip
 8000450:	42ab      	cmp	r3, r5
 8000452:	fa00 f40e 	lsl.w	r4, r0, lr
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x1bc>
 8000458:	19ed      	adds	r5, r5, r7
 800045a:	f101 30ff 	add.w	r0, r1, #4294967295
 800045e:	f080 808a 	bcs.w	8000576 <__udivmoddi4+0x2c6>
 8000462:	42ab      	cmp	r3, r5
 8000464:	f240 8087 	bls.w	8000576 <__udivmoddi4+0x2c6>
 8000468:	3902      	subs	r1, #2
 800046a:	443d      	add	r5, r7
 800046c:	1aeb      	subs	r3, r5, r3
 800046e:	fa1f f588 	uxth.w	r5, r8
 8000472:	fbb3 f0f2 	udiv	r0, r3, r2
 8000476:	fb02 3310 	mls	r3, r2, r0, r3
 800047a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800047e:	fb00 f30c 	mul.w	r3, r0, ip
 8000482:	42ab      	cmp	r3, r5
 8000484:	d907      	bls.n	8000496 <__udivmoddi4+0x1e6>
 8000486:	19ed      	adds	r5, r5, r7
 8000488:	f100 38ff 	add.w	r8, r0, #4294967295
 800048c:	d26f      	bcs.n	800056e <__udivmoddi4+0x2be>
 800048e:	42ab      	cmp	r3, r5
 8000490:	d96d      	bls.n	800056e <__udivmoddi4+0x2be>
 8000492:	3802      	subs	r0, #2
 8000494:	443d      	add	r5, r7
 8000496:	1aeb      	subs	r3, r5, r3
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	e78f      	b.n	80003be <__udivmoddi4+0x10e>
 800049e:	f1c1 0720 	rsb	r7, r1, #32
 80004a2:	fa22 f807 	lsr.w	r8, r2, r7
 80004a6:	408b      	lsls	r3, r1
 80004a8:	fa05 f401 	lsl.w	r4, r5, r1
 80004ac:	ea48 0303 	orr.w	r3, r8, r3
 80004b0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004b4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004b8:	40fd      	lsrs	r5, r7
 80004ba:	ea4e 0e04 	orr.w	lr, lr, r4
 80004be:	fbb5 f9fc 	udiv	r9, r5, ip
 80004c2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004c6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004ca:	fa1f f883 	uxth.w	r8, r3
 80004ce:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004d2:	fb09 f408 	mul.w	r4, r9, r8
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	fa02 f201 	lsl.w	r2, r2, r1
 80004dc:	fa00 fa01 	lsl.w	sl, r0, r1
 80004e0:	d908      	bls.n	80004f4 <__udivmoddi4+0x244>
 80004e2:	18ed      	adds	r5, r5, r3
 80004e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e8:	d243      	bcs.n	8000572 <__udivmoddi4+0x2c2>
 80004ea:	42ac      	cmp	r4, r5
 80004ec:	d941      	bls.n	8000572 <__udivmoddi4+0x2c2>
 80004ee:	f1a9 0902 	sub.w	r9, r9, #2
 80004f2:	441d      	add	r5, r3
 80004f4:	1b2d      	subs	r5, r5, r4
 80004f6:	fa1f fe8e 	uxth.w	lr, lr
 80004fa:	fbb5 f0fc 	udiv	r0, r5, ip
 80004fe:	fb0c 5510 	mls	r5, ip, r0, r5
 8000502:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000506:	fb00 f808 	mul.w	r8, r0, r8
 800050a:	45a0      	cmp	r8, r4
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x26e>
 800050e:	18e4      	adds	r4, r4, r3
 8000510:	f100 35ff 	add.w	r5, r0, #4294967295
 8000514:	d229      	bcs.n	800056a <__udivmoddi4+0x2ba>
 8000516:	45a0      	cmp	r8, r4
 8000518:	d927      	bls.n	800056a <__udivmoddi4+0x2ba>
 800051a:	3802      	subs	r0, #2
 800051c:	441c      	add	r4, r3
 800051e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000522:	eba4 0408 	sub.w	r4, r4, r8
 8000526:	fba0 8902 	umull	r8, r9, r0, r2
 800052a:	454c      	cmp	r4, r9
 800052c:	46c6      	mov	lr, r8
 800052e:	464d      	mov	r5, r9
 8000530:	d315      	bcc.n	800055e <__udivmoddi4+0x2ae>
 8000532:	d012      	beq.n	800055a <__udivmoddi4+0x2aa>
 8000534:	b156      	cbz	r6, 800054c <__udivmoddi4+0x29c>
 8000536:	ebba 030e 	subs.w	r3, sl, lr
 800053a:	eb64 0405 	sbc.w	r4, r4, r5
 800053e:	fa04 f707 	lsl.w	r7, r4, r7
 8000542:	40cb      	lsrs	r3, r1
 8000544:	431f      	orrs	r7, r3
 8000546:	40cc      	lsrs	r4, r1
 8000548:	6037      	str	r7, [r6, #0]
 800054a:	6074      	str	r4, [r6, #4]
 800054c:	2100      	movs	r1, #0
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	4618      	mov	r0, r3
 8000554:	e6f8      	b.n	8000348 <__udivmoddi4+0x98>
 8000556:	4690      	mov	r8, r2
 8000558:	e6e0      	b.n	800031c <__udivmoddi4+0x6c>
 800055a:	45c2      	cmp	sl, r8
 800055c:	d2ea      	bcs.n	8000534 <__udivmoddi4+0x284>
 800055e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000562:	eb69 0503 	sbc.w	r5, r9, r3
 8000566:	3801      	subs	r0, #1
 8000568:	e7e4      	b.n	8000534 <__udivmoddi4+0x284>
 800056a:	4628      	mov	r0, r5
 800056c:	e7d7      	b.n	800051e <__udivmoddi4+0x26e>
 800056e:	4640      	mov	r0, r8
 8000570:	e791      	b.n	8000496 <__udivmoddi4+0x1e6>
 8000572:	4681      	mov	r9, r0
 8000574:	e7be      	b.n	80004f4 <__udivmoddi4+0x244>
 8000576:	4601      	mov	r1, r0
 8000578:	e778      	b.n	800046c <__udivmoddi4+0x1bc>
 800057a:	3802      	subs	r0, #2
 800057c:	443c      	add	r4, r7
 800057e:	e745      	b.n	800040c <__udivmoddi4+0x15c>
 8000580:	4608      	mov	r0, r1
 8000582:	e708      	b.n	8000396 <__udivmoddi4+0xe6>
 8000584:	f1a8 0802 	sub.w	r8, r8, #2
 8000588:	443d      	add	r5, r7
 800058a:	e72b      	b.n	80003e4 <__udivmoddi4+0x134>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000590:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 8000592:	4b08      	ldr	r3, [pc, #32]	; (80005b4 <HAL_InitTick+0x24>)
{
 8000594:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 8000596:	6818      	ldr	r0, [r3, #0]
 8000598:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800059c:	fbb0 f0f3 	udiv	r0, r0, r3
 80005a0:	f000 f87e 	bl	80006a0 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 80005a4:	2200      	movs	r2, #0
 80005a6:	4621      	mov	r1, r4
 80005a8:	f04f 30ff 	mov.w	r0, #4294967295
 80005ac:	f000 f844 	bl	8000638 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 80005b0:	2000      	movs	r0, #0
 80005b2:	bd10      	pop	{r4, pc}
 80005b4:	20000000 	.word	0x20000000

080005b8 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005b8:	4a07      	ldr	r2, [pc, #28]	; (80005d8 <HAL_Init+0x20>)
{
 80005ba:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005bc:	6813      	ldr	r3, [r2, #0]
 80005be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005c2:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005c4:	2003      	movs	r0, #3
 80005c6:	f000 f825 	bl	8000614 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80005ca:	2000      	movs	r0, #0
 80005cc:	f7ff ffe0 	bl	8000590 <HAL_InitTick>
  HAL_MspInit();
 80005d0:	f001 fdb0 	bl	8002134 <HAL_MspInit>
}
 80005d4:	2000      	movs	r0, #0
 80005d6:	bd08      	pop	{r3, pc}
 80005d8:	40022000 	.word	0x40022000

080005dc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80005dc:	4a02      	ldr	r2, [pc, #8]	; (80005e8 <HAL_IncTick+0xc>)
 80005de:	6813      	ldr	r3, [r2, #0]
 80005e0:	3301      	adds	r3, #1
 80005e2:	6013      	str	r3, [r2, #0]
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	200001fc 	.word	0x200001fc

080005ec <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80005ec:	4b01      	ldr	r3, [pc, #4]	; (80005f4 <HAL_GetTick+0x8>)
 80005ee:	6818      	ldr	r0, [r3, #0]
}
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	200001fc 	.word	0x200001fc

080005f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005f8:	b538      	push	{r3, r4, r5, lr}
 80005fa:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80005fc:	f7ff fff6 	bl	80005ec <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000600:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8000602:	4605      	mov	r5, r0
  {
    wait++;
 8000604:	bf18      	it	ne
 8000606:	3401      	addne	r4, #1
  } 

  while((HAL_GetTick() - tickstart) < wait)
 8000608:	f7ff fff0 	bl	80005ec <HAL_GetTick>
 800060c:	1b40      	subs	r0, r0, r5
 800060e:	4284      	cmp	r4, r0
 8000610:	d8fa      	bhi.n	8000608 <HAL_Delay+0x10>
  {
  }
}
 8000612:	bd38      	pop	{r3, r4, r5, pc}

08000614 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000614:	4a07      	ldr	r2, [pc, #28]	; (8000634 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000616:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000618:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800061c:	041b      	lsls	r3, r3, #16
 800061e:	0c1b      	lsrs	r3, r3, #16
 8000620:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000624:	0200      	lsls	r0, r0, #8
 8000626:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800062a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800062e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000630:	60d3      	str	r3, [r2, #12]
 8000632:	4770      	bx	lr
 8000634:	e000ed00 	.word	0xe000ed00

08000638 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000638:	4b17      	ldr	r3, [pc, #92]	; (8000698 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800063a:	b530      	push	{r4, r5, lr}
 800063c:	68dc      	ldr	r4, [r3, #12]
 800063e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000642:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000646:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000648:	2b04      	cmp	r3, #4
 800064a:	bf28      	it	cs
 800064c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800064e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000650:	f04f 0501 	mov.w	r5, #1
 8000654:	fa05 f303 	lsl.w	r3, r5, r3
 8000658:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800065c:	bf8c      	ite	hi
 800065e:	3c03      	subhi	r4, #3
 8000660:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000662:	4019      	ands	r1, r3
 8000664:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000666:	fa05 f404 	lsl.w	r4, r5, r4
 800066a:	3c01      	subs	r4, #1
 800066c:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 800066e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000670:	ea42 0201 	orr.w	r2, r2, r1
 8000674:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000678:	bfaf      	iteee	ge
 800067a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800067e:	f000 000f 	andlt.w	r0, r0, #15
 8000682:	4b06      	ldrlt	r3, [pc, #24]	; (800069c <HAL_NVIC_SetPriority+0x64>)
 8000684:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000686:	bfa5      	ittet	ge
 8000688:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 800068c:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800068e:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000690:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000694:	bd30      	pop	{r4, r5, pc}
 8000696:	bf00      	nop
 8000698:	e000ed00 	.word	0xe000ed00
 800069c:	e000ed14 	.word	0xe000ed14

080006a0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006a0:	3801      	subs	r0, #1
 80006a2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006a6:	d20a      	bcs.n	80006be <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006a8:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006aa:	4a07      	ldr	r2, [pc, #28]	; (80006c8 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006ac:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ae:	21f0      	movs	r1, #240	; 0xf0
 80006b0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006b4:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006b6:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006b8:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80006be:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop
 80006c4:	e000e010 	.word	0xe000e010
 80006c8:	e000ed00 	.word	0xe000ed00

080006cc <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80006cc:	4b04      	ldr	r3, [pc, #16]	; (80006e0 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80006ce:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80006d0:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80006d2:	bf0c      	ite	eq
 80006d4:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80006d8:	f022 0204 	bicne.w	r2, r2, #4
 80006dc:	601a      	str	r2, [r3, #0]
 80006de:	4770      	bx	lr
 80006e0:	e000e010 	.word	0xe000e010

080006e4 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80006e4:	4770      	bx	lr

080006e6 <HAL_SYSTICK_IRQHandler>:
{
 80006e6:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80006e8:	f7ff fffc 	bl	80006e4 <HAL_SYSTICK_Callback>
 80006ec:	bd08      	pop	{r3, pc}

080006ee <HAL_DAC_Init>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 80006ee:	b510      	push	{r4, lr}
  /* Check DAC handle */
  if(hdac == NULL)
 80006f0:	4604      	mov	r4, r0
 80006f2:	b168      	cbz	r0, 8000710 <HAL_DAC_Init+0x22>
     return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 80006f4:	7903      	ldrb	r3, [r0, #4]
 80006f6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80006fa:	b913      	cbnz	r3, 8000702 <HAL_DAC_Init+0x14>
  {  
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80006fc:	7142      	strb	r2, [r0, #5]

    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80006fe:	f001 fd5f 	bl	80021c0 <HAL_DAC_MspInit>
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8000702:	2302      	movs	r3, #2
 8000704:	7123      	strb	r3, [r4, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000706:	2000      	movs	r0, #0
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8000708:	2301      	movs	r3, #1
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800070a:	6120      	str	r0, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 800070c:	7123      	strb	r3, [r4, #4]
  
  /* Return function status */
  return HAL_OK;
 800070e:	bd10      	pop	{r4, pc}
     return HAL_ERROR;
 8000710:	2001      	movs	r0, #1
}
 8000712:	bd10      	pop	{r4, pc}

08000714 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8000714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime)); 
  }
  assert_param(IS_DAC_CHANNEL(Channel));
 
  /* Process locked */
  __HAL_LOCK(hdac);
 8000716:	7943      	ldrb	r3, [r0, #5]
 8000718:	2b01      	cmp	r3, #1
{
 800071a:	4604      	mov	r4, r0
 800071c:	460e      	mov	r6, r1
 800071e:	4615      	mov	r5, r2
 8000720:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hdac);
 8000724:	d05e      	beq.n	80007e4 <HAL_DAC_ConfigChannel+0xd0>
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 8000726:	680b      	ldr	r3, [r1, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000728:	7120      	strb	r0, [r4, #4]
  __HAL_LOCK(hdac);
 800072a:	2201      	movs	r2, #1
  
  if(sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800072c:	2b04      	cmp	r3, #4
  __HAL_LOCK(hdac);
 800072e:	7162      	strb	r2, [r4, #5]
  if(sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8000730:	d122      	bne.n	8000778 <HAL_DAC_ConfigChannel+0x64>
  /* Sample on old configuration */ 
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 8000732:	2d00      	cmp	r5, #0
 8000734:	d167      	bne.n	8000806 <HAL_DAC_ConfigChannel+0xf2>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 8000736:	f7ff ff59 	bl	80005ec <HAL_GetTick>
 800073a:	4607      	mov	r7, r0
      
      /* SHSR1 can be written when BWST1  equals RESET */
      while (((hdac->Instance->SR) & DAC_SR_BWST1)!= RESET)
 800073c:	6823      	ldr	r3, [r4, #0]
 800073e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000740:	041b      	lsls	r3, r3, #16
 8000742:	d450      	bmi.n	80007e6 <HAL_DAC_ConfigChannel+0xd2>
          hdac->State = HAL_DAC_STATE_TIMEOUT;

          return HAL_TIMEOUT;
        }
      }
      HAL_Delay(1);
 8000744:	2001      	movs	r0, #1
 8000746:	f7ff ff57 	bl	80005f8 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800074a:	6823      	ldr	r3, [r4, #0]
 800074c:	69b2      	ldr	r2, [r6, #24]
 800074e:	641a      	str	r2, [r3, #64]	; 0x40
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */   
    
    /* HoldTime */
    MODIFY_REG (hdac->Instance->SHHR, DAC_SHHR_THOLD1<<Channel, (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime)<<Channel);
 8000750:	6822      	ldr	r2, [r4, #0]
 8000752:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8000756:	6c93      	ldr	r3, [r2, #72]	; 0x48
 8000758:	40a9      	lsls	r1, r5
 800075a:	ea23 0301 	bic.w	r3, r3, r1
 800075e:	69f1      	ldr	r1, [r6, #28]
 8000760:	40a9      	lsls	r1, r5
 8000762:	430b      	orrs	r3, r1
 8000764:	6493      	str	r3, [r2, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG (hdac->Instance->SHRR, DAC_SHRR_TREFRESH1<<Channel, (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime)<<Channel);
 8000766:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8000768:	21ff      	movs	r1, #255	; 0xff
 800076a:	40a9      	lsls	r1, r5
 800076c:	ea23 0301 	bic.w	r3, r3, r1
 8000770:	6a31      	ldr	r1, [r6, #32]
 8000772:	40a9      	lsls	r1, r5
 8000774:	430b      	orrs	r3, r1
 8000776:	64d3      	str	r3, [r2, #76]	; 0x4c
  }
    
  if(sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8000778:	6933      	ldr	r3, [r6, #16]
 800077a:	2b01      	cmp	r3, #1
 800077c:	6823      	ldr	r3, [r4, #0]
 800077e:	d108      	bne.n	8000792 <HAL_DAC_ConfigChannel+0x7e>
  /* USER TRIMMING */
  {
  /* Get the DAC CCR value */
  tmpreg1 = hdac->Instance->CCR;
 8000780:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  /* Clear trimming value */
  tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << Channel);
 8000782:	211f      	movs	r1, #31
 8000784:	40a9      	lsls	r1, r5
 8000786:	ea22 0101 	bic.w	r1, r2, r1
  /* Configure for the selected trimming offset */
  tmpreg2 = sConfig->DAC_TrimmingValue;
  /* Calculate CCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 800078a:	6972      	ldr	r2, [r6, #20]
 800078c:	40aa      	lsls	r2, r5
 800078e:	430a      	orrs	r2, r1
  /* Write to DAC CCR */
  hdac->Instance->CCR = tmpreg1;
 8000790:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */
  
  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8000792:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  /* Clear DAC_MCR_MODE2_0, DAC_MCR_MODE2_1 and DAC_MCR_MODE2_2 bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << Channel); 
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8000794:	68b0      	ldr	r0, [r6, #8]
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << Channel); 
 8000796:	2107      	movs	r1, #7
 8000798:	40a9      	lsls	r1, r5
 800079a:	ea22 0101 	bic.w	r1, r2, r1
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 800079e:	6832      	ldr	r2, [r6, #0]
 80007a0:	4302      	orrs	r2, r0
 80007a2:	68f0      	ldr	r0, [r6, #12]
 80007a4:	4302      	orrs	r2, r0
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80007a6:	40aa      	lsls	r2, r5
 80007a8:	430a      	orrs	r2, r1
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80007aa:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT (hdac->Instance->CR, DAC_CR_CEN1 << Channel);
 80007ac:	681a      	ldr	r2, [r3, #0]
 80007ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007b2:	40a9      	lsls	r1, r5
 80007b4:	ea22 0201 	bic.w	r2, r2, r1
 80007b8:	601a      	str	r2, [r3, #0]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80007ba:	681a      	ldr	r2, [r3, #0]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << Channel); 
 80007bc:	f640 71fc 	movw	r1, #4092	; 0xffc
 80007c0:	40a9      	lsls	r1, r5
 80007c2:	ea22 0101 	bic.w	r1, r2, r1
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = (sConfig->DAC_Trigger);
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80007c6:	6872      	ldr	r2, [r6, #4]
 80007c8:	40aa      	lsls	r2, r5
 80007ca:	430a      	orrs	r2, r1
  }
  
#endif /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */  

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80007cc:	601a      	str	r2, [r3, #0]
      
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80007ce:	6819      	ldr	r1, [r3, #0]
 80007d0:	22c0      	movs	r2, #192	; 0xc0
 80007d2:	fa02 f505 	lsl.w	r5, r2, r5
 80007d6:	ea21 0505 	bic.w	r5, r1, r5
 80007da:	601d      	str	r5, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80007dc:	2000      	movs	r0, #0
  hdac->State = HAL_DAC_STATE_READY;
 80007de:	2301      	movs	r3, #1
 80007e0:	7123      	strb	r3, [r4, #4]
  __HAL_UNLOCK(hdac);
 80007e2:	7160      	strb	r0, [r4, #5]
  
  /* Return function status */
  return HAL_OK;
}
 80007e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80007e6:	f7ff ff01 	bl	80005ec <HAL_GetTick>
 80007ea:	1bc0      	subs	r0, r0, r7
 80007ec:	2801      	cmp	r0, #1
 80007ee:	d9a5      	bls.n	800073c <HAL_DAC_ConfigChannel+0x28>
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80007f0:	6923      	ldr	r3, [r4, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80007f2:	2003      	movs	r0, #3
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80007f4:	f043 0308 	orr.w	r3, r3, #8
 80007f8:	6123      	str	r3, [r4, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80007fa:	7120      	strb	r0, [r4, #4]
          return HAL_TIMEOUT;
 80007fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80007fe:	f7ff fef5 	bl	80005ec <HAL_GetTick>
 8000802:	2801      	cmp	r0, #1
 8000804:	d8f4      	bhi.n	80007f0 <HAL_DAC_ConfigChannel+0xdc>
      while (((hdac->Instance->SR) & DAC_SR_BWST2)!= RESET)
 8000806:	6823      	ldr	r3, [r4, #0]
 8000808:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800080a:	2b00      	cmp	r3, #0
 800080c:	dbf7      	blt.n	80007fe <HAL_DAC_ConfigChannel+0xea>
      HAL_Delay(1);
 800080e:	2001      	movs	r0, #1
 8000810:	f7ff fef2 	bl	80005f8 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8000814:	6823      	ldr	r3, [r4, #0]
 8000816:	69b2      	ldr	r2, [r6, #24]
 8000818:	645a      	str	r2, [r3, #68]	; 0x44
 800081a:	e799      	b.n	8000750 <HAL_DAC_ConfigChannel+0x3c>

0800081c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800081c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000820:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000822:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000824:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80009d0 <HAL_GPIO_Init+0x1b4>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000828:	4c67      	ldr	r4, [pc, #412]	; (80009c8 <HAL_GPIO_Init+0x1ac>)
  while (((GPIO_Init->Pin) >> position) != RESET)
 800082a:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00;
 800082c:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 800082e:	9a01      	ldr	r2, [sp, #4]
 8000830:	40da      	lsrs	r2, r3
 8000832:	d102      	bne.n	800083a <HAL_GPIO_Init+0x1e>
      }
    }
    
    position++;
  }
}
 8000834:	b005      	add	sp, #20
 8000836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800083a:	2601      	movs	r6, #1
    if(iocurrent)
 800083c:	9a01      	ldr	r2, [sp, #4]
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800083e:	409e      	lsls	r6, r3
    if(iocurrent)
 8000840:	ea12 0e06 	ands.w	lr, r2, r6
 8000844:	f000 80b1 	beq.w	80009aa <HAL_GPIO_Init+0x18e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000848:	684a      	ldr	r2, [r1, #4]
 800084a:	f022 0710 	bic.w	r7, r2, #16
 800084e:	2f02      	cmp	r7, #2
 8000850:	d116      	bne.n	8000880 <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3];
 8000852:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 8000856:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800085a:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3];
 800085e:	f8d9 5020 	ldr.w	r5, [r9, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000862:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8000866:	f04f 0c0f 	mov.w	ip, #15
 800086a:	fa0c fc0a 	lsl.w	ip, ip, sl
 800086e:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000872:	690d      	ldr	r5, [r1, #16]
 8000874:	fa05 f50a 	lsl.w	r5, r5, sl
 8000878:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3] = temp;
 800087c:	f8c9 5020 	str.w	r5, [r9, #32]
 8000880:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 8000884:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000886:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 800088a:	fa05 f50c 	lsl.w	r5, r5, ip
 800088e:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000890:	f002 0a03 	and.w	sl, r2, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 8000894:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000898:	fa0a f90c 	lsl.w	r9, sl, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800089c:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800089e:	ea49 090b 	orr.w	r9, r9, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008a2:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 80008a4:	f8c0 9000 	str.w	r9, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008a8:	d811      	bhi.n	80008ce <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 80008aa:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2));
 80008ac:	ea05 0907 	and.w	r9, r5, r7
        temp |= (GPIO_Init->Speed << (position * 2));
 80008b0:	68cf      	ldr	r7, [r1, #12]
 80008b2:	fa07 f70c 	lsl.w	r7, r7, ip
 80008b6:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OSPEEDR = temp;
 80008ba:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80008bc:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80008be:	ea27 0906 	bic.w	r9, r7, r6
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80008c2:	f3c2 1700 	ubfx	r7, r2, #4, #1
 80008c6:	409f      	lsls	r7, r3
 80008c8:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OTYPER = temp;
 80008cc:	6047      	str	r7, [r0, #4]
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80008ce:	f1ba 0f03 	cmp.w	sl, #3
 80008d2:	d107      	bne.n	80008e4 <HAL_GPIO_Init+0xc8>
        temp = GPIOx->ASCR;
 80008d4:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80008d6:	ea27 0606 	bic.w	r6, r7, r6
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80008da:	f3c2 07c0 	ubfx	r7, r2, #3, #1
 80008de:	409f      	lsls	r7, r3
 80008e0:	433e      	orrs	r6, r7
        GPIOx->ASCR = temp;
 80008e2:	62c6      	str	r6, [r0, #44]	; 0x2c
      temp = GPIOx->PUPDR;
 80008e4:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2));
 80008e6:	4035      	ands	r5, r6
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80008e8:	688e      	ldr	r6, [r1, #8]
 80008ea:	fa06 f60c 	lsl.w	r6, r6, ip
 80008ee:	4335      	orrs	r5, r6
      GPIOx->PUPDR = temp;
 80008f0:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80008f2:	00d5      	lsls	r5, r2, #3
 80008f4:	d559      	bpl.n	80009aa <HAL_GPIO_Init+0x18e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008f6:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 80008fa:	f045 0501 	orr.w	r5, r5, #1
 80008fe:	f8c8 5060 	str.w	r5, [r8, #96]	; 0x60
 8000902:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 8000906:	f023 0603 	bic.w	r6, r3, #3
 800090a:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 800090e:	f005 0501 	and.w	r5, r5, #1
 8000912:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 8000916:	9503      	str	r5, [sp, #12]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000918:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800091c:	9d03      	ldr	r5, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 800091e:	68b5      	ldr	r5, [r6, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000920:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000924:	270f      	movs	r7, #15
 8000926:	fa07 f70c 	lsl.w	r7, r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 800092a:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800092e:	ea25 0707 	bic.w	r7, r5, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8000932:	d03c      	beq.n	80009ae <HAL_GPIO_Init+0x192>
 8000934:	4d25      	ldr	r5, [pc, #148]	; (80009cc <HAL_GPIO_Init+0x1b0>)
 8000936:	42a8      	cmp	r0, r5
 8000938:	d03b      	beq.n	80009b2 <HAL_GPIO_Init+0x196>
 800093a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800093e:	42a8      	cmp	r0, r5
 8000940:	d039      	beq.n	80009b6 <HAL_GPIO_Init+0x19a>
 8000942:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000946:	42a8      	cmp	r0, r5
 8000948:	d037      	beq.n	80009ba <HAL_GPIO_Init+0x19e>
 800094a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800094e:	42a8      	cmp	r0, r5
 8000950:	d035      	beq.n	80009be <HAL_GPIO_Init+0x1a2>
 8000952:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000956:	42a8      	cmp	r0, r5
 8000958:	d033      	beq.n	80009c2 <HAL_GPIO_Init+0x1a6>
 800095a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800095e:	42a8      	cmp	r0, r5
 8000960:	bf14      	ite	ne
 8000962:	2507      	movne	r5, #7
 8000964:	2506      	moveq	r5, #6
 8000966:	fa05 f50c 	lsl.w	r5, r5, ip
 800096a:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 800096c:	60b5      	str	r5, [r6, #8]
        temp = EXTI->IMR1;
 800096e:	6825      	ldr	r5, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8000970:	ea6f 060e 	mvn.w	r6, lr
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000974:	03d7      	lsls	r7, r2, #15
        temp &= ~((uint32_t)iocurrent);
 8000976:	bf54      	ite	pl
 8000978:	4035      	andpl	r5, r6
          temp |= iocurrent;
 800097a:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->IMR1 = temp;
 800097e:	6025      	str	r5, [r4, #0]
        temp = EXTI->EMR1;
 8000980:	6865      	ldr	r5, [r4, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000982:	0397      	lsls	r7, r2, #14
        temp &= ~((uint32_t)iocurrent);
 8000984:	bf54      	ite	pl
 8000986:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8000988:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->EMR1 = temp;
 800098c:	6065      	str	r5, [r4, #4]
        temp = EXTI->RTSR1;
 800098e:	68a5      	ldr	r5, [r4, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000990:	02d7      	lsls	r7, r2, #11
        temp &= ~((uint32_t)iocurrent);
 8000992:	bf54      	ite	pl
 8000994:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8000996:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->RTSR1 = temp;
 800099a:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR1;
 800099c:	68e5      	ldr	r5, [r4, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800099e:	0292      	lsls	r2, r2, #10
        temp &= ~((uint32_t)iocurrent);
 80009a0:	bf54      	ite	pl
 80009a2:	4035      	andpl	r5, r6
          temp |= iocurrent;
 80009a4:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->FTSR1 = temp;
 80009a8:	60e5      	str	r5, [r4, #12]
    position++;
 80009aa:	3301      	adds	r3, #1
 80009ac:	e73f      	b.n	800082e <HAL_GPIO_Init+0x12>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 80009ae:	2500      	movs	r5, #0
 80009b0:	e7d9      	b.n	8000966 <HAL_GPIO_Init+0x14a>
 80009b2:	2501      	movs	r5, #1
 80009b4:	e7d7      	b.n	8000966 <HAL_GPIO_Init+0x14a>
 80009b6:	2502      	movs	r5, #2
 80009b8:	e7d5      	b.n	8000966 <HAL_GPIO_Init+0x14a>
 80009ba:	2503      	movs	r5, #3
 80009bc:	e7d3      	b.n	8000966 <HAL_GPIO_Init+0x14a>
 80009be:	2504      	movs	r5, #4
 80009c0:	e7d1      	b.n	8000966 <HAL_GPIO_Init+0x14a>
 80009c2:	2505      	movs	r5, #5
 80009c4:	e7cf      	b.n	8000966 <HAL_GPIO_Init+0x14a>
 80009c6:	bf00      	nop
 80009c8:	40010400 	.word	0x40010400
 80009cc:	48000400 	.word	0x48000400
 80009d0:	40021000 	.word	0x40021000

080009d4 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80009d4:	6903      	ldr	r3, [r0, #16]
 80009d6:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80009d8:	bf14      	ite	ne
 80009da:	2001      	movne	r0, #1
 80009dc:	2000      	moveq	r0, #0
 80009de:	4770      	bx	lr

080009e0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80009e0:	b10a      	cbz	r2, 80009e6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80009e2:	6181      	str	r1, [r0, #24]
 80009e4:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80009e6:	6281      	str	r1, [r0, #40]	; 0x28
 80009e8:	4770      	bx	lr

080009ea <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80009ea:	6943      	ldr	r3, [r0, #20]
 80009ec:	4059      	eors	r1, r3
 80009ee:	6141      	str	r1, [r0, #20]
 80009f0:	4770      	bx	lr
	...

080009f4 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80009f4:	4b02      	ldr	r3, [pc, #8]	; (8000a00 <HAL_PWREx_GetVoltageRange+0xc>)
 80009f6:	6818      	ldr	r0, [r3, #0]
#endif  
}
 80009f8:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	40007000 	.word	0x40007000

08000a04 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.                    
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000a04:	4b16      	ldr	r3, [pc, #88]	; (8000a60 <HAL_PWREx_ControlVoltageScaling+0x5c>)
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000a06:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000a08:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000a0c:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000a10:	d11a      	bne.n	8000a48 <HAL_PWREx_ControlVoltageScaling+0x44>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000a12:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8000a16:	d013      	beq.n	8000a40 <HAL_PWREx_ControlVoltageScaling+0x3c>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a18:	681a      	ldr	r2, [r3, #0]
      
      /* Wait until VOSF is cleared */      
      wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000));
 8000a1a:	4912      	ldr	r1, [pc, #72]	; (8000a64 <HAL_PWREx_ControlVoltageScaling+0x60>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a1c:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8000a20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000a24:	601a      	str	r2, [r3, #0]
      wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000));
 8000a26:	4a10      	ldr	r2, [pc, #64]	; (8000a68 <HAL_PWREx_ControlVoltageScaling+0x64>)
 8000a28:	6812      	ldr	r2, [r2, #0]
 8000a2a:	fbb2 f1f1 	udiv	r1, r2, r1
 8000a2e:	2232      	movs	r2, #50	; 0x32
 8000a30:	434a      	muls	r2, r1
      while ((wait_loop_index != 0) && (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)))
 8000a32:	b112      	cbz	r2, 8000a3a <HAL_PWREx_ControlVoltageScaling+0x36>
 8000a34:	6959      	ldr	r1, [r3, #20]
 8000a36:	0549      	lsls	r1, r1, #21
 8000a38:	d404      	bmi.n	8000a44 <HAL_PWREx_ControlVoltageScaling+0x40>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000a3a:	695b      	ldr	r3, [r3, #20]
 8000a3c:	055b      	lsls	r3, r3, #21
 8000a3e:	d40d      	bmi.n	8000a5c <HAL_PWREx_ControlVoltageScaling+0x58>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif  
  
  return HAL_OK;
 8000a40:	2000      	movs	r0, #0
 8000a42:	4770      	bx	lr
        wait_loop_index--;
 8000a44:	3a01      	subs	r2, #1
 8000a46:	e7f4      	b.n	8000a32 <HAL_PWREx_ControlVoltageScaling+0x2e>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000a48:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000a4c:	bf1f      	itttt	ne
 8000a4e:	681a      	ldrne	r2, [r3, #0]
 8000a50:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 8000a54:	f442 6280 	orrne.w	r2, r2, #1024	; 0x400
 8000a58:	601a      	strne	r2, [r3, #0]
 8000a5a:	e7f1      	b.n	8000a40 <HAL_PWREx_ControlVoltageScaling+0x3c>
        return HAL_TIMEOUT;
 8000a5c:	2003      	movs	r0, #3
}  
 8000a5e:	4770      	bx	lr
 8000a60:	40007000 	.word	0x40007000
 8000a64:	000f4240 	.word	0x000f4240
 8000a68:	20000000 	.word	0x20000000

08000a6c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8000a6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos = 0;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8000a6e:	4d1e      	ldr	r5, [pc, #120]	; (8000ae8 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8000a70:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000a72:	00da      	lsls	r2, r3, #3
{
 8000a74:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8000a76:	d518      	bpl.n	8000aaa <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8000a78:	f7ff ffbc 	bl	80009f4 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000a7c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8000a80:	d123      	bne.n	8000aca <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8000a82:	2c80      	cmp	r4, #128	; 0x80
 8000a84:	d929      	bls.n	8000ada <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8000a86:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8000a88:	bf8c      	ite	hi
 8000a8a:	2002      	movhi	r0, #2
 8000a8c:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8000a8e:	4a17      	ldr	r2, [pc, #92]	; (8000aec <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8000a90:	6813      	ldr	r3, [r2, #0]
 8000a92:	f023 0307 	bic.w	r3, r3, #7
 8000a96:	4303      	orrs	r3, r0
 8000a98:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY) != latency)
 8000a9a:	6813      	ldr	r3, [r2, #0]
 8000a9c:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8000aa0:	1a18      	subs	r0, r3, r0
 8000aa2:	bf18      	it	ne
 8000aa4:	2001      	movne	r0, #1
 8000aa6:	b003      	add	sp, #12
 8000aa8:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8000aaa:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000aac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ab0:	65ab      	str	r3, [r5, #88]	; 0x58
 8000ab2:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000ab4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ab8:	9301      	str	r3, [sp, #4]
 8000aba:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8000abc:	f7ff ff9a 	bl	80009f4 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8000ac0:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000ac2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000ac6:	65ab      	str	r3, [r5, #88]	; 0x58
 8000ac8:	e7d8      	b.n	8000a7c <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 8000aca:	2c80      	cmp	r4, #128	; 0x80
 8000acc:	d807      	bhi.n	8000ade <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 8000ace:	d008      	beq.n	8000ae2 <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 8000ad0:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 8000ad4:	4258      	negs	r0, r3
 8000ad6:	4158      	adcs	r0, r3
 8000ad8:	e7d9      	b.n	8000a8e <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8000ada:	2000      	movs	r0, #0
 8000adc:	e7d7      	b.n	8000a8e <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 8000ade:	2003      	movs	r0, #3
 8000ae0:	e7d5      	b.n	8000a8e <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 8000ae2:	2002      	movs	r0, #2
 8000ae4:	e7d3      	b.n	8000a8e <RCC_SetFlashLatencyFromMSIRange+0x22>
 8000ae6:	bf00      	nop
 8000ae8:	40021000 	.word	0x40021000
 8000aec:	40022000 	.word	0x40022000

08000af0 <HAL_RCC_GetSysClockFreq>:
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8000af0:	4b2f      	ldr	r3, [pc, #188]	; (8000bb0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8000af2:	689a      	ldr	r2, [r3, #8]
 8000af4:	f012 0f0c 	tst.w	r2, #12
{
 8000af8:	b510      	push	{r4, lr}
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8000afa:	d009      	beq.n	8000b10 <HAL_RCC_GetSysClockFreq+0x20>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 8000afc:	689a      	ldr	r2, [r3, #8]
 8000afe:	f002 020c 	and.w	r2, r2, #12
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8000b02:	2a0c      	cmp	r2, #12
 8000b04:	d12d      	bne.n	8000b62 <HAL_RCC_GetSysClockFreq+0x72>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 8000b06:	68da      	ldr	r2, [r3, #12]
 8000b08:	f002 0203 	and.w	r2, r2, #3
 8000b0c:	2a01      	cmp	r2, #1
 8000b0e:	d128      	bne.n	8000b62 <HAL_RCC_GetSysClockFreq+0x72>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 8000b10:	681a      	ldr	r2, [r3, #0]
    msirange = MSIRangeTable[msirange];
 8000b12:	4928      	ldr	r1, [pc, #160]	; (8000bb4 <HAL_RCC_GetSysClockFreq+0xc4>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 8000b14:	0712      	lsls	r2, r2, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8000b16:	bf55      	itete	pl
 8000b18:	f8d3 2094 	ldrpl.w	r2, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8000b1c:	681a      	ldrmi	r2, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8000b1e:	f3c2 2203 	ubfxpl	r2, r2, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8000b22:	f3c2 1203 	ubfxmi	r2, r2, #4, #4
    msirange = MSIRangeTable[msirange];
 8000b26:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI)
 8000b2a:	6899      	ldr	r1, [r3, #8]
      sysclockfreq = msirange;
 8000b2c:	f011 0f0c 	tst.w	r1, #12
 8000b30:	bf0c      	ite	eq
 8000b32:	4610      	moveq	r0, r2
 8000b34:	2000      	movne	r0, #0
  if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8000b36:	6899      	ldr	r1, [r3, #8]
 8000b38:	f001 010c 	and.w	r1, r1, #12
 8000b3c:	290c      	cmp	r1, #12
 8000b3e:	d130      	bne.n	8000ba2 <HAL_RCC_GetSysClockFreq+0xb2>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8000b40:	68dc      	ldr	r4, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8000b42:	68d8      	ldr	r0, [r3, #12]
 8000b44:	f3c0 1002 	ubfx	r0, r0, #4, #3
 8000b48:	1c41      	adds	r1, r0, #1
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8000b4a:	f004 0003 	and.w	r0, r4, #3
    switch (pllsource)
 8000b4e:	2802      	cmp	r0, #2
 8000b50:	d019      	beq.n	8000b86 <HAL_RCC_GetSysClockFreq+0x96>
 8000b52:	2803      	cmp	r0, #3
 8000b54:	d026      	beq.n	8000ba4 <HAL_RCC_GetSysClockFreq+0xb4>
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000b56:	fbb2 f2f1 	udiv	r2, r2, r1
 8000b5a:	68d8      	ldr	r0, [r3, #12]
 8000b5c:	f3c0 2006 	ubfx	r0, r0, #8, #7
 8000b60:	e017      	b.n	8000b92 <HAL_RCC_GetSysClockFreq+0xa2>
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8000b62:	689a      	ldr	r2, [r3, #8]
 8000b64:	f002 020c 	and.w	r2, r2, #12
 8000b68:	2a04      	cmp	r2, #4
 8000b6a:	d007      	beq.n	8000b7c <HAL_RCC_GetSysClockFreq+0x8c>
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8000b6c:	689a      	ldr	r2, [r3, #8]
 8000b6e:	f002 020c 	and.w	r2, r2, #12
 8000b72:	2a08      	cmp	r2, #8
 8000b74:	d104      	bne.n	8000b80 <HAL_RCC_GetSysClockFreq+0x90>
    sysclockfreq = HSE_VALUE;
 8000b76:	4810      	ldr	r0, [pc, #64]	; (8000bb8 <HAL_RCC_GetSysClockFreq+0xc8>)
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 8000b78:	2200      	movs	r2, #0
 8000b7a:	e7dc      	b.n	8000b36 <HAL_RCC_GetSysClockFreq+0x46>
    sysclockfreq = HSI_VALUE;
 8000b7c:	480f      	ldr	r0, [pc, #60]	; (8000bbc <HAL_RCC_GetSysClockFreq+0xcc>)
 8000b7e:	e7fb      	b.n	8000b78 <HAL_RCC_GetSysClockFreq+0x88>
  uint32_t sysclockfreq = 0U;
 8000b80:	2000      	movs	r0, #0
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 8000b82:	4602      	mov	r2, r0
 8000b84:	e7d7      	b.n	8000b36 <HAL_RCC_GetSysClockFreq+0x46>
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000b86:	68da      	ldr	r2, [r3, #12]
 8000b88:	480c      	ldr	r0, [pc, #48]	; (8000bbc <HAL_RCC_GetSysClockFreq+0xcc>)
 8000b8a:	f3c2 2206 	ubfx	r2, r2, #8, #7
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000b8e:	fbb0 f0f1 	udiv	r0, r0, r1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8000b92:	68db      	ldr	r3, [r3, #12]
 8000b94:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8000b98:	3301      	adds	r3, #1
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000b9a:	4350      	muls	r0, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8000b9c:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8000b9e:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8000ba2:	bd10      	pop	{r4, pc}
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000ba4:	68da      	ldr	r2, [r3, #12]
 8000ba6:	4804      	ldr	r0, [pc, #16]	; (8000bb8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8000ba8:	f3c2 2206 	ubfx	r2, r2, #8, #7
 8000bac:	e7ef      	b.n	8000b8e <HAL_RCC_GetSysClockFreq+0x9e>
 8000bae:	bf00      	nop
 8000bb0:	40021000 	.word	0x40021000
 8000bb4:	08002e78 	.word	0x08002e78
 8000bb8:	007a1200 	.word	0x007a1200
 8000bbc:	00f42400 	.word	0x00f42400

08000bc0 <HAL_RCC_OscConfig>:
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000bc0:	6803      	ldr	r3, [r0, #0]
{
 8000bc2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8000bc6:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000bc8:	06d8      	lsls	r0, r3, #27
 8000bca:	d53b      	bpl.n	8000c44 <HAL_RCC_OscConfig+0x84>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 8000bcc:	4ca9      	ldr	r4, [pc, #676]	; (8000e74 <HAL_RCC_OscConfig+0x2b4>)
 8000bce:	68a3      	ldr	r3, [r4, #8]
 8000bd0:	f013 0f0c 	tst.w	r3, #12
 8000bd4:	d160      	bne.n	8000c98 <HAL_RCC_OscConfig+0xd8>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000bd6:	6823      	ldr	r3, [r4, #0]
 8000bd8:	0799      	lsls	r1, r3, #30
 8000bda:	d505      	bpl.n	8000be8 <HAL_RCC_OscConfig+0x28>
 8000bdc:	69ab      	ldr	r3, [r5, #24]
 8000bde:	b91b      	cbnz	r3, 8000be8 <HAL_RCC_OscConfig+0x28>
        return HAL_ERROR;
 8000be0:	2001      	movs	r0, #1
}
 8000be2:	b002      	add	sp, #8
 8000be4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000be8:	6823      	ldr	r3, [r4, #0]
 8000bea:	6a28      	ldr	r0, [r5, #32]
 8000bec:	071a      	lsls	r2, r3, #28
 8000bee:	bf56      	itet	pl
 8000bf0:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 8000bf4:	6823      	ldrmi	r3, [r4, #0]
 8000bf6:	091b      	lsrpl	r3, r3, #4
 8000bf8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000bfc:	4283      	cmp	r3, r0
 8000bfe:	d236      	bcs.n	8000c6e <HAL_RCC_OscConfig+0xae>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000c00:	f7ff ff34 	bl	8000a6c <RCC_SetFlashLatencyFromMSIRange>
 8000c04:	2800      	cmp	r0, #0
 8000c06:	d1eb      	bne.n	8000be0 <HAL_RCC_OscConfig+0x20>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000c08:	6823      	ldr	r3, [r4, #0]
 8000c0a:	f043 0308 	orr.w	r3, r3, #8
 8000c0e:	6023      	str	r3, [r4, #0]
 8000c10:	6823      	ldr	r3, [r4, #0]
 8000c12:	6a2a      	ldr	r2, [r5, #32]
 8000c14:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000c18:	4313      	orrs	r3, r2
 8000c1a:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000c1c:	6863      	ldr	r3, [r4, #4]
 8000c1e:	69ea      	ldr	r2, [r5, #28]
 8000c20:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000c24:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000c28:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000c2a:	f7ff ff61 	bl	8000af0 <HAL_RCC_GetSysClockFreq>
 8000c2e:	68a3      	ldr	r3, [r4, #8]
 8000c30:	4a91      	ldr	r2, [pc, #580]	; (8000e78 <HAL_RCC_OscConfig+0x2b8>)
 8000c32:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000c36:	5cd3      	ldrb	r3, [r2, r3]
 8000c38:	40d8      	lsrs	r0, r3
 8000c3a:	4b90      	ldr	r3, [pc, #576]	; (8000e7c <HAL_RCC_OscConfig+0x2bc>)
 8000c3c:	6018      	str	r0, [r3, #0]
        HAL_InitTick (TICK_INT_PRIORITY);
 8000c3e:	2000      	movs	r0, #0
 8000c40:	f7ff fca6 	bl	8000590 <HAL_InitTick>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c44:	682b      	ldr	r3, [r5, #0]
 8000c46:	07de      	lsls	r6, r3, #31
 8000c48:	d45b      	bmi.n	8000d02 <HAL_RCC_OscConfig+0x142>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c4a:	682b      	ldr	r3, [r5, #0]
 8000c4c:	079c      	lsls	r4, r3, #30
 8000c4e:	f100 80a3 	bmi.w	8000d98 <HAL_RCC_OscConfig+0x1d8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000c52:	682b      	ldr	r3, [r5, #0]
 8000c54:	0719      	lsls	r1, r3, #28
 8000c56:	f100 80e1 	bmi.w	8000e1c <HAL_RCC_OscConfig+0x25c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000c5a:	682b      	ldr	r3, [r5, #0]
 8000c5c:	075a      	lsls	r2, r3, #29
 8000c5e:	f100 810f 	bmi.w	8000e80 <HAL_RCC_OscConfig+0x2c0>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8000c62:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8000c64:	2a00      	cmp	r2, #0
 8000c66:	f040 8176 	bne.w	8000f56 <HAL_RCC_OscConfig+0x396>
  return HAL_OK;
 8000c6a:	2000      	movs	r0, #0
 8000c6c:	e7b9      	b.n	8000be2 <HAL_RCC_OscConfig+0x22>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000c6e:	6823      	ldr	r3, [r4, #0]
 8000c70:	f043 0308 	orr.w	r3, r3, #8
 8000c74:	6023      	str	r3, [r4, #0]
 8000c76:	6823      	ldr	r3, [r4, #0]
 8000c78:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000c7c:	4303      	orrs	r3, r0
 8000c7e:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000c80:	6863      	ldr	r3, [r4, #4]
 8000c82:	69ea      	ldr	r2, [r5, #28]
 8000c84:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000c88:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000c8c:	6063      	str	r3, [r4, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000c8e:	f7ff feed 	bl	8000a6c <RCC_SetFlashLatencyFromMSIRange>
 8000c92:	2800      	cmp	r0, #0
 8000c94:	d0c9      	beq.n	8000c2a <HAL_RCC_OscConfig+0x6a>
 8000c96:	e7a3      	b.n	8000be0 <HAL_RCC_OscConfig+0x20>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000c98:	69ab      	ldr	r3, [r5, #24]
 8000c9a:	b313      	cbz	r3, 8000ce2 <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_MSI_ENABLE();
 8000c9c:	6823      	ldr	r3, [r4, #0]
 8000c9e:	f043 0301 	orr.w	r3, r3, #1
 8000ca2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000ca4:	f7ff fca2 	bl	80005ec <HAL_GetTick>
 8000ca8:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8000caa:	6823      	ldr	r3, [r4, #0]
 8000cac:	079b      	lsls	r3, r3, #30
 8000cae:	d511      	bpl.n	8000cd4 <HAL_RCC_OscConfig+0x114>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000cb0:	6823      	ldr	r3, [r4, #0]
 8000cb2:	f043 0308 	orr.w	r3, r3, #8
 8000cb6:	6023      	str	r3, [r4, #0]
 8000cb8:	6823      	ldr	r3, [r4, #0]
 8000cba:	6a2a      	ldr	r2, [r5, #32]
 8000cbc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000cc4:	6863      	ldr	r3, [r4, #4]
 8000cc6:	69ea      	ldr	r2, [r5, #28]
 8000cc8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000ccc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000cd0:	6063      	str	r3, [r4, #4]
 8000cd2:	e7b7      	b.n	8000c44 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000cd4:	f7ff fc8a 	bl	80005ec <HAL_GetTick>
 8000cd8:	1b80      	subs	r0, r0, r6
 8000cda:	2802      	cmp	r0, #2
 8000cdc:	d9e5      	bls.n	8000caa <HAL_RCC_OscConfig+0xea>
            return HAL_TIMEOUT;
 8000cde:	2003      	movs	r0, #3
 8000ce0:	e77f      	b.n	8000be2 <HAL_RCC_OscConfig+0x22>
        __HAL_RCC_MSI_DISABLE();
 8000ce2:	6823      	ldr	r3, [r4, #0]
 8000ce4:	f023 0301 	bic.w	r3, r3, #1
 8000ce8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000cea:	f7ff fc7f 	bl	80005ec <HAL_GetTick>
 8000cee:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET)
 8000cf0:	6823      	ldr	r3, [r4, #0]
 8000cf2:	079f      	lsls	r7, r3, #30
 8000cf4:	d5a6      	bpl.n	8000c44 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000cf6:	f7ff fc79 	bl	80005ec <HAL_GetTick>
 8000cfa:	1b80      	subs	r0, r0, r6
 8000cfc:	2802      	cmp	r0, #2
 8000cfe:	d9f7      	bls.n	8000cf0 <HAL_RCC_OscConfig+0x130>
 8000d00:	e7ed      	b.n	8000cde <HAL_RCC_OscConfig+0x11e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||
 8000d02:	4c5c      	ldr	r4, [pc, #368]	; (8000e74 <HAL_RCC_OscConfig+0x2b4>)
 8000d04:	68a3      	ldr	r3, [r4, #8]
 8000d06:	f003 030c 	and.w	r3, r3, #12
 8000d0a:	2b08      	cmp	r3, #8
 8000d0c:	d009      	beq.n	8000d22 <HAL_RCC_OscConfig+0x162>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d0e:	68a3      	ldr	r3, [r4, #8]
 8000d10:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||
 8000d14:	2b0c      	cmp	r3, #12
 8000d16:	d10b      	bne.n	8000d30 <HAL_RCC_OscConfig+0x170>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d18:	68e3      	ldr	r3, [r4, #12]
 8000d1a:	f003 0303 	and.w	r3, r3, #3
 8000d1e:	2b03      	cmp	r3, #3
 8000d20:	d106      	bne.n	8000d30 <HAL_RCC_OscConfig+0x170>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d22:	6823      	ldr	r3, [r4, #0]
 8000d24:	0398      	lsls	r0, r3, #14
 8000d26:	d590      	bpl.n	8000c4a <HAL_RCC_OscConfig+0x8a>
 8000d28:	686b      	ldr	r3, [r5, #4]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d18d      	bne.n	8000c4a <HAL_RCC_OscConfig+0x8a>
 8000d2e:	e757      	b.n	8000be0 <HAL_RCC_OscConfig+0x20>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d30:	686b      	ldr	r3, [r5, #4]
 8000d32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d36:	d110      	bne.n	8000d5a <HAL_RCC_OscConfig+0x19a>
 8000d38:	6823      	ldr	r3, [r4, #0]
 8000d3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d3e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000d40:	f7ff fc54 	bl	80005ec <HAL_GetTick>
 8000d44:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8000d46:	6823      	ldr	r3, [r4, #0]
 8000d48:	0399      	lsls	r1, r3, #14
 8000d4a:	f53f af7e 	bmi.w	8000c4a <HAL_RCC_OscConfig+0x8a>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d4e:	f7ff fc4d 	bl	80005ec <HAL_GetTick>
 8000d52:	1b80      	subs	r0, r0, r6
 8000d54:	2864      	cmp	r0, #100	; 0x64
 8000d56:	d9f6      	bls.n	8000d46 <HAL_RCC_OscConfig+0x186>
 8000d58:	e7c1      	b.n	8000cde <HAL_RCC_OscConfig+0x11e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d5a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d5e:	d104      	bne.n	8000d6a <HAL_RCC_OscConfig+0x1aa>
 8000d60:	6823      	ldr	r3, [r4, #0]
 8000d62:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d66:	6023      	str	r3, [r4, #0]
 8000d68:	e7e6      	b.n	8000d38 <HAL_RCC_OscConfig+0x178>
 8000d6a:	6822      	ldr	r2, [r4, #0]
 8000d6c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000d70:	6022      	str	r2, [r4, #0]
 8000d72:	6822      	ldr	r2, [r4, #0]
 8000d74:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000d78:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d1e0      	bne.n	8000d40 <HAL_RCC_OscConfig+0x180>
        tickstart = HAL_GetTick();
 8000d7e:	f7ff fc35 	bl	80005ec <HAL_GetTick>
 8000d82:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8000d84:	6823      	ldr	r3, [r4, #0]
 8000d86:	039a      	lsls	r2, r3, #14
 8000d88:	f57f af5f 	bpl.w	8000c4a <HAL_RCC_OscConfig+0x8a>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d8c:	f7ff fc2e 	bl	80005ec <HAL_GetTick>
 8000d90:	1b80      	subs	r0, r0, r6
 8000d92:	2864      	cmp	r0, #100	; 0x64
 8000d94:	d9f6      	bls.n	8000d84 <HAL_RCC_OscConfig+0x1c4>
 8000d96:	e7a2      	b.n	8000cde <HAL_RCC_OscConfig+0x11e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 8000d98:	4c36      	ldr	r4, [pc, #216]	; (8000e74 <HAL_RCC_OscConfig+0x2b4>)
 8000d9a:	68a3      	ldr	r3, [r4, #8]
 8000d9c:	f003 030c 	and.w	r3, r3, #12
 8000da0:	2b04      	cmp	r3, #4
 8000da2:	d009      	beq.n	8000db8 <HAL_RCC_OscConfig+0x1f8>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000da4:	68a3      	ldr	r3, [r4, #8]
 8000da6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 8000daa:	2b0c      	cmp	r3, #12
 8000dac:	d113      	bne.n	8000dd6 <HAL_RCC_OscConfig+0x216>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000dae:	68e3      	ldr	r3, [r4, #12]
 8000db0:	f003 0303 	and.w	r3, r3, #3
 8000db4:	2b02      	cmp	r3, #2
 8000db6:	d10e      	bne.n	8000dd6 <HAL_RCC_OscConfig+0x216>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000db8:	6823      	ldr	r3, [r4, #0]
 8000dba:	055b      	lsls	r3, r3, #21
 8000dbc:	d503      	bpl.n	8000dc6 <HAL_RCC_OscConfig+0x206>
 8000dbe:	68eb      	ldr	r3, [r5, #12]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	f43f af0d 	beq.w	8000be0 <HAL_RCC_OscConfig+0x20>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dc6:	6863      	ldr	r3, [r4, #4]
 8000dc8:	692a      	ldr	r2, [r5, #16]
 8000dca:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8000dce:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000dd2:	6063      	str	r3, [r4, #4]
 8000dd4:	e73d      	b.n	8000c52 <HAL_RCC_OscConfig+0x92>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000dd6:	68eb      	ldr	r3, [r5, #12]
 8000dd8:	b17b      	cbz	r3, 8000dfa <HAL_RCC_OscConfig+0x23a>
        __HAL_RCC_HSI_ENABLE();
 8000dda:	6823      	ldr	r3, [r4, #0]
 8000ddc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000de0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000de2:	f7ff fc03 	bl	80005ec <HAL_GetTick>
 8000de6:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8000de8:	6823      	ldr	r3, [r4, #0]
 8000dea:	055f      	lsls	r7, r3, #21
 8000dec:	d4eb      	bmi.n	8000dc6 <HAL_RCC_OscConfig+0x206>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000dee:	f7ff fbfd 	bl	80005ec <HAL_GetTick>
 8000df2:	1b80      	subs	r0, r0, r6
 8000df4:	2802      	cmp	r0, #2
 8000df6:	d9f7      	bls.n	8000de8 <HAL_RCC_OscConfig+0x228>
 8000df8:	e771      	b.n	8000cde <HAL_RCC_OscConfig+0x11e>
        __HAL_RCC_HSI_DISABLE();
 8000dfa:	6823      	ldr	r3, [r4, #0]
 8000dfc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000e00:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000e02:	f7ff fbf3 	bl	80005ec <HAL_GetTick>
 8000e06:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET)
 8000e08:	6823      	ldr	r3, [r4, #0]
 8000e0a:	0558      	lsls	r0, r3, #21
 8000e0c:	f57f af21 	bpl.w	8000c52 <HAL_RCC_OscConfig+0x92>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e10:	f7ff fbec 	bl	80005ec <HAL_GetTick>
 8000e14:	1b80      	subs	r0, r0, r6
 8000e16:	2802      	cmp	r0, #2
 8000e18:	d9f6      	bls.n	8000e08 <HAL_RCC_OscConfig+0x248>
 8000e1a:	e760      	b.n	8000cde <HAL_RCC_OscConfig+0x11e>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e1c:	696b      	ldr	r3, [r5, #20]
 8000e1e:	4c15      	ldr	r4, [pc, #84]	; (8000e74 <HAL_RCC_OscConfig+0x2b4>)
 8000e20:	b19b      	cbz	r3, 8000e4a <HAL_RCC_OscConfig+0x28a>
      __HAL_RCC_LSI_ENABLE();
 8000e22:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8000e26:	f043 0301 	orr.w	r3, r3, #1
 8000e2a:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8000e2e:	f7ff fbdd 	bl	80005ec <HAL_GetTick>
 8000e32:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RESET)
 8000e34:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8000e38:	079b      	lsls	r3, r3, #30
 8000e3a:	f53f af0e 	bmi.w	8000c5a <HAL_RCC_OscConfig+0x9a>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e3e:	f7ff fbd5 	bl	80005ec <HAL_GetTick>
 8000e42:	1b80      	subs	r0, r0, r6
 8000e44:	2802      	cmp	r0, #2
 8000e46:	d9f5      	bls.n	8000e34 <HAL_RCC_OscConfig+0x274>
 8000e48:	e749      	b.n	8000cde <HAL_RCC_OscConfig+0x11e>
      __HAL_RCC_LSI_DISABLE();
 8000e4a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8000e4e:	f023 0301 	bic.w	r3, r3, #1
 8000e52:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8000e56:	f7ff fbc9 	bl	80005ec <HAL_GetTick>
 8000e5a:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != RESET)
 8000e5c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8000e60:	079f      	lsls	r7, r3, #30
 8000e62:	f57f aefa 	bpl.w	8000c5a <HAL_RCC_OscConfig+0x9a>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e66:	f7ff fbc1 	bl	80005ec <HAL_GetTick>
 8000e6a:	1b80      	subs	r0, r0, r6
 8000e6c:	2802      	cmp	r0, #2
 8000e6e:	d9f5      	bls.n	8000e5c <HAL_RCC_OscConfig+0x29c>
 8000e70:	e735      	b.n	8000cde <HAL_RCC_OscConfig+0x11e>
 8000e72:	bf00      	nop
 8000e74:	40021000 	.word	0x40021000
 8000e78:	08002e5e 	.word	0x08002e5e
 8000e7c:	20000000 	.word	0x20000000
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8000e80:	4c66      	ldr	r4, [pc, #408]	; (800101c <HAL_RCC_OscConfig+0x45c>)
 8000e82:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000e84:	00de      	lsls	r6, r3, #3
 8000e86:	d427      	bmi.n	8000ed8 <HAL_RCC_OscConfig+0x318>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e88:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000e8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e8e:	65a3      	str	r3, [r4, #88]	; 0x58
 8000e90:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000e92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e96:	9301      	str	r3, [sp, #4]
 8000e98:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000e9a:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000e9c:	4e60      	ldr	r6, [pc, #384]	; (8001020 <HAL_RCC_OscConfig+0x460>)
 8000e9e:	6833      	ldr	r3, [r6, #0]
 8000ea0:	05d8      	lsls	r0, r3, #23
 8000ea2:	d51b      	bpl.n	8000edc <HAL_RCC_OscConfig+0x31c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ea4:	68ab      	ldr	r3, [r5, #8]
 8000ea6:	2b01      	cmp	r3, #1
 8000ea8:	d129      	bne.n	8000efe <HAL_RCC_OscConfig+0x33e>
 8000eaa:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8000eae:	f043 0301 	orr.w	r3, r3, #1
 8000eb2:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 8000eb6:	f7ff fb99 	bl	80005ec <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000eba:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000ebe:	4606      	mov	r6, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 8000ec0:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8000ec4:	079a      	lsls	r2, r3, #30
 8000ec6:	d540      	bpl.n	8000f4a <HAL_RCC_OscConfig+0x38a>
    if(pwrclkchanged == SET)
 8000ec8:	2f00      	cmp	r7, #0
 8000eca:	f43f aeca 	beq.w	8000c62 <HAL_RCC_OscConfig+0xa2>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ece:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000ed0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000ed4:	65a3      	str	r3, [r4, #88]	; 0x58
 8000ed6:	e6c4      	b.n	8000c62 <HAL_RCC_OscConfig+0xa2>
    FlagStatus       pwrclkchanged = RESET;
 8000ed8:	2700      	movs	r7, #0
 8000eda:	e7df      	b.n	8000e9c <HAL_RCC_OscConfig+0x2dc>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000edc:	6833      	ldr	r3, [r6, #0]
 8000ede:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ee2:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000ee4:	f7ff fb82 	bl	80005ec <HAL_GetTick>
 8000ee8:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000eea:	6833      	ldr	r3, [r6, #0]
 8000eec:	05d9      	lsls	r1, r3, #23
 8000eee:	d4d9      	bmi.n	8000ea4 <HAL_RCC_OscConfig+0x2e4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ef0:	f7ff fb7c 	bl	80005ec <HAL_GetTick>
 8000ef4:	eba0 0008 	sub.w	r0, r0, r8
 8000ef8:	2802      	cmp	r0, #2
 8000efa:	d9f6      	bls.n	8000eea <HAL_RCC_OscConfig+0x32a>
 8000efc:	e6ef      	b.n	8000cde <HAL_RCC_OscConfig+0x11e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000efe:	2b05      	cmp	r3, #5
 8000f00:	d106      	bne.n	8000f10 <HAL_RCC_OscConfig+0x350>
 8000f02:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8000f06:	f043 0304 	orr.w	r3, r3, #4
 8000f0a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8000f0e:	e7cc      	b.n	8000eaa <HAL_RCC_OscConfig+0x2ea>
 8000f10:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8000f14:	f022 0201 	bic.w	r2, r2, #1
 8000f18:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8000f1c:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8000f20:	f022 0204 	bic.w	r2, r2, #4
 8000f24:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d1c4      	bne.n	8000eb6 <HAL_RCC_OscConfig+0x2f6>
      tickstart = HAL_GetTick();
 8000f2c:	f7ff fb5e 	bl	80005ec <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f30:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000f34:	4606      	mov	r6, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
 8000f36:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8000f3a:	079b      	lsls	r3, r3, #30
 8000f3c:	d5c4      	bpl.n	8000ec8 <HAL_RCC_OscConfig+0x308>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f3e:	f7ff fb55 	bl	80005ec <HAL_GetTick>
 8000f42:	1b80      	subs	r0, r0, r6
 8000f44:	4540      	cmp	r0, r8
 8000f46:	d9f6      	bls.n	8000f36 <HAL_RCC_OscConfig+0x376>
 8000f48:	e6c9      	b.n	8000cde <HAL_RCC_OscConfig+0x11e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f4a:	f7ff fb4f 	bl	80005ec <HAL_GetTick>
 8000f4e:	1b80      	subs	r0, r0, r6
 8000f50:	4540      	cmp	r0, r8
 8000f52:	d9b5      	bls.n	8000ec0 <HAL_RCC_OscConfig+0x300>
 8000f54:	e6c3      	b.n	8000cde <HAL_RCC_OscConfig+0x11e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000f56:	4c31      	ldr	r4, [pc, #196]	; (800101c <HAL_RCC_OscConfig+0x45c>)
 8000f58:	68a3      	ldr	r3, [r4, #8]
 8000f5a:	f003 030c 	and.w	r3, r3, #12
 8000f5e:	2b0c      	cmp	r3, #12
 8000f60:	f43f ae3e 	beq.w	8000be0 <HAL_RCC_OscConfig+0x20>
        __HAL_RCC_PLL_DISABLE();
 8000f64:	6823      	ldr	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8000f66:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000f68:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000f6c:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8000f6e:	d137      	bne.n	8000fe0 <HAL_RCC_OscConfig+0x420>
        tickstart = HAL_GetTick();
 8000f70:	f7ff fb3c 	bl	80005ec <HAL_GetTick>
 8000f74:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8000f76:	6823      	ldr	r3, [r4, #0]
 8000f78:	019f      	lsls	r7, r3, #6
 8000f7a:	d42b      	bmi.n	8000fd4 <HAL_RCC_OscConfig+0x414>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f7c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8000f7e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8000f80:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000f84:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8000f86:	3a01      	subs	r2, #1
 8000f88:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8000f8c:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8000f8e:	0912      	lsrs	r2, r2, #4
 8000f90:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8000f94:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8000f96:	0852      	lsrs	r2, r2, #1
 8000f98:	3a01      	subs	r2, #1
 8000f9a:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8000f9e:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8000fa0:	0852      	lsrs	r2, r2, #1
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8000fa8:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8000faa:	6823      	ldr	r3, [r4, #0]
 8000fac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000fb0:	6023      	str	r3, [r4, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8000fb2:	68e3      	ldr	r3, [r4, #12]
 8000fb4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000fb8:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8000fba:	f7ff fb17 	bl	80005ec <HAL_GetTick>
 8000fbe:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8000fc0:	6823      	ldr	r3, [r4, #0]
 8000fc2:	0198      	lsls	r0, r3, #6
 8000fc4:	f53f ae51 	bmi.w	8000c6a <HAL_RCC_OscConfig+0xaa>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fc8:	f7ff fb10 	bl	80005ec <HAL_GetTick>
 8000fcc:	1b40      	subs	r0, r0, r5
 8000fce:	2802      	cmp	r0, #2
 8000fd0:	d9f6      	bls.n	8000fc0 <HAL_RCC_OscConfig+0x400>
 8000fd2:	e684      	b.n	8000cde <HAL_RCC_OscConfig+0x11e>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fd4:	f7ff fb0a 	bl	80005ec <HAL_GetTick>
 8000fd8:	1b80      	subs	r0, r0, r6
 8000fda:	2802      	cmp	r0, #2
 8000fdc:	d9cb      	bls.n	8000f76 <HAL_RCC_OscConfig+0x3b6>
 8000fde:	e67e      	b.n	8000cde <HAL_RCC_OscConfig+0x11e>
        if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 8000fe0:	6823      	ldr	r3, [r4, #0]
 8000fe2:	0119      	lsls	r1, r3, #4
 8000fe4:	d406      	bmi.n	8000ff4 <HAL_RCC_OscConfig+0x434>
           (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RESET)
 8000fe6:	6823      	ldr	r3, [r4, #0]
           &&
 8000fe8:	009a      	lsls	r2, r3, #2
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8000fea:	bf5e      	ittt	pl
 8000fec:	68e3      	ldrpl	r3, [r4, #12]
 8000fee:	f023 0303 	bicpl.w	r3, r3, #3
 8000ff2:	60e3      	strpl	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8000ff4:	68e3      	ldr	r3, [r4, #12]
 8000ff6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8000ffa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ffe:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8001000:	f7ff faf4 	bl	80005ec <HAL_GetTick>
 8001004:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8001006:	6823      	ldr	r3, [r4, #0]
 8001008:	019b      	lsls	r3, r3, #6
 800100a:	f57f ae2e 	bpl.w	8000c6a <HAL_RCC_OscConfig+0xaa>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800100e:	f7ff faed 	bl	80005ec <HAL_GetTick>
 8001012:	1b40      	subs	r0, r0, r5
 8001014:	2802      	cmp	r0, #2
 8001016:	d9f6      	bls.n	8001006 <HAL_RCC_OscConfig+0x446>
 8001018:	e661      	b.n	8000cde <HAL_RCC_OscConfig+0x11e>
 800101a:	bf00      	nop
 800101c:	40021000 	.word	0x40021000
 8001020:	40007000 	.word	0x40007000

08001024 <HAL_RCC_ClockConfig>:
  if(FLatency > READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY))
 8001024:	4a56      	ldr	r2, [pc, #344]	; (8001180 <HAL_RCC_ClockConfig+0x15c>)
 8001026:	6813      	ldr	r3, [r2, #0]
 8001028:	f003 0307 	and.w	r3, r3, #7
 800102c:	428b      	cmp	r3, r1
{
 800102e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001032:	4605      	mov	r5, r0
 8001034:	460e      	mov	r6, r1
  if(FLatency > READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY))
 8001036:	d32b      	bcc.n	8001090 <HAL_RCC_ClockConfig+0x6c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001038:	682b      	ldr	r3, [r5, #0]
 800103a:	07d9      	lsls	r1, r3, #31
 800103c:	d435      	bmi.n	80010aa <HAL_RCC_ClockConfig+0x86>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800103e:	6829      	ldr	r1, [r5, #0]
 8001040:	078a      	lsls	r2, r1, #30
 8001042:	f100 8083 	bmi.w	800114c <HAL_RCC_ClockConfig+0x128>
  if(FLatency < READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY))
 8001046:	4a4e      	ldr	r2, [pc, #312]	; (8001180 <HAL_RCC_ClockConfig+0x15c>)
 8001048:	6813      	ldr	r3, [r2, #0]
 800104a:	f003 0307 	and.w	r3, r3, #7
 800104e:	429e      	cmp	r6, r3
 8001050:	f0c0 8084 	bcc.w	800115c <HAL_RCC_ClockConfig+0x138>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001054:	f011 0f04 	tst.w	r1, #4
 8001058:	4c4a      	ldr	r4, [pc, #296]	; (8001184 <HAL_RCC_ClockConfig+0x160>)
 800105a:	f040 808a 	bne.w	8001172 <HAL_RCC_ClockConfig+0x14e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800105e:	070b      	lsls	r3, r1, #28
 8001060:	d506      	bpl.n	8001070 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001062:	68a3      	ldr	r3, [r4, #8]
 8001064:	692a      	ldr	r2, [r5, #16]
 8001066:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800106a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800106e:	60a3      	str	r3, [r4, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001070:	f7ff fd3e 	bl	8000af0 <HAL_RCC_GetSysClockFreq>
 8001074:	68a3      	ldr	r3, [r4, #8]
 8001076:	4a44      	ldr	r2, [pc, #272]	; (8001188 <HAL_RCC_ClockConfig+0x164>)
 8001078:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800107c:	5cd3      	ldrb	r3, [r2, r3]
 800107e:	40d8      	lsrs	r0, r3
 8001080:	4b42      	ldr	r3, [pc, #264]	; (800118c <HAL_RCC_ClockConfig+0x168>)
 8001082:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001084:	2000      	movs	r0, #0
 8001086:	f7ff fa83 	bl	8000590 <HAL_InitTick>
  return HAL_OK;
 800108a:	2000      	movs	r0, #0
}
 800108c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001090:	6813      	ldr	r3, [r2, #0]
 8001092:	f023 0307 	bic.w	r3, r3, #7
 8001096:	430b      	orrs	r3, r1
 8001098:	6013      	str	r3, [r2, #0]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY) != FLatency)
 800109a:	6813      	ldr	r3, [r2, #0]
 800109c:	f003 0307 	and.w	r3, r3, #7
 80010a0:	4299      	cmp	r1, r3
 80010a2:	d0c9      	beq.n	8001038 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 80010a4:	2001      	movs	r0, #1
 80010a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80010aa:	686a      	ldr	r2, [r5, #4]
 80010ac:	4c35      	ldr	r4, [pc, #212]	; (8001184 <HAL_RCC_ClockConfig+0x160>)
 80010ae:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 80010b0:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80010b2:	d11c      	bne.n	80010ee <HAL_RCC_ClockConfig+0xca>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 80010b4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80010b8:	d0f4      	beq.n	80010a4 <HAL_RCC_ClockConfig+0x80>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80010ba:	68a3      	ldr	r3, [r4, #8]
 80010bc:	f023 0303 	bic.w	r3, r3, #3
 80010c0:	4313      	orrs	r3, r2
 80010c2:	60a3      	str	r3, [r4, #8]
    tickstart = HAL_GetTick();
 80010c4:	f7ff fa92 	bl	80005ec <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80010c8:	686b      	ldr	r3, [r5, #4]
 80010ca:	2b03      	cmp	r3, #3
    tickstart = HAL_GetTick();
 80010cc:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010ce:	f241 3888 	movw	r8, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80010d2:	d118      	bne.n	8001106 <HAL_RCC_ClockConfig+0xe2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80010d4:	68a3      	ldr	r3, [r4, #8]
 80010d6:	f003 030c 	and.w	r3, r3, #12
 80010da:	2b0c      	cmp	r3, #12
 80010dc:	d0af      	beq.n	800103e <HAL_RCC_ClockConfig+0x1a>
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010de:	f7ff fa85 	bl	80005ec <HAL_GetTick>
 80010e2:	1bc0      	subs	r0, r0, r7
 80010e4:	4540      	cmp	r0, r8
 80010e6:	d9f5      	bls.n	80010d4 <HAL_RCC_ClockConfig+0xb0>
          return HAL_TIMEOUT;
 80010e8:	2003      	movs	r0, #3
 80010ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010ee:	2a02      	cmp	r2, #2
 80010f0:	d102      	bne.n	80010f8 <HAL_RCC_ClockConfig+0xd4>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 80010f2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80010f6:	e7df      	b.n	80010b8 <HAL_RCC_ClockConfig+0x94>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80010f8:	b912      	cbnz	r2, 8001100 <HAL_RCC_ClockConfig+0xdc>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 80010fa:	f013 0f02 	tst.w	r3, #2
 80010fe:	e7db      	b.n	80010b8 <HAL_RCC_ClockConfig+0x94>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8001100:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001104:	e7d8      	b.n	80010b8 <HAL_RCC_ClockConfig+0x94>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001106:	2b02      	cmp	r3, #2
 8001108:	d10a      	bne.n	8001120 <HAL_RCC_ClockConfig+0xfc>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 800110a:	68a3      	ldr	r3, [r4, #8]
 800110c:	f003 030c 	and.w	r3, r3, #12
 8001110:	2b08      	cmp	r3, #8
 8001112:	d094      	beq.n	800103e <HAL_RCC_ClockConfig+0x1a>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001114:	f7ff fa6a 	bl	80005ec <HAL_GetTick>
 8001118:	1bc0      	subs	r0, r0, r7
 800111a:	4540      	cmp	r0, r8
 800111c:	d9f5      	bls.n	800110a <HAL_RCC_ClockConfig+0xe6>
 800111e:	e7e3      	b.n	80010e8 <HAL_RCC_ClockConfig+0xc4>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001120:	b973      	cbnz	r3, 8001140 <HAL_RCC_ClockConfig+0x11c>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_MSI)
 8001122:	68a3      	ldr	r3, [r4, #8]
 8001124:	f013 0f0c 	tst.w	r3, #12
 8001128:	d089      	beq.n	800103e <HAL_RCC_ClockConfig+0x1a>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800112a:	f7ff fa5f 	bl	80005ec <HAL_GetTick>
 800112e:	1bc0      	subs	r0, r0, r7
 8001130:	4540      	cmp	r0, r8
 8001132:	d9f6      	bls.n	8001122 <HAL_RCC_ClockConfig+0xfe>
 8001134:	e7d8      	b.n	80010e8 <HAL_RCC_ClockConfig+0xc4>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001136:	f7ff fa59 	bl	80005ec <HAL_GetTick>
 800113a:	1bc0      	subs	r0, r0, r7
 800113c:	4540      	cmp	r0, r8
 800113e:	d8d3      	bhi.n	80010e8 <HAL_RCC_ClockConfig+0xc4>
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
 8001140:	68a3      	ldr	r3, [r4, #8]
 8001142:	f003 030c 	and.w	r3, r3, #12
 8001146:	2b04      	cmp	r3, #4
 8001148:	d1f5      	bne.n	8001136 <HAL_RCC_ClockConfig+0x112>
 800114a:	e778      	b.n	800103e <HAL_RCC_ClockConfig+0x1a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800114c:	4a0d      	ldr	r2, [pc, #52]	; (8001184 <HAL_RCC_ClockConfig+0x160>)
 800114e:	68a8      	ldr	r0, [r5, #8]
 8001150:	6893      	ldr	r3, [r2, #8]
 8001152:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001156:	4303      	orrs	r3, r0
 8001158:	6093      	str	r3, [r2, #8]
 800115a:	e774      	b.n	8001046 <HAL_RCC_ClockConfig+0x22>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800115c:	6813      	ldr	r3, [r2, #0]
 800115e:	f023 0307 	bic.w	r3, r3, #7
 8001162:	4333      	orrs	r3, r6
 8001164:	6013      	str	r3, [r2, #0]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY) != FLatency)
 8001166:	6813      	ldr	r3, [r2, #0]
 8001168:	f003 0307 	and.w	r3, r3, #7
 800116c:	429e      	cmp	r6, r3
 800116e:	d199      	bne.n	80010a4 <HAL_RCC_ClockConfig+0x80>
 8001170:	e770      	b.n	8001054 <HAL_RCC_ClockConfig+0x30>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001172:	68a3      	ldr	r3, [r4, #8]
 8001174:	68ea      	ldr	r2, [r5, #12]
 8001176:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800117a:	4313      	orrs	r3, r2
 800117c:	60a3      	str	r3, [r4, #8]
 800117e:	e76e      	b.n	800105e <HAL_RCC_ClockConfig+0x3a>
 8001180:	40022000 	.word	0x40022000
 8001184:	40021000 	.word	0x40021000
 8001188:	08002e5e 	.word	0x08002e5e
 800118c:	20000000 	.word	0x20000000

08001190 <HAL_RCC_GetHCLKFreq>:
}
 8001190:	4b01      	ldr	r3, [pc, #4]	; (8001198 <HAL_RCC_GetHCLKFreq+0x8>)
 8001192:	6818      	ldr	r0, [r3, #0]
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	20000000 	.word	0x20000000

0800119c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800119c:	4b04      	ldr	r3, [pc, #16]	; (80011b0 <HAL_RCC_GetPCLK1Freq+0x14>)
 800119e:	4a05      	ldr	r2, [pc, #20]	; (80011b4 <HAL_RCC_GetPCLK1Freq+0x18>)
 80011a0:	689b      	ldr	r3, [r3, #8]
 80011a2:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80011a6:	5cd3      	ldrb	r3, [r2, r3]
 80011a8:	4a03      	ldr	r2, [pc, #12]	; (80011b8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80011aa:	6810      	ldr	r0, [r2, #0]
}
 80011ac:	40d8      	lsrs	r0, r3
 80011ae:	4770      	bx	lr
 80011b0:	40021000 	.word	0x40021000
 80011b4:	08002e6e 	.word	0x08002e6e
 80011b8:	20000000 	.word	0x20000000

080011bc <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80011bc:	4b04      	ldr	r3, [pc, #16]	; (80011d0 <HAL_RCC_GetPCLK2Freq+0x14>)
 80011be:	4a05      	ldr	r2, [pc, #20]	; (80011d4 <HAL_RCC_GetPCLK2Freq+0x18>)
 80011c0:	689b      	ldr	r3, [r3, #8]
 80011c2:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80011c6:	5cd3      	ldrb	r3, [r2, r3]
 80011c8:	4a03      	ldr	r2, [pc, #12]	; (80011d8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80011ca:	6810      	ldr	r0, [r2, #0]
}
 80011cc:	40d8      	lsrs	r0, r3
 80011ce:	4770      	bx	lr
 80011d0:	40021000 	.word	0x40021000
 80011d4:	08002e6e 	.word	0x08002e6e
 80011d8:	20000000 	.word	0x20000000

080011dc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80011dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80011de:	4b45      	ldr	r3, [pc, #276]	; (80012f4 <RCCEx_PLLSAI1_Config+0x118>)
 80011e0:	68da      	ldr	r2, [r3, #12]
 80011e2:	f012 0f03 	tst.w	r2, #3
{
 80011e6:	4605      	mov	r5, r0
 80011e8:	460e      	mov	r6, r1
 80011ea:	461c      	mov	r4, r3
 80011ec:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80011ee:	d02a      	beq.n	8001246 <RCCEx_PLLSAI1_Config+0x6a>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80011f0:	68da      	ldr	r2, [r3, #12]
 80011f2:	f002 0203 	and.w	r2, r2, #3
 80011f6:	4282      	cmp	r2, r0
 80011f8:	d13c      	bne.n	8001274 <RCCEx_PLLSAI1_Config+0x98>
       ||
 80011fa:	2a00      	cmp	r2, #0
 80011fc:	d03a      	beq.n	8001274 <RCCEx_PLLSAI1_Config+0x98>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80011fe:	68db      	ldr	r3, [r3, #12]
       ||
 8001200:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8001202:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8001206:	3301      	adds	r3, #1
       ||
 8001208:	4293      	cmp	r3, r2
 800120a:	d133      	bne.n	8001274 <RCCEx_PLLSAI1_Config+0x98>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800120c:	6823      	ldr	r3, [r4, #0]
 800120e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001212:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001214:	f7ff f9ea 	bl	80005ec <HAL_GetTick>
 8001218:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != RESET)
 800121a:	6823      	ldr	r3, [r4, #0]
 800121c:	011a      	lsls	r2, r3, #4
 800121e:	d432      	bmi.n	8001286 <RCCEx_PLLSAI1_Config+0xaa>
 8001220:	68af      	ldr	r7, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 8001222:	2e00      	cmp	r6, #0
 8001224:	d036      	beq.n	8001294 <RCCEx_PLLSAI1_Config+0xb8>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8001226:	2e01      	cmp	r6, #1
 8001228:	d150      	bne.n	80012cc <RCCEx_PLLSAI1_Config+0xf0>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800122a:	6922      	ldr	r2, [r4, #16]
 800122c:	6928      	ldr	r0, [r5, #16]
 800122e:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8001232:	0840      	lsrs	r0, r0, #1
 8001234:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8001238:	3801      	subs	r0, #1
 800123a:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 800123e:	ea42 5240 	orr.w	r2, r2, r0, lsl #21
 8001242:	6122      	str	r2, [r4, #16]
 8001244:	e032      	b.n	80012ac <RCCEx_PLLSAI1_Config+0xd0>
    switch(PllSai1->PLLSAI1Source)
 8001246:	2802      	cmp	r0, #2
 8001248:	d010      	beq.n	800126c <RCCEx_PLLSAI1_Config+0x90>
 800124a:	2803      	cmp	r0, #3
 800124c:	d014      	beq.n	8001278 <RCCEx_PLLSAI1_Config+0x9c>
 800124e:	2801      	cmp	r0, #1
 8001250:	d110      	bne.n	8001274 <RCCEx_PLLSAI1_Config+0x98>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	079f      	lsls	r7, r3, #30
 8001256:	d538      	bpl.n	80012ca <RCCEx_PLLSAI1_Config+0xee>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8001258:	68e3      	ldr	r3, [r4, #12]
 800125a:	686a      	ldr	r2, [r5, #4]
 800125c:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 8001260:	3a01      	subs	r2, #1
 8001262:	4318      	orrs	r0, r3
 8001264:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8001268:	60e0      	str	r0, [r4, #12]
 800126a:	e7cf      	b.n	800120c <RCCEx_PLLSAI1_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f413 6f80 	tst.w	r3, #1024	; 0x400
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY) && HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001272:	d1f1      	bne.n	8001258 <RCCEx_PLLSAI1_Config+0x7c>
 8001274:	2001      	movs	r0, #1
 8001276:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001278:	681a      	ldr	r2, [r3, #0]
 800127a:	0391      	lsls	r1, r2, #14
 800127c:	d4ec      	bmi.n	8001258 <RCCEx_PLLSAI1_Config+0x7c>
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8001284:	e7f5      	b.n	8001272 <RCCEx_PLLSAI1_Config+0x96>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001286:	f7ff f9b1 	bl	80005ec <HAL_GetTick>
 800128a:	1bc0      	subs	r0, r0, r7
 800128c:	2802      	cmp	r0, #2
 800128e:	d9c4      	bls.n	800121a <RCCEx_PLLSAI1_Config+0x3e>
        status = HAL_TIMEOUT;
 8001290:	2003      	movs	r0, #3
 8001292:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001294:	6921      	ldr	r1, [r4, #16]
 8001296:	68eb      	ldr	r3, [r5, #12]
 8001298:	f421 311f 	bic.w	r1, r1, #162816	; 0x27c00
 800129c:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 80012a0:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 80012a4:	091b      	lsrs	r3, r3, #4
 80012a6:	ea41 4143 	orr.w	r1, r1, r3, lsl #17
 80012aa:	6121      	str	r1, [r4, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80012ac:	6823      	ldr	r3, [r4, #0]
 80012ae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80012b2:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012b4:	f7ff f99a 	bl	80005ec <HAL_GetTick>
 80012b8:	4606      	mov	r6, r0

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 80012ba:	6823      	ldr	r3, [r4, #0]
 80012bc:	011b      	lsls	r3, r3, #4
 80012be:	d513      	bpl.n	80012e8 <RCCEx_PLLSAI1_Config+0x10c>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80012c0:	6923      	ldr	r3, [r4, #16]
 80012c2:	69aa      	ldr	r2, [r5, #24]
 80012c4:	4313      	orrs	r3, r2
 80012c6:	6123      	str	r3, [r4, #16]
 80012c8:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 80012ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80012cc:	6923      	ldr	r3, [r4, #16]
 80012ce:	6968      	ldr	r0, [r5, #20]
 80012d0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80012d4:	0840      	lsrs	r0, r0, #1
 80012d6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80012da:	3801      	subs	r0, #1
 80012dc:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 80012e0:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 80012e4:	6123      	str	r3, [r4, #16]
 80012e6:	e7e1      	b.n	80012ac <RCCEx_PLLSAI1_Config+0xd0>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80012e8:	f7ff f980 	bl	80005ec <HAL_GetTick>
 80012ec:	1b80      	subs	r0, r0, r6
 80012ee:	2802      	cmp	r0, #2
 80012f0:	d9e3      	bls.n	80012ba <RCCEx_PLLSAI1_Config+0xde>
 80012f2:	e7cd      	b.n	8001290 <RCCEx_PLLSAI1_Config+0xb4>
 80012f4:	40021000 	.word	0x40021000

080012f8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80012f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80012fa:	4b3d      	ldr	r3, [pc, #244]	; (80013f0 <RCCEx_PLLSAI2_Config+0xf8>)
 80012fc:	68da      	ldr	r2, [r3, #12]
 80012fe:	f012 0f03 	tst.w	r2, #3
{
 8001302:	4605      	mov	r5, r0
 8001304:	460e      	mov	r6, r1
 8001306:	461c      	mov	r4, r3
 8001308:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800130a:	d028      	beq.n	800135e <RCCEx_PLLSAI2_Config+0x66>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800130c:	68da      	ldr	r2, [r3, #12]
 800130e:	f002 0203 	and.w	r2, r2, #3
 8001312:	4282      	cmp	r2, r0
 8001314:	d13a      	bne.n	800138c <RCCEx_PLLSAI2_Config+0x94>
       ||
 8001316:	2a00      	cmp	r2, #0
 8001318:	d038      	beq.n	800138c <RCCEx_PLLSAI2_Config+0x94>
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800131a:	68db      	ldr	r3, [r3, #12]
       ||
 800131c:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800131e:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8001322:	3301      	adds	r3, #1
       ||
 8001324:	4293      	cmp	r3, r2
 8001326:	d131      	bne.n	800138c <RCCEx_PLLSAI2_Config+0x94>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8001328:	6823      	ldr	r3, [r4, #0]
 800132a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800132e:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001330:	f7ff f95c 	bl	80005ec <HAL_GetTick>
 8001334:	4607      	mov	r7, r0

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != RESET)
 8001336:	6823      	ldr	r3, [r4, #0]
 8001338:	009a      	lsls	r2, r3, #2
 800133a:	d430      	bmi.n	800139e <RCCEx_PLLSAI2_Config+0xa6>
 800133c:	68a8      	ldr	r0, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 800133e:	2e00      	cmp	r6, #0
 8001340:	d034      	beq.n	80013ac <RCCEx_PLLSAI2_Config+0xb4>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8001342:	6963      	ldr	r3, [r4, #20]
 8001344:	6929      	ldr	r1, [r5, #16]
 8001346:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800134a:	0849      	lsrs	r1, r1, #1
 800134c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001350:	3901      	subs	r1, #1
 8001352:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8001356:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 800135a:	6163      	str	r3, [r4, #20]
 800135c:	e032      	b.n	80013c4 <RCCEx_PLLSAI2_Config+0xcc>
    switch(PllSai2->PLLSAI2Source)
 800135e:	2802      	cmp	r0, #2
 8001360:	d010      	beq.n	8001384 <RCCEx_PLLSAI2_Config+0x8c>
 8001362:	2803      	cmp	r0, #3
 8001364:	d014      	beq.n	8001390 <RCCEx_PLLSAI2_Config+0x98>
 8001366:	2801      	cmp	r0, #1
 8001368:	d110      	bne.n	800138c <RCCEx_PLLSAI2_Config+0x94>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	079f      	lsls	r7, r3, #30
 800136e:	d538      	bpl.n	80013e2 <RCCEx_PLLSAI2_Config+0xea>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8001370:	68e3      	ldr	r3, [r4, #12]
 8001372:	686a      	ldr	r2, [r5, #4]
 8001374:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 8001378:	3a01      	subs	r2, #1
 800137a:	4318      	orrs	r0, r3
 800137c:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8001380:	60e0      	str	r0, [r4, #12]
 8001382:	e7d1      	b.n	8001328 <RCCEx_PLLSAI2_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f413 6f80 	tst.w	r3, #1024	; 0x400
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY) && HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800138a:	d1f1      	bne.n	8001370 <RCCEx_PLLSAI2_Config+0x78>
 800138c:	2001      	movs	r0, #1
 800138e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	0391      	lsls	r1, r2, #14
 8001394:	d4ec      	bmi.n	8001370 <RCCEx_PLLSAI2_Config+0x78>
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 800139c:	e7f5      	b.n	800138a <RCCEx_PLLSAI2_Config+0x92>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800139e:	f7ff f925 	bl	80005ec <HAL_GetTick>
 80013a2:	1bc0      	subs	r0, r0, r7
 80013a4:	2802      	cmp	r0, #2
 80013a6:	d9c6      	bls.n	8001336 <RCCEx_PLLSAI2_Config+0x3e>
        status = HAL_TIMEOUT;
 80013a8:	2003      	movs	r0, #3
 80013aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80013ac:	6962      	ldr	r2, [r4, #20]
 80013ae:	68eb      	ldr	r3, [r5, #12]
 80013b0:	f422 321f 	bic.w	r2, r2, #162816	; 0x27c00
 80013b4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80013b8:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80013bc:	091b      	lsrs	r3, r3, #4
 80013be:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
 80013c2:	6162      	str	r2, [r4, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80013c4:	6823      	ldr	r3, [r4, #0]
 80013c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013ca:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013cc:	f7ff f90e 	bl	80005ec <HAL_GetTick>
 80013d0:	4606      	mov	r6, r0

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RESET)
 80013d2:	6823      	ldr	r3, [r4, #0]
 80013d4:	009b      	lsls	r3, r3, #2
 80013d6:	d505      	bpl.n	80013e4 <RCCEx_PLLSAI2_Config+0xec>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80013d8:	6963      	ldr	r3, [r4, #20]
 80013da:	696a      	ldr	r2, [r5, #20]
 80013dc:	4313      	orrs	r3, r2
 80013de:	6163      	str	r3, [r4, #20]
 80013e0:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 80013e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80013e4:	f7ff f902 	bl	80005ec <HAL_GetTick>
 80013e8:	1b80      	subs	r0, r0, r6
 80013ea:	2802      	cmp	r0, #2
 80013ec:	d9f1      	bls.n	80013d2 <RCCEx_PLLSAI2_Config+0xda>
 80013ee:	e7db      	b.n	80013a8 <RCCEx_PLLSAI2_Config+0xb0>
 80013f0:	40021000 	.word	0x40021000

080013f4 <HAL_RCCEx_PeriphCLKConfig>:
{
 80013f4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80013f8:	6806      	ldr	r6, [r0, #0]
 80013fa:	f416 6600 	ands.w	r6, r6, #2048	; 0x800
{
 80013fe:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001400:	d024      	beq.n	800144c <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 8001402:	6e41      	ldr	r1, [r0, #100]	; 0x64
 8001404:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 8001408:	d02c      	beq.n	8001464 <HAL_RCCEx_PeriphCLKConfig+0x70>
 800140a:	d802      	bhi.n	8001412 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800140c:	b1c1      	cbz	r1, 8001440 <HAL_RCCEx_PeriphCLKConfig+0x4c>
      ret = HAL_ERROR;
 800140e:	2601      	movs	r6, #1
 8001410:	e01c      	b.n	800144c <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 8001412:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8001416:	d00d      	beq.n	8001434 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8001418:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 800141c:	d1f7      	bne.n	800140e <HAL_RCCEx_PeriphCLKConfig+0x1a>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800141e:	4a53      	ldr	r2, [pc, #332]	; (800156c <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8001420:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8001422:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001426:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800142a:	430b      	orrs	r3, r1
 800142c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001430:	2600      	movs	r6, #0
 8001432:	e00b      	b.n	800144c <HAL_RCCEx_PeriphCLKConfig+0x58>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001434:	4a4d      	ldr	r2, [pc, #308]	; (800156c <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8001436:	68d3      	ldr	r3, [r2, #12]
 8001438:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800143c:	60d3      	str	r3, [r2, #12]
      break;
 800143e:	e7ee      	b.n	800141e <HAL_RCCEx_PeriphCLKConfig+0x2a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001440:	3004      	adds	r0, #4
 8001442:	f7ff fecb 	bl	80011dc <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001446:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8001448:	2800      	cmp	r0, #0
 800144a:	d0e8      	beq.n	800141e <HAL_RCCEx_PeriphCLKConfig+0x2a>
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800144c:	6823      	ldr	r3, [r4, #0]
 800144e:	04d8      	lsls	r0, r3, #19
 8001450:	d506      	bpl.n	8001460 <HAL_RCCEx_PeriphCLKConfig+0x6c>
    switch(PeriphClkInit->Sai2ClockSelection)
 8001452:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8001454:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 8001458:	d07c      	beq.n	8001554 <HAL_RCCEx_PeriphCLKConfig+0x160>
 800145a:	d808      	bhi.n	800146e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800145c:	b1a9      	cbz	r1, 800148a <HAL_RCCEx_PeriphCLKConfig+0x96>
      ret = HAL_ERROR;
 800145e:	2601      	movs	r6, #1
 8001460:	4635      	mov	r5, r6
 8001462:	e021      	b.n	80014a8 <HAL_RCCEx_PeriphCLKConfig+0xb4>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001464:	2100      	movs	r1, #0
 8001466:	3020      	adds	r0, #32
 8001468:	f7ff ff46 	bl	80012f8 <RCCEx_PLLSAI2_Config>
 800146c:	e7eb      	b.n	8001446 <HAL_RCCEx_PeriphCLKConfig+0x52>
    switch(PeriphClkInit->Sai2ClockSelection)
 800146e:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 8001472:	d004      	beq.n	800147e <HAL_RCCEx_PeriphCLKConfig+0x8a>
 8001474:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 8001478:	d1f1      	bne.n	800145e <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800147a:	4635      	mov	r5, r6
 800147c:	e009      	b.n	8001492 <HAL_RCCEx_PeriphCLKConfig+0x9e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800147e:	4a3b      	ldr	r2, [pc, #236]	; (800156c <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8001480:	68d3      	ldr	r3, [r2, #12]
 8001482:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001486:	60d3      	str	r3, [r2, #12]
 8001488:	e7f7      	b.n	800147a <HAL_RCCEx_PeriphCLKConfig+0x86>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800148a:	1d20      	adds	r0, r4, #4
 800148c:	f7ff fea6 	bl	80011dc <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001490:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8001492:	2d00      	cmp	r5, #0
 8001494:	d164      	bne.n	8001560 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001496:	4a35      	ldr	r2, [pc, #212]	; (800156c <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8001498:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800149a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800149e:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80014a2:	430b      	orrs	r3, r1
 80014a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80014a8:	6823      	ldr	r3, [r4, #0]
 80014aa:	0399      	lsls	r1, r3, #14
 80014ac:	f140 815b 	bpl.w	8001766 <HAL_RCCEx_PeriphCLKConfig+0x372>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014b0:	4f2e      	ldr	r7, [pc, #184]	; (800156c <HAL_RCCEx_PeriphCLKConfig+0x178>)
 80014b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80014b4:	00da      	lsls	r2, r3, #3
 80014b6:	d455      	bmi.n	8001564 <HAL_RCCEx_PeriphCLKConfig+0x170>
      __HAL_RCC_PWR_CLK_ENABLE();
 80014b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80014ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014be:	65bb      	str	r3, [r7, #88]	; 0x58
 80014c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80014c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014c6:	9301      	str	r3, [sp, #4]
 80014c8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80014ca:	f04f 0801 	mov.w	r8, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80014ce:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 8001570 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80014d2:	f8d9 3000 	ldr.w	r3, [r9]
 80014d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014da:	f8c9 3000 	str.w	r3, [r9]
    tickstart = HAL_GetTick();
 80014de:	f7ff f885 	bl	80005ec <HAL_GetTick>
 80014e2:	4682      	mov	sl, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == RESET)
 80014e4:	f8d9 3000 	ldr.w	r3, [r9]
 80014e8:	05db      	lsls	r3, r3, #23
 80014ea:	d543      	bpl.n	8001574 <HAL_RCCEx_PeriphCLKConfig+0x180>
    if(ret == HAL_OK)
 80014ec:	2d00      	cmp	r5, #0
 80014ee:	d148      	bne.n	8001582 <HAL_RCCEx_PeriphCLKConfig+0x18e>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80014f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80014f4:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80014f8:	d015      	beq.n	8001526 <HAL_RCCEx_PeriphCLKConfig+0x132>
 80014fa:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 80014fe:	4293      	cmp	r3, r2
 8001500:	d011      	beq.n	8001526 <HAL_RCCEx_PeriphCLKConfig+0x132>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001502:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 8001506:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800150a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800150e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001512:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001516:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 800151a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800151e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8001522:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001526:	07d8      	lsls	r0, r3, #31
 8001528:	d509      	bpl.n	800153e <HAL_RCCEx_PeriphCLKConfig+0x14a>
        tickstart = HAL_GetTick();
 800152a:	f7ff f85f 	bl	80005ec <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800152e:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001532:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 8001534:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001538:	0799      	lsls	r1, r3, #30
 800153a:	f140 810d 	bpl.w	8001758 <HAL_RCCEx_PeriphCLKConfig+0x364>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800153e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001542:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8001546:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800154a:	4313      	orrs	r3, r2
 800154c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001550:	4635      	mov	r5, r6
 8001552:	e016      	b.n	8001582 <HAL_RCCEx_PeriphCLKConfig+0x18e>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001554:	2100      	movs	r1, #0
 8001556:	f104 0020 	add.w	r0, r4, #32
 800155a:	f7ff fecd 	bl	80012f8 <RCCEx_PLLSAI2_Config>
 800155e:	e797      	b.n	8001490 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 8001560:	462e      	mov	r6, r5
 8001562:	e7a1      	b.n	80014a8 <HAL_RCCEx_PeriphCLKConfig+0xb4>
    FlagStatus       pwrclkchanged = RESET;
 8001564:	f04f 0800 	mov.w	r8, #0
 8001568:	e7b1      	b.n	80014ce <HAL_RCCEx_PeriphCLKConfig+0xda>
 800156a:	bf00      	nop
 800156c:	40021000 	.word	0x40021000
 8001570:	40007000 	.word	0x40007000
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001574:	f7ff f83a 	bl	80005ec <HAL_GetTick>
 8001578:	eba0 000a 	sub.w	r0, r0, sl
 800157c:	2802      	cmp	r0, #2
 800157e:	d9b1      	bls.n	80014e4 <HAL_RCCEx_PeriphCLKConfig+0xf0>
        ret = HAL_TIMEOUT;
 8001580:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 8001582:	f1b8 0f00 	cmp.w	r8, #0
 8001586:	d003      	beq.n	8001590 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001588:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800158a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800158e:	65bb      	str	r3, [r7, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001590:	6823      	ldr	r3, [r4, #0]
 8001592:	07da      	lsls	r2, r3, #31
 8001594:	d508      	bpl.n	80015a8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001596:	498a      	ldr	r1, [pc, #552]	; (80017c0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001598:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800159a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800159e:	f022 0203 	bic.w	r2, r2, #3
 80015a2:	4302      	orrs	r2, r0
 80015a4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80015a8:	079f      	lsls	r7, r3, #30
 80015aa:	d508      	bpl.n	80015be <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80015ac:	4984      	ldr	r1, [pc, #528]	; (80017c0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80015ae:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80015b0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80015b4:	f022 020c 	bic.w	r2, r2, #12
 80015b8:	4302      	orrs	r2, r0
 80015ba:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80015be:	075e      	lsls	r6, r3, #29
 80015c0:	d508      	bpl.n	80015d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80015c2:	497f      	ldr	r1, [pc, #508]	; (80017c0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80015c4:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80015c6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80015ca:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80015ce:	4302      	orrs	r2, r0
 80015d0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80015d4:	0718      	lsls	r0, r3, #28
 80015d6:	d508      	bpl.n	80015ea <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80015d8:	4979      	ldr	r1, [pc, #484]	; (80017c0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80015da:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80015dc:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80015e0:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80015e4:	4302      	orrs	r2, r0
 80015e6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80015ea:	06d9      	lsls	r1, r3, #27
 80015ec:	d508      	bpl.n	8001600 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80015ee:	4974      	ldr	r1, [pc, #464]	; (80017c0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80015f0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80015f2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80015f6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80015fa:	4302      	orrs	r2, r0
 80015fc:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001600:	069a      	lsls	r2, r3, #26
 8001602:	d508      	bpl.n	8001616 <HAL_RCCEx_PeriphCLKConfig+0x222>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001604:	496e      	ldr	r1, [pc, #440]	; (80017c0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001606:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8001608:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800160c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001610:	4302      	orrs	r2, r0
 8001612:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001616:	059f      	lsls	r7, r3, #22
 8001618:	d508      	bpl.n	800162c <HAL_RCCEx_PeriphCLKConfig+0x238>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800161a:	4969      	ldr	r1, [pc, #420]	; (80017c0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800161c:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800161e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001622:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8001626:	4302      	orrs	r2, r0
 8001628:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800162c:	055e      	lsls	r6, r3, #21
 800162e:	d508      	bpl.n	8001642 <HAL_RCCEx_PeriphCLKConfig+0x24e>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001630:	4963      	ldr	r1, [pc, #396]	; (80017c0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001632:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8001634:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001638:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800163c:	4302      	orrs	r2, r0
 800163e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001642:	0658      	lsls	r0, r3, #25
 8001644:	d508      	bpl.n	8001658 <HAL_RCCEx_PeriphCLKConfig+0x264>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001646:	495e      	ldr	r1, [pc, #376]	; (80017c0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001648:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800164a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800164e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001652:	4302      	orrs	r2, r0
 8001654:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001658:	0619      	lsls	r1, r3, #24
 800165a:	d508      	bpl.n	800166e <HAL_RCCEx_PeriphCLKConfig+0x27a>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800165c:	4958      	ldr	r1, [pc, #352]	; (80017c0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800165e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001660:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001664:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8001668:	4302      	orrs	r2, r0
 800166a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800166e:	05da      	lsls	r2, r3, #23
 8001670:	d508      	bpl.n	8001684 <HAL_RCCEx_PeriphCLKConfig+0x290>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001672:	4953      	ldr	r1, [pc, #332]	; (80017c0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001674:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001676:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800167a:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800167e:	4302      	orrs	r2, r0
 8001680:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001684:	049b      	lsls	r3, r3, #18
 8001686:	d50f      	bpl.n	80016a8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001688:	4a4d      	ldr	r2, [pc, #308]	; (80017c0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800168a:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800168c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001690:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8001694:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001696:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800169a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800169e:	d164      	bne.n	800176a <HAL_RCCEx_PeriphCLKConfig+0x376>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80016a0:	68d3      	ldr	r3, [r2, #12]
 80016a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80016a6:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80016a8:	6823      	ldr	r3, [r4, #0]
 80016aa:	031f      	lsls	r7, r3, #12
 80016ac:	d50f      	bpl.n	80016ce <HAL_RCCEx_PeriphCLKConfig+0x2da>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80016ae:	4a44      	ldr	r2, [pc, #272]	; (80017c0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80016b0:	6f21      	ldr	r1, [r4, #112]	; 0x70
 80016b2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80016b6:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80016ba:	430b      	orrs	r3, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80016bc:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80016c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80016c4:	d15c      	bne.n	8001780 <HAL_RCCEx_PeriphCLKConfig+0x38c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80016c6:	68d3      	ldr	r3, [r2, #12]
 80016c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80016cc:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80016ce:	6823      	ldr	r3, [r4, #0]
 80016d0:	035e      	lsls	r6, r3, #13
 80016d2:	d50f      	bpl.n	80016f4 <HAL_RCCEx_PeriphCLKConfig+0x300>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80016d4:	4a3a      	ldr	r2, [pc, #232]	; (80017c0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80016d6:	6f61      	ldr	r1, [r4, #116]	; 0x74
 80016d8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80016dc:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80016e0:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80016e2:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80016e6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80016ea:	d154      	bne.n	8001796 <HAL_RCCEx_PeriphCLKConfig+0x3a2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80016ec:	68d3      	ldr	r3, [r2, #12]
 80016ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80016f2:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80016f4:	6823      	ldr	r3, [r4, #0]
 80016f6:	0458      	lsls	r0, r3, #17
 80016f8:	d512      	bpl.n	8001720 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80016fa:	4931      	ldr	r1, [pc, #196]	; (80017c0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80016fc:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 80016fe:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001702:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8001706:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8001708:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800170c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8001710:	d14c      	bne.n	80017ac <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8001712:	2102      	movs	r1, #2
 8001714:	1d20      	adds	r0, r4, #4
 8001716:	f7ff fd61 	bl	80011dc <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 800171a:	2800      	cmp	r0, #0
 800171c:	bf18      	it	ne
 800171e:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8001720:	6822      	ldr	r2, [r4, #0]
 8001722:	0411      	lsls	r1, r2, #16
 8001724:	d508      	bpl.n	8001738 <HAL_RCCEx_PeriphCLKConfig+0x344>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8001726:	4926      	ldr	r1, [pc, #152]	; (80017c0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001728:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800172a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800172e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001732:	4303      	orrs	r3, r0
 8001734:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001738:	03d3      	lsls	r3, r2, #15
 800173a:	d509      	bpl.n	8001750 <HAL_RCCEx_PeriphCLKConfig+0x35c>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800173c:	4a20      	ldr	r2, [pc, #128]	; (80017c0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800173e:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8001742:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001746:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800174a:	430b      	orrs	r3, r1
 800174c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8001750:	4628      	mov	r0, r5
 8001752:	b002      	add	sp, #8
 8001754:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001758:	f7fe ff48 	bl	80005ec <HAL_GetTick>
 800175c:	1b40      	subs	r0, r0, r5
 800175e:	4548      	cmp	r0, r9
 8001760:	f67f aee8 	bls.w	8001534 <HAL_RCCEx_PeriphCLKConfig+0x140>
 8001764:	e70c      	b.n	8001580 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8001766:	4635      	mov	r5, r6
 8001768:	e712      	b.n	8001590 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800176a:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800176e:	d19b      	bne.n	80016a8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001770:	2101      	movs	r1, #1
 8001772:	1d20      	adds	r0, r4, #4
 8001774:	f7ff fd32 	bl	80011dc <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 8001778:	2800      	cmp	r0, #0
 800177a:	bf18      	it	ne
 800177c:	4605      	movne	r5, r0
 800177e:	e793      	b.n	80016a8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8001780:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8001784:	d1a3      	bne.n	80016ce <HAL_RCCEx_PeriphCLKConfig+0x2da>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001786:	2101      	movs	r1, #1
 8001788:	1d20      	adds	r0, r4, #4
 800178a:	f7ff fd27 	bl	80011dc <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 800178e:	2800      	cmp	r0, #0
 8001790:	bf18      	it	ne
 8001792:	4605      	movne	r5, r0
 8001794:	e79b      	b.n	80016ce <HAL_RCCEx_PeriphCLKConfig+0x2da>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8001796:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800179a:	d1ab      	bne.n	80016f4 <HAL_RCCEx_PeriphCLKConfig+0x300>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800179c:	2101      	movs	r1, #1
 800179e:	1d20      	adds	r0, r4, #4
 80017a0:	f7ff fd1c 	bl	80011dc <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 80017a4:	2800      	cmp	r0, #0
 80017a6:	bf18      	it	ne
 80017a8:	4605      	movne	r5, r0
 80017aa:	e7a3      	b.n	80016f4 <HAL_RCCEx_PeriphCLKConfig+0x300>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80017ac:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 80017b0:	d1b6      	bne.n	8001720 <HAL_RCCEx_PeriphCLKConfig+0x32c>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80017b2:	2102      	movs	r1, #2
 80017b4:	f104 0020 	add.w	r0, r4, #32
 80017b8:	f7ff fd9e 	bl	80012f8 <RCCEx_PLLSAI2_Config>
 80017bc:	e7ad      	b.n	800171a <HAL_RCCEx_PeriphCLKConfig+0x326>
 80017be:	bf00      	nop
 80017c0:	40021000 	.word	0x40021000

080017c4 <UART_SetConfig>:
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
  
  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if(UART_INSTANCE_LOWPOWER(huart))
 80017c4:	6802      	ldr	r2, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80017c6:	69c1      	ldr	r1, [r0, #28]
{
 80017c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017ca:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80017cc:	6883      	ldr	r3, [r0, #8]
 80017ce:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80017d0:	6815      	ldr	r5, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80017d2:	4303      	orrs	r3, r0
 80017d4:	6960      	ldr	r0, [r4, #20]
 80017d6:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80017d8:	48ba      	ldr	r0, [pc, #744]	; (8001ac4 <UART_SetConfig+0x300>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80017da:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80017dc:	4028      	ands	r0, r5
 80017de:	4303      	orrs	r3, r0
 80017e0:	6013      	str	r3, [r2, #0]
  
  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80017e2:	6853      	ldr	r3, [r2, #4]
 80017e4:	68e0      	ldr	r0, [r4, #12]
 80017e6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80017ea:	4303      	orrs	r3, r0
 80017ec:	6053      	str	r3, [r2, #4]
  *   to huart->Init.OneBitSampling (not applicable to LPUART)
  * - set TXFTCFG bit according to huart->Init.TxFifoThreshold value
  * - set RXFTCFG bit according to huart->Init.RxFifoThreshold value */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
  
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80017ee:	4bb6      	ldr	r3, [pc, #728]	; (8001ac8 <UART_SetConfig+0x304>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80017f0:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80017f2:	429a      	cmp	r2, r3
  {
    tmpreg |= huart->Init.OneBitSampling;
 80017f4:	bf1c      	itt	ne
 80017f6:	6a23      	ldrne	r3, [r4, #32]
 80017f8:	4318      	orrne	r0, r3
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80017fa:	6893      	ldr	r3, [r2, #8]
 80017fc:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8001800:	4303      	orrs	r3, r0
 8001802:	6093      	str	r3, [r2, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif
  
  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001804:	4bb1      	ldr	r3, [pc, #708]	; (8001acc <UART_SetConfig+0x308>)
 8001806:	429a      	cmp	r2, r3
 8001808:	d119      	bne.n	800183e <UART_SetConfig+0x7a>
 800180a:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 800180e:	4ab0      	ldr	r2, [pc, #704]	; (8001ad0 <UART_SetConfig+0x30c>)
 8001810:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001814:	f003 0303 	and.w	r3, r3, #3
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001818:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800181c:	5cd3      	ldrb	r3, [r2, r3]
 800181e:	f040 8138 	bne.w	8001a92 <UART_SetConfig+0x2ce>
  {
    switch (clocksource)
 8001822:	2b08      	cmp	r3, #8
 8001824:	f200 808f 	bhi.w	8001946 <UART_SetConfig+0x182>
 8001828:	e8df f013 	tbh	[pc, r3, lsl #1]
 800182c:	00ca011a 	.word	0x00ca011a
 8001830:	008d00f9 	.word	0x008d00f9
 8001834:	008d0114 	.word	0x008d0114
 8001838:	008d008d 	.word	0x008d008d
 800183c:	0036      	.short	0x0036
  UART_GETCLOCKSOURCE(huart, clocksource);
 800183e:	4ba5      	ldr	r3, [pc, #660]	; (8001ad4 <UART_SetConfig+0x310>)
 8001840:	429a      	cmp	r2, r3
 8001842:	d107      	bne.n	8001854 <UART_SetConfig+0x90>
 8001844:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8001848:	4aa3      	ldr	r2, [pc, #652]	; (8001ad8 <UART_SetConfig+0x314>)
 800184a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800184e:	f003 030c 	and.w	r3, r3, #12
 8001852:	e7e1      	b.n	8001818 <UART_SetConfig+0x54>
 8001854:	4ba1      	ldr	r3, [pc, #644]	; (8001adc <UART_SetConfig+0x318>)
 8001856:	429a      	cmp	r2, r3
 8001858:	d123      	bne.n	80018a2 <UART_SetConfig+0xde>
 800185a:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 800185e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001862:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001866:	2b10      	cmp	r3, #16
 8001868:	f000 80f1 	beq.w	8001a4e <UART_SetConfig+0x28a>
 800186c:	d80b      	bhi.n	8001886 <UART_SetConfig+0xc2>
 800186e:	2b00      	cmp	r3, #0
 8001870:	f000 80f3 	beq.w	8001a5a <UART_SetConfig+0x296>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001874:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
#endif
      break;
    case UART_CLOCKSOURCE_UNDEFINED:
    default:
      ret = HAL_ERROR;
 8001878:	f04f 0201 	mov.w	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 800187c:	f04f 0300 	mov.w	r3, #0
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001880:	f000 80f8 	beq.w	8001a74 <UART_SetConfig+0x2b0>
 8001884:	e0a8      	b.n	80019d8 <UART_SetConfig+0x214>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001886:	2b20      	cmp	r3, #32
 8001888:	f000 80c6 	beq.w	8001a18 <UART_SetConfig+0x254>
 800188c:	2b30      	cmp	r3, #48	; 0x30
 800188e:	d1f1      	bne.n	8001874 <UART_SetConfig+0xb0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001890:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001894:	f040 80b8 	bne.w	8001a08 <UART_SetConfig+0x244>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001898:	6860      	ldr	r0, [r4, #4]
 800189a:	0843      	lsrs	r3, r0, #1
 800189c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80018a0:	e0c3      	b.n	8001a2a <UART_SetConfig+0x266>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80018a2:	4b8f      	ldr	r3, [pc, #572]	; (8001ae0 <UART_SetConfig+0x31c>)
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d11e      	bne.n	80018e6 <UART_SetConfig+0x122>
 80018a8:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 80018ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018b0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80018b4:	2b40      	cmp	r3, #64	; 0x40
 80018b6:	f000 80bb 	beq.w	8001a30 <UART_SetConfig+0x26c>
 80018ba:	d80a      	bhi.n	80018d2 <UART_SetConfig+0x10e>
 80018bc:	b97b      	cbnz	r3, 80018de <UART_SetConfig+0x11a>
  if(UART_INSTANCE_LOWPOWER(huart))
 80018be:	4b82      	ldr	r3, [pc, #520]	; (8001ac8 <UART_SetConfig+0x304>)
 80018c0:	429a      	cmp	r2, r3
 80018c2:	f040 80ca 	bne.w	8001a5a <UART_SetConfig+0x296>
      lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80018c6:	f7ff fc69 	bl	800119c <HAL_RCC_GetPCLK1Freq>
      break;
 80018ca:	2300      	movs	r3, #0
    if (lpuart_ker_ck_pres != 0U)
 80018cc:	bbb0      	cbnz	r0, 800193c <UART_SetConfig+0x178>
 80018ce:	4602      	mov	r2, r0
 80018d0:	e03a      	b.n	8001948 <UART_SetConfig+0x184>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80018d2:	2b80      	cmp	r3, #128	; 0x80
 80018d4:	f000 809d 	beq.w	8001a12 <UART_SetConfig+0x24e>
 80018d8:	2bc0      	cmp	r3, #192	; 0xc0
 80018da:	f000 80b0 	beq.w	8001a3e <UART_SetConfig+0x27a>
  if(UART_INSTANCE_LOWPOWER(huart))
 80018de:	4b7a      	ldr	r3, [pc, #488]	; (8001ac8 <UART_SetConfig+0x304>)
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d1c7      	bne.n	8001874 <UART_SetConfig+0xb0>
 80018e4:	e02f      	b.n	8001946 <UART_SetConfig+0x182>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80018e6:	4b7f      	ldr	r3, [pc, #508]	; (8001ae4 <UART_SetConfig+0x320>)
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d111      	bne.n	8001910 <UART_SetConfig+0x14c>
 80018ec:	f503 33e0 	add.w	r3, r3, #114688	; 0x1c000
 80018f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80018f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80018fc:	f000 8098 	beq.w	8001a30 <UART_SetConfig+0x26c>
 8001900:	d9dc      	bls.n	80018bc <UART_SetConfig+0xf8>
 8001902:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001906:	f000 8084 	beq.w	8001a12 <UART_SetConfig+0x24e>
 800190a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800190e:	e7e4      	b.n	80018da <UART_SetConfig+0x116>
 8001910:	4b6d      	ldr	r3, [pc, #436]	; (8001ac8 <UART_SetConfig+0x304>)
 8001912:	429a      	cmp	r2, r3
 8001914:	d1ae      	bne.n	8001874 <UART_SetConfig+0xb0>
 8001916:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 800191a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800191e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001922:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001926:	f000 8083 	beq.w	8001a30 <UART_SetConfig+0x26c>
 800192a:	d9c7      	bls.n	80018bc <UART_SetConfig+0xf8>
 800192c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001930:	d06f      	beq.n	8001a12 <UART_SetConfig+0x24e>
 8001932:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8001936:	e7d0      	b.n	80018da <UART_SetConfig+0x116>
      lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8001938:	486b      	ldr	r0, [pc, #428]	; (8001ae8 <UART_SetConfig+0x324>)
  if(UART_INSTANCE_LOWPOWER(huart))
 800193a:	2302      	movs	r3, #2
      if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
 800193c:	6862      	ldr	r2, [r4, #4]
 800193e:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8001942:	4281      	cmp	r1, r0
 8001944:	d905      	bls.n	8001952 <UART_SetConfig+0x18e>
        ret = HAL_ERROR;
 8001946:	2201      	movs	r2, #1
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif
    
  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001948:	2300      	movs	r3, #0
 800194a:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 800194c:	6663      	str	r3, [r4, #100]	; 0x64
  
  return ret;
}
 800194e:	4610      	mov	r0, r2
 8001950:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
 8001952:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8001956:	d8f6      	bhi.n	8001946 <UART_SetConfig+0x182>
        switch (clocksource)
 8001958:	2b08      	cmp	r3, #8
 800195a:	d82e      	bhi.n	80019ba <UART_SetConfig+0x1f6>
 800195c:	e8df f003 	tbb	[pc, r3]
 8001960:	2d1c2d05 	.word	0x2d1c2d05
 8001964:	2d2d2d24 	.word	0x2d2d2d24
 8001968:	27          	.byte	0x27
 8001969:	00          	.byte	0x00
          usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800196a:	f7ff fc17 	bl	800119c <HAL_RCC_GetPCLK1Freq>
          usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800196e:	6862      	ldr	r2, [r4, #4]
 8001970:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001974:	0856      	lsrs	r6, r2, #1
 8001976:	2700      	movs	r7, #0
 8001978:	fbe1 6700 	umlal	r6, r7, r1, r0
 800197c:	2300      	movs	r3, #0
 800197e:	4630      	mov	r0, r6
 8001980:	4639      	mov	r1, r7
          usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8001982:	f7fe fc7d 	bl	8000280 <__aeabi_uldivmod>
          break;
 8001986:	2200      	movs	r2, #0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8001988:	4b58      	ldr	r3, [pc, #352]	; (8001aec <UART_SetConfig+0x328>)
 800198a:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 800198e:	4299      	cmp	r1, r3
 8001990:	d8d9      	bhi.n	8001946 <UART_SetConfig+0x182>
          huart->Instance->BRR = usartdiv;
 8001992:	6823      	ldr	r3, [r4, #0]
 8001994:	60d8      	str	r0, [r3, #12]
 8001996:	e7d7      	b.n	8001948 <UART_SetConfig+0x184>
          usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8001998:	4855      	ldr	r0, [pc, #340]	; (8001af0 <UART_SetConfig+0x32c>)
 800199a:	0855      	lsrs	r5, r2, #1
 800199c:	2300      	movs	r3, #0
 800199e:	2100      	movs	r1, #0
 80019a0:	1940      	adds	r0, r0, r5
          usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80019a2:	f141 0100 	adc.w	r1, r1, #0
 80019a6:	e7ec      	b.n	8001982 <UART_SetConfig+0x1be>
          usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80019a8:	f7ff f8a2 	bl	8000af0 <HAL_RCC_GetSysClockFreq>
 80019ac:	e7df      	b.n	800196e <UART_SetConfig+0x1aa>
          usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80019ae:	0850      	lsrs	r0, r2, #1
 80019b0:	2100      	movs	r1, #0
 80019b2:	2300      	movs	r3, #0
 80019b4:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 80019b8:	e7f3      	b.n	80019a2 <UART_SetConfig+0x1de>
          ret = HAL_ERROR;
 80019ba:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 80019bc:	2000      	movs	r0, #0
 80019be:	e7e3      	b.n	8001988 <UART_SetConfig+0x1c4>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80019c0:	f7ff fbfc 	bl	80011bc <HAL_RCC_GetPCLK2Freq>
 80019c4:	e04e      	b.n	8001a64 <UART_SetConfig+0x2a0>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80019c6:	f7ff fbe9 	bl	800119c <HAL_RCC_GetPCLK1Freq>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80019ca:	6862      	ldr	r2, [r4, #4]
 80019cc:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 80019d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80019d4:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80019d6:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80019d8:	f1a3 0010 	sub.w	r0, r3, #16
 80019dc:	f64f 71ef 	movw	r1, #65519	; 0xffef
 80019e0:	4288      	cmp	r0, r1
 80019e2:	d8b0      	bhi.n	8001946 <UART_SetConfig+0x182>
      huart->Instance->BRR = usartdiv;
 80019e4:	6821      	ldr	r1, [r4, #0]
 80019e6:	60cb      	str	r3, [r1, #12]
 80019e8:	e7ae      	b.n	8001948 <UART_SetConfig+0x184>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80019ea:	f7ff fbe7 	bl	80011bc <HAL_RCC_GetPCLK2Freq>
 80019ee:	e7ec      	b.n	80019ca <UART_SetConfig+0x206>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80019f0:	6860      	ldr	r0, [r4, #4]
 80019f2:	0843      	lsrs	r3, r0, #1
 80019f4:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80019f8:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80019fc:	fbb3 f3f0 	udiv	r3, r3, r0
 8001a00:	e7e8      	b.n	80019d4 <UART_SetConfig+0x210>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001a02:	f7ff f875 	bl	8000af0 <HAL_RCC_GetSysClockFreq>
 8001a06:	e7e0      	b.n	80019ca <UART_SetConfig+0x206>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001a08:	6860      	ldr	r0, [r4, #4]
 8001a0a:	0843      	lsrs	r3, r0, #1
 8001a0c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001a10:	e7f4      	b.n	80019fc <UART_SetConfig+0x238>
  if(UART_INSTANCE_LOWPOWER(huart))
 8001a12:	4b2d      	ldr	r3, [pc, #180]	; (8001ac8 <UART_SetConfig+0x304>)
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d08f      	beq.n	8001938 <UART_SetConfig+0x174>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001a18:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001a1c:	d1e8      	bne.n	80019f0 <UART_SetConfig+0x22c>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001a1e:	6860      	ldr	r0, [r4, #4]
 8001a20:	0843      	lsrs	r3, r0, #1
 8001a22:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8001a26:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001a2a:	fbb3 f3f0 	udiv	r3, r3, r0
 8001a2e:	e01f      	b.n	8001a70 <UART_SetConfig+0x2ac>
  if(UART_INSTANCE_LOWPOWER(huart))
 8001a30:	4b25      	ldr	r3, [pc, #148]	; (8001ac8 <UART_SetConfig+0x304>)
 8001a32:	429a      	cmp	r2, r3
 8001a34:	d10b      	bne.n	8001a4e <UART_SetConfig+0x28a>
      lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8001a36:	f7ff f85b 	bl	8000af0 <HAL_RCC_GetSysClockFreq>
      break;
 8001a3a:	2304      	movs	r3, #4
 8001a3c:	e746      	b.n	80018cc <UART_SetConfig+0x108>
  if(UART_INSTANCE_LOWPOWER(huart))
 8001a3e:	4b22      	ldr	r3, [pc, #136]	; (8001ac8 <UART_SetConfig+0x304>)
 8001a40:	429a      	cmp	r2, r3
 8001a42:	f47f af25 	bne.w	8001890 <UART_SetConfig+0xcc>
      lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8001a46:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  if(UART_INSTANCE_LOWPOWER(huart))
 8001a4a:	2308      	movs	r3, #8
 8001a4c:	e776      	b.n	800193c <UART_SetConfig+0x178>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001a4e:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001a52:	d1d6      	bne.n	8001a02 <UART_SetConfig+0x23e>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001a54:	f7ff f84c 	bl	8000af0 <HAL_RCC_GetSysClockFreq>
 8001a58:	e004      	b.n	8001a64 <UART_SetConfig+0x2a0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001a5a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001a5e:	d1b2      	bne.n	80019c6 <UART_SetConfig+0x202>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001a60:	f7ff fb9c 	bl	800119c <HAL_RCC_GetPCLK1Freq>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001a64:	6861      	ldr	r1, [r4, #4]
 8001a66:	084a      	lsrs	r2, r1, #1
 8001a68:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8001a6c:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a70:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001a72:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001a74:	f1a3 0010 	sub.w	r0, r3, #16
 8001a78:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8001a7c:	4288      	cmp	r0, r1
 8001a7e:	f63f af62 	bhi.w	8001946 <UART_SetConfig+0x182>
      brrtemp = usartdiv & 0xFFF0U;
 8001a82:	f023 010f 	bic.w	r1, r3, #15
      huart->Instance->BRR = brrtemp;
 8001a86:	6820      	ldr	r0, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001a88:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 8001a8c:	430b      	orrs	r3, r1
 8001a8e:	60c3      	str	r3, [r0, #12]
 8001a90:	e75a      	b.n	8001948 <UART_SetConfig+0x184>
    switch (clocksource)
 8001a92:	2b08      	cmp	r3, #8
 8001a94:	f63f af57 	bhi.w	8001946 <UART_SetConfig+0x182>
 8001a98:	a201      	add	r2, pc, #4	; (adr r2, 8001aa0 <UART_SetConfig+0x2dc>)
 8001a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a9e:	bf00      	nop
 8001aa0:	080019c7 	.word	0x080019c7
 8001aa4:	080019eb 	.word	0x080019eb
 8001aa8:	080019f1 	.word	0x080019f1
 8001aac:	08001947 	.word	0x08001947
 8001ab0:	08001a03 	.word	0x08001a03
 8001ab4:	08001947 	.word	0x08001947
 8001ab8:	08001947 	.word	0x08001947
 8001abc:	08001947 	.word	0x08001947
 8001ac0:	08001a09 	.word	0x08001a09
 8001ac4:	efff69f3 	.word	0xefff69f3
 8001ac8:	40008000 	.word	0x40008000
 8001acc:	40013800 	.word	0x40013800
 8001ad0:	08002d24 	.word	0x08002d24
 8001ad4:	40004400 	.word	0x40004400
 8001ad8:	08002d28 	.word	0x08002d28
 8001adc:	40004800 	.word	0x40004800
 8001ae0:	40004c00 	.word	0x40004c00
 8001ae4:	40005000 	.word	0x40005000
 8001ae8:	00f42400 	.word	0x00f42400
 8001aec:	000ffcff 	.word	0x000ffcff
 8001af0:	f4240000 	.word	0xf4240000

08001af4 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
  
  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001af4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001af6:	07da      	lsls	r2, r3, #31
{
 8001af8:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001afa:	d506      	bpl.n	8001b0a <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001afc:	6801      	ldr	r1, [r0, #0]
 8001afe:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8001b00:	684a      	ldr	r2, [r1, #4]
 8001b02:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001b06:	4322      	orrs	r2, r4
 8001b08:	604a      	str	r2, [r1, #4]
  }
  
  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001b0a:	079c      	lsls	r4, r3, #30
 8001b0c:	d506      	bpl.n	8001b1c <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001b0e:	6801      	ldr	r1, [r0, #0]
 8001b10:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001b12:	684a      	ldr	r2, [r1, #4]
 8001b14:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001b18:	4322      	orrs	r2, r4
 8001b1a:	604a      	str	r2, [r1, #4]
  }
  
  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001b1c:	0759      	lsls	r1, r3, #29
 8001b1e:	d506      	bpl.n	8001b2e <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001b20:	6801      	ldr	r1, [r0, #0]
 8001b22:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8001b24:	684a      	ldr	r2, [r1, #4]
 8001b26:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001b2a:	4322      	orrs	r2, r4
 8001b2c:	604a      	str	r2, [r1, #4]
  }
  
  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001b2e:	071a      	lsls	r2, r3, #28
 8001b30:	d506      	bpl.n	8001b40 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001b32:	6801      	ldr	r1, [r0, #0]
 8001b34:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8001b36:	684a      	ldr	r2, [r1, #4]
 8001b38:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b3c:	4322      	orrs	r2, r4
 8001b3e:	604a      	str	r2, [r1, #4]
  }
  
  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001b40:	06dc      	lsls	r4, r3, #27
 8001b42:	d506      	bpl.n	8001b52 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001b44:	6801      	ldr	r1, [r0, #0]
 8001b46:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001b48:	688a      	ldr	r2, [r1, #8]
 8001b4a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001b4e:	4322      	orrs	r2, r4
 8001b50:	608a      	str	r2, [r1, #8]
  }
  
  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001b52:	0699      	lsls	r1, r3, #26
 8001b54:	d506      	bpl.n	8001b64 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001b56:	6801      	ldr	r1, [r0, #0]
 8001b58:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8001b5a:	688a      	ldr	r2, [r1, #8]
 8001b5c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001b60:	4322      	orrs	r2, r4
 8001b62:	608a      	str	r2, [r1, #8]
  }
  
  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001b64:	065a      	lsls	r2, r3, #25
 8001b66:	d50f      	bpl.n	8001b88 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001b68:	6801      	ldr	r1, [r0, #0]
 8001b6a:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001b6c:	684a      	ldr	r2, [r1, #4]
 8001b6e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8001b72:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001b74:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001b78:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001b7a:	d105      	bne.n	8001b88 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001b7c:	684a      	ldr	r2, [r1, #4]
 8001b7e:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001b80:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8001b84:	4322      	orrs	r2, r4
 8001b86:	604a      	str	r2, [r1, #4]
    }
  }
  
  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001b88:	061b      	lsls	r3, r3, #24
 8001b8a:	d506      	bpl.n	8001b9a <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001b8c:	6802      	ldr	r2, [r0, #0]
 8001b8e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001b90:	6853      	ldr	r3, [r2, #4]
 8001b92:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001b96:	430b      	orrs	r3, r1
 8001b98:	6053      	str	r3, [r2, #4]
 8001b9a:	bd10      	pop	{r4, pc}

08001b9c <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001b9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ba0:	9d06      	ldr	r5, [sp, #24]
 8001ba2:	4604      	mov	r4, r0
 8001ba4:	460f      	mov	r7, r1
 8001ba6:	4616      	mov	r6, r2
 8001ba8:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001baa:	6821      	ldr	r1, [r4, #0]
 8001bac:	69ca      	ldr	r2, [r1, #28]
 8001bae:	ea37 0302 	bics.w	r3, r7, r2
 8001bb2:	bf0c      	ite	eq
 8001bb4:	2201      	moveq	r2, #1
 8001bb6:	2200      	movne	r2, #0
 8001bb8:	42b2      	cmp	r2, r6
 8001bba:	d002      	beq.n	8001bc2 <UART_WaitOnFlagUntilTimeout+0x26>
        
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8001bbc:	2000      	movs	r0, #0
}
 8001bbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001bc2:	1c6b      	adds	r3, r5, #1
 8001bc4:	d0f2      	beq.n	8001bac <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001bc6:	b99d      	cbnz	r5, 8001bf0 <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001bc8:	6823      	ldr	r3, [r4, #0]
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001bd0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001bd2:	689a      	ldr	r2, [r3, #8]
 8001bd4:	f022 0201 	bic.w	r2, r2, #1
 8001bd8:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8001bda:	2320      	movs	r3, #32
 8001bdc:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
        huart->RxState = HAL_UART_STATE_READY;
 8001be0:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
        __HAL_UNLOCK(huart);
 8001be4:	2300      	movs	r3, #0
 8001be6:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
 8001bea:	2003      	movs	r0, #3
 8001bec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001bf0:	f7fe fcfc 	bl	80005ec <HAL_GetTick>
 8001bf4:	eba0 0008 	sub.w	r0, r0, r8
 8001bf8:	4285      	cmp	r5, r0
 8001bfa:	d2d6      	bcs.n	8001baa <UART_WaitOnFlagUntilTimeout+0xe>
 8001bfc:	e7e4      	b.n	8001bc8 <UART_WaitOnFlagUntilTimeout+0x2c>

08001bfe <HAL_UART_Transmit>:
{
 8001bfe:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001c02:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 8001c04:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 8001c08:	2b20      	cmp	r3, #32
{
 8001c0a:	4604      	mov	r4, r0
 8001c0c:	460d      	mov	r5, r1
 8001c0e:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8001c10:	d14a      	bne.n	8001ca8 <HAL_UART_Transmit+0xaa>
    if((pData == NULL ) || (Size == 0U))
 8001c12:	2900      	cmp	r1, #0
 8001c14:	d046      	beq.n	8001ca4 <HAL_UART_Transmit+0xa6>
 8001c16:	2a00      	cmp	r2, #0
 8001c18:	d044      	beq.n	8001ca4 <HAL_UART_Transmit+0xa6>
    __HAL_LOCK(huart);
 8001c1a:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d042      	beq.n	8001ca8 <HAL_UART_Transmit+0xaa>
 8001c22:	2301      	movs	r3, #1
 8001c24:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	6743      	str	r3, [r0, #116]	; 0x74
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001c2c:	2321      	movs	r3, #33	; 0x21
 8001c2e:	f880 3071 	strb.w	r3, [r0, #113]	; 0x71
    tickstart = HAL_GetTick();
 8001c32:	f7fe fcdb 	bl	80005ec <HAL_GetTick>
    huart->TxXferSize  = Size;
 8001c36:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    tickstart = HAL_GetTick();
 8001c3a:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8001c3c:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 8001c40:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001c44:	9700      	str	r7, [sp, #0]
    while(huart->TxXferCount > 0U)
 8001c46:	b292      	uxth	r2, r2
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001c48:	4633      	mov	r3, r6
    while(huart->TxXferCount > 0U)
 8001c4a:	b952      	cbnz	r2, 8001c62 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001c4c:	2140      	movs	r1, #64	; 0x40
 8001c4e:	4620      	mov	r0, r4
 8001c50:	f7ff ffa4 	bl	8001b9c <UART_WaitOnFlagUntilTimeout>
 8001c54:	b958      	cbnz	r0, 8001c6e <HAL_UART_Transmit+0x70>
    huart->gState = HAL_UART_STATE_READY;
 8001c56:	2320      	movs	r3, #32
 8001c58:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
    __HAL_UNLOCK(huart);
 8001c5c:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
    return HAL_OK;
 8001c60:	e006      	b.n	8001c70 <HAL_UART_Transmit+0x72>
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001c62:	2200      	movs	r2, #0
 8001c64:	2180      	movs	r1, #128	; 0x80
 8001c66:	4620      	mov	r0, r4
 8001c68:	f7ff ff98 	bl	8001b9c <UART_WaitOnFlagUntilTimeout>
 8001c6c:	b118      	cbz	r0, 8001c76 <HAL_UART_Transmit+0x78>
        return HAL_TIMEOUT;
 8001c6e:	2003      	movs	r0, #3
}
 8001c70:	b002      	add	sp, #8
 8001c72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c76:	68a3      	ldr	r3, [r4, #8]
 8001c78:	6822      	ldr	r2, [r4, #0]
 8001c7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c7e:	d10d      	bne.n	8001c9c <HAL_UART_Transmit+0x9e>
 8001c80:	6923      	ldr	r3, [r4, #16]
 8001c82:	b95b      	cbnz	r3, 8001c9c <HAL_UART_Transmit+0x9e>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8001c84:	f835 3b02 	ldrh.w	r3, [r5], #2
 8001c88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c8c:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8001c8e:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8001c92:	3b01      	subs	r3, #1
 8001c94:	b29b      	uxth	r3, r3
 8001c96:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8001c9a:	e7d1      	b.n	8001c40 <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8001c9c:	782b      	ldrb	r3, [r5, #0]
 8001c9e:	8513      	strh	r3, [r2, #40]	; 0x28
 8001ca0:	3501      	adds	r5, #1
 8001ca2:	e7f4      	b.n	8001c8e <HAL_UART_Transmit+0x90>
      return  HAL_ERROR;
 8001ca4:	2001      	movs	r0, #1
 8001ca6:	e7e3      	b.n	8001c70 <HAL_UART_Transmit+0x72>
    return HAL_BUSY;
 8001ca8:	2002      	movs	r0, #2
 8001caa:	e7e1      	b.n	8001c70 <HAL_UART_Transmit+0x72>

08001cac <HAL_UART_Receive>:
{
 8001cac:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001cb0:	4698      	mov	r8, r3
  if(huart->RxState == HAL_UART_STATE_READY)
 8001cb2:	f890 3072 	ldrb.w	r3, [r0, #114]	; 0x72
 8001cb6:	2b20      	cmp	r3, #32
{
 8001cb8:	4604      	mov	r4, r0
 8001cba:	460d      	mov	r5, r1
 8001cbc:	4616      	mov	r6, r2
  if(huart->RxState == HAL_UART_STATE_READY)
 8001cbe:	d160      	bne.n	8001d82 <HAL_UART_Receive+0xd6>
    if((pData == NULL ) || (Size == 0U))
 8001cc0:	2900      	cmp	r1, #0
 8001cc2:	d05c      	beq.n	8001d7e <HAL_UART_Receive+0xd2>
 8001cc4:	2a00      	cmp	r2, #0
 8001cc6:	d05a      	beq.n	8001d7e <HAL_UART_Receive+0xd2>
    __HAL_LOCK(huart);
 8001cc8:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d058      	beq.n	8001d82 <HAL_UART_Receive+0xd6>
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	6743      	str	r3, [r0, #116]	; 0x74
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001cda:	2322      	movs	r3, #34	; 0x22
 8001cdc:	f880 3072 	strb.w	r3, [r0, #114]	; 0x72
    tickstart = HAL_GetTick();
 8001ce0:	f7fe fc84 	bl	80005ec <HAL_GetTick>
    UART_MASK_COMPUTATION(huart);
 8001ce4:	68a3      	ldr	r3, [r4, #8]
    huart->RxXferSize  = Size;
 8001ce6:	f8a4 6058 	strh.w	r6, [r4, #88]	; 0x58
    UART_MASK_COMPUTATION(huart);
 8001cea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8001cee:	4607      	mov	r7, r0
    huart->RxXferCount = Size;
 8001cf0:	f8a4 605a 	strh.w	r6, [r4, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 8001cf4:	d115      	bne.n	8001d22 <HAL_UART_Receive+0x76>
 8001cf6:	6923      	ldr	r3, [r4, #16]
 8001cf8:	b98b      	cbnz	r3, 8001d1e <HAL_UART_Receive+0x72>
 8001cfa:	f240 13ff 	movw	r3, #511	; 0x1ff
 8001cfe:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
    uhMask = huart->Mask;
 8001d02:	f8b4 605c 	ldrh.w	r6, [r4, #92]	; 0x5c
    while(huart->RxXferCount > 0U)
 8001d06:	f8b4 005a 	ldrh.w	r0, [r4, #90]	; 0x5a
 8001d0a:	b280      	uxth	r0, r0
 8001d0c:	b9b8      	cbnz	r0, 8001d3e <HAL_UART_Receive+0x92>
    huart->RxState = HAL_UART_STATE_READY;
 8001d0e:	2320      	movs	r3, #32
 8001d10:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
    __HAL_UNLOCK(huart);
 8001d14:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
}
 8001d18:	b002      	add	sp, #8
 8001d1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    UART_MASK_COMPUTATION(huart);
 8001d1e:	23ff      	movs	r3, #255	; 0xff
 8001d20:	e7ed      	b.n	8001cfe <HAL_UART_Receive+0x52>
 8001d22:	b923      	cbnz	r3, 8001d2e <HAL_UART_Receive+0x82>
 8001d24:	6923      	ldr	r3, [r4, #16]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d0f9      	beq.n	8001d1e <HAL_UART_Receive+0x72>
 8001d2a:	237f      	movs	r3, #127	; 0x7f
 8001d2c:	e7e7      	b.n	8001cfe <HAL_UART_Receive+0x52>
 8001d2e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001d32:	d1e6      	bne.n	8001d02 <HAL_UART_Receive+0x56>
 8001d34:	6923      	ldr	r3, [r4, #16]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d0f7      	beq.n	8001d2a <HAL_UART_Receive+0x7e>
 8001d3a:	233f      	movs	r3, #63	; 0x3f
 8001d3c:	e7df      	b.n	8001cfe <HAL_UART_Receive+0x52>
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001d3e:	f8cd 8000 	str.w	r8, [sp]
 8001d42:	463b      	mov	r3, r7
 8001d44:	2200      	movs	r2, #0
 8001d46:	2120      	movs	r1, #32
 8001d48:	4620      	mov	r0, r4
 8001d4a:	f7ff ff27 	bl	8001b9c <UART_WaitOnFlagUntilTimeout>
 8001d4e:	b9d0      	cbnz	r0, 8001d86 <HAL_UART_Receive+0xda>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d50:	68a3      	ldr	r3, [r4, #8]
 8001d52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d56:	6823      	ldr	r3, [r4, #0]
 8001d58:	d10c      	bne.n	8001d74 <HAL_UART_Receive+0xc8>
 8001d5a:	6922      	ldr	r2, [r4, #16]
 8001d5c:	b952      	cbnz	r2, 8001d74 <HAL_UART_Receive+0xc8>
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8001d5e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001d60:	4033      	ands	r3, r6
 8001d62:	f825 3b02 	strh.w	r3, [r5], #2
      huart->RxXferCount--;
 8001d66:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8001d6a:	3b01      	subs	r3, #1
 8001d6c:	b29b      	uxth	r3, r3
 8001d6e:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8001d72:	e7c8      	b.n	8001d06 <HAL_UART_Receive+0x5a>
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8001d74:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001d76:	4033      	ands	r3, r6
 8001d78:	702b      	strb	r3, [r5, #0]
 8001d7a:	3501      	adds	r5, #1
 8001d7c:	e7f3      	b.n	8001d66 <HAL_UART_Receive+0xba>
      return  HAL_ERROR;
 8001d7e:	2001      	movs	r0, #1
 8001d80:	e7ca      	b.n	8001d18 <HAL_UART_Receive+0x6c>
    return HAL_BUSY;
 8001d82:	2002      	movs	r0, #2
 8001d84:	e7c8      	b.n	8001d18 <HAL_UART_Receive+0x6c>
        return HAL_TIMEOUT;
 8001d86:	2003      	movs	r0, #3
 8001d88:	e7c6      	b.n	8001d18 <HAL_UART_Receive+0x6c>

08001d8a <UART_CheckIdleState>:
{
 8001d8a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001d8c:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d8e:	2600      	movs	r6, #0
 8001d90:	6746      	str	r6, [r0, #116]	; 0x74
  tickstart = HAL_GetTick();
 8001d92:	f7fe fc2b 	bl	80005ec <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001d96:	6823      	ldr	r3, [r4, #0]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8001d9c:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001d9e:	d417      	bmi.n	8001dd0 <UART_CheckIdleState+0x46>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001da0:	6823      	ldr	r3, [r4, #0]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	075b      	lsls	r3, r3, #29
 8001da6:	d50a      	bpl.n	8001dbe <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001da8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001dac:	9300      	str	r3, [sp, #0]
 8001dae:	2200      	movs	r2, #0
 8001db0:	462b      	mov	r3, r5
 8001db2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8001db6:	4620      	mov	r0, r4
 8001db8:	f7ff fef0 	bl	8001b9c <UART_WaitOnFlagUntilTimeout>
 8001dbc:	b9a0      	cbnz	r0, 8001de8 <UART_CheckIdleState+0x5e>
  huart->gState= HAL_UART_STATE_READY;
 8001dbe:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8001dc0:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 8001dc2:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UNLOCK(huart);
 8001dc6:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState= HAL_UART_STATE_READY;
 8001dca:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
  return HAL_OK;
 8001dce:	e00c      	b.n	8001dea <UART_CheckIdleState+0x60>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001dd0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001dd4:	9300      	str	r3, [sp, #0]
 8001dd6:	4632      	mov	r2, r6
 8001dd8:	4603      	mov	r3, r0
 8001dda:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001dde:	4620      	mov	r0, r4
 8001de0:	f7ff fedc 	bl	8001b9c <UART_WaitOnFlagUntilTimeout>
 8001de4:	2800      	cmp	r0, #0
 8001de6:	d0db      	beq.n	8001da0 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8001de8:	2003      	movs	r0, #3
}
 8001dea:	b002      	add	sp, #8
 8001dec:	bd70      	pop	{r4, r5, r6, pc}

08001dee <HAL_UART_Init>:
{
 8001dee:	b510      	push	{r4, lr}
  if(huart == NULL)
 8001df0:	4604      	mov	r4, r0
 8001df2:	b360      	cbz	r0, 8001e4e <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 8001df4:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 8001df8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001dfc:	b91b      	cbnz	r3, 8001e06 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001dfe:	f880 2070 	strb.w	r2, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8001e02:	f000 f9fd 	bl	8002200 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001e06:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001e08:	2324      	movs	r3, #36	; 0x24
 8001e0a:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UART_DISABLE(huart);
 8001e0e:	6813      	ldr	r3, [r2, #0]
 8001e10:	f023 0301 	bic.w	r3, r3, #1
 8001e14:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001e16:	4620      	mov	r0, r4
 8001e18:	f7ff fcd4 	bl	80017c4 <UART_SetConfig>
 8001e1c:	2801      	cmp	r0, #1
 8001e1e:	d016      	beq.n	8001e4e <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001e20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001e22:	b113      	cbz	r3, 8001e2a <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 8001e24:	4620      	mov	r0, r4
 8001e26:	f7ff fe65 	bl	8001af4 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e2a:	6823      	ldr	r3, [r4, #0]
 8001e2c:	685a      	ldr	r2, [r3, #4]
 8001e2e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001e32:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e34:	689a      	ldr	r2, [r3, #8]
 8001e36:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001e3a:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8001e42:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8001e44:	601a      	str	r2, [r3, #0]
}
 8001e46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8001e4a:	f7ff bf9e 	b.w	8001d8a <UART_CheckIdleState>
}
 8001e4e:	2001      	movs	r0, #1
 8001e50:	bd10      	pop	{r4, pc}
	...

08001e54 <printWelcomeMessage>:
  /* USER CODE END 3 */

}

void printWelcomeMessage(void)
{
 8001e54:	b570      	push	{r4, r5, r6, lr}
	HAL_UART_Transmit(&huart2, (uint8_t*)"\033[0;0H", strlen("\033[0;0H"), HAL_MAX_DELAY);
 8001e56:	4c17      	ldr	r4, [pc, #92]	; (8001eb4 <printWelcomeMessage+0x60>)
	HAL_UART_Transmit(&huart2, (uint8_t*)"\033[2J", strlen("\033[2J"), HAL_MAX_DELAY);
	HAL_UART_Transmit(&huart2, (uint8_t*)BANNER, strlen(BANNER), HAL_MAX_DELAY);
 8001e58:	4d17      	ldr	r5, [pc, #92]	; (8001eb8 <printWelcomeMessage+0x64>)
	HAL_UART_Transmit(&huart2, (uint8_t*)"\033[0;0H", strlen("\033[0;0H"), HAL_MAX_DELAY);
 8001e5a:	4918      	ldr	r1, [pc, #96]	; (8001ebc <printWelcomeMessage+0x68>)
 8001e5c:	f04f 33ff 	mov.w	r3, #4294967295
 8001e60:	2206      	movs	r2, #6
 8001e62:	4620      	mov	r0, r4
 8001e64:	f7ff fecb 	bl	8001bfe <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)"\033[2J", strlen("\033[2J"), HAL_MAX_DELAY);
 8001e68:	f04f 33ff 	mov.w	r3, #4294967295
 8001e6c:	2204      	movs	r2, #4
 8001e6e:	4914      	ldr	r1, [pc, #80]	; (8001ec0 <printWelcomeMessage+0x6c>)
 8001e70:	4620      	mov	r0, r4
 8001e72:	f7ff fec4 	bl	8001bfe <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)BANNER, strlen(BANNER), HAL_MAX_DELAY);
 8001e76:	4629      	mov	r1, r5
 8001e78:	f04f 33ff 	mov.w	r3, #4294967295
 8001e7c:	223a      	movs	r2, #58	; 0x3a
 8001e7e:	4620      	mov	r0, r4
 8001e80:	f7ff febd 	bl	8001bfe <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)WELCOME_MSG, strlen(WELCOME_MSG), HAL_MAX_DELAY);
 8001e84:	f04f 33ff 	mov.w	r3, #4294967295
 8001e88:	2229      	movs	r2, #41	; 0x29
 8001e8a:	490e      	ldr	r1, [pc, #56]	; (8001ec4 <printWelcomeMessage+0x70>)
 8001e8c:	4620      	mov	r0, r4
 8001e8e:	f7ff feb6 	bl	8001bfe <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)MAIN_MENU, strlen(MAIN_MENU), HAL_MAX_DELAY);
 8001e92:	f04f 33ff 	mov.w	r3, #4294967295
 8001e96:	2285      	movs	r2, #133	; 0x85
 8001e98:	490b      	ldr	r1, [pc, #44]	; (8001ec8 <printWelcomeMessage+0x74>)
 8001e9a:	4620      	mov	r0, r4
 8001e9c:	f7ff feaf 	bl	8001bfe <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)BANNER, strlen(BANNER), HAL_MAX_DELAY);
 8001ea0:	4629      	mov	r1, r5
 8001ea2:	4620      	mov	r0, r4
 8001ea4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ea8:	223a      	movs	r2, #58	; 0x3a
}
 8001eaa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL_UART_Transmit(&huart2, (uint8_t*)BANNER, strlen(BANNER), HAL_MAX_DELAY);
 8001eae:	f7ff bea6 	b.w	8001bfe <HAL_UART_Transmit>
 8001eb2:	bf00      	nop
 8001eb4:	20000214 	.word	0x20000214
 8001eb8:	08002d41 	.word	0x08002d41
 8001ebc:	08002d35 	.word	0x08002d35
 8001ec0:	08002d3c 	.word	0x08002d3c
 8001ec4:	08002d7c 	.word	0x08002d7c
 8001ec8:	08002da6 	.word	0x08002da6

08001ecc <readUserInput>:

uint8_t readUserInput(void)
{
 8001ecc:	b513      	push	{r0, r1, r4, lr}
	char readBuf[1];

	HAL_UART_Transmit(&huart2, (uint8_t*)PROMPT, strlen(PROMPT), HAL_MAX_DELAY);
 8001ece:	4c0a      	ldr	r4, [pc, #40]	; (8001ef8 <readUserInput+0x2c>)
 8001ed0:	490a      	ldr	r1, [pc, #40]	; (8001efc <readUserInput+0x30>)
 8001ed2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ed6:	2204      	movs	r2, #4
 8001ed8:	4620      	mov	r0, r4
 8001eda:	f7ff fe90 	bl	8001bfe <HAL_UART_Transmit>
	HAL_UART_Receive(&huart2, (uint8_t*)readBuf, 1, HAL_MAX_DELAY);
 8001ede:	f04f 33ff 	mov.w	r3, #4294967295
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	a901      	add	r1, sp, #4
 8001ee6:	4620      	mov	r0, r4
 8001ee8:	f7ff fee0 	bl	8001cac <HAL_UART_Receive>
	return atoi(readBuf);
 8001eec:	a801      	add	r0, sp, #4
 8001eee:	f000 fa02 	bl	80022f6 <atoi>
}
 8001ef2:	b2c0      	uxtb	r0, r0
 8001ef4:	b002      	add	sp, #8
 8001ef6:	bd10      	pop	{r4, pc}
 8001ef8:	20000214 	.word	0x20000214
 8001efc:	08002e59 	.word	0x08002e59

08001f00 <processUserInput>:

uint8_t processUserInput(uint8_t opt)
{
 8001f00:	b510      	push	{r4, lr}
	char msg[30];

	if(!opt || opt > 3)
 8001f02:	1e43      	subs	r3, r0, #1
 8001f04:	2b02      	cmp	r3, #2
{
 8001f06:	b088      	sub	sp, #32
 8001f08:	4604      	mov	r4, r0
	if(!opt || opt > 3)
 8001f0a:	d834      	bhi.n	8001f76 <processUserInput+0x76>
		return 0;

	sprintf(msg, "%d", opt);
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	491b      	ldr	r1, [pc, #108]	; (8001f7c <processUserInput+0x7c>)
 8001f10:	4668      	mov	r0, sp
 8001f12:	f000 fa19 	bl	8002348 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001f16:	4668      	mov	r0, sp
 8001f18:	f7fe f95a 	bl	80001d0 <strlen>
 8001f1c:	f04f 33ff 	mov.w	r3, #4294967295
 8001f20:	b282      	uxth	r2, r0
 8001f22:	4669      	mov	r1, sp
 8001f24:	4816      	ldr	r0, [pc, #88]	; (8001f80 <processUserInput+0x80>)
 8001f26:	f7ff fe6a 	bl	8001bfe <HAL_UART_Transmit>

	switch(opt)
 8001f2a:	2c02      	cmp	r4, #2
 8001f2c:	d008      	beq.n	8001f40 <processUserInput+0x40>
 8001f2e:	2c03      	cmp	r4, #3
 8001f30:	d01f      	beq.n	8001f72 <processUserInput+0x72>
	{
	case 1:
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
 8001f32:	2180      	movs	r1, #128	; 0x80
 8001f34:	4813      	ldr	r0, [pc, #76]	; (8001f84 <processUserInput+0x84>)
 8001f36:	f7fe fd58 	bl	80009ea <HAL_GPIO_TogglePin>
		break;
	case 3:
		return 2;
	};

	return 1;
 8001f3a:	2001      	movs	r0, #1
}
 8001f3c:	b008      	add	sp, #32
 8001f3e:	bd10      	pop	{r4, pc}
				HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET ? "PRESSED" : "RELEASED");
 8001f40:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f44:	480f      	ldr	r0, [pc, #60]	; (8001f84 <processUserInput+0x84>)
 8001f46:	f7fe fd45 	bl	80009d4 <HAL_GPIO_ReadPin>
		sprintf(msg, "\r\nUSER BUTTON status: %s",
 8001f4a:	4b0f      	ldr	r3, [pc, #60]	; (8001f88 <processUserInput+0x88>)
 8001f4c:	4a0f      	ldr	r2, [pc, #60]	; (8001f8c <processUserInput+0x8c>)
 8001f4e:	4910      	ldr	r1, [pc, #64]	; (8001f90 <processUserInput+0x90>)
 8001f50:	2800      	cmp	r0, #0
 8001f52:	bf18      	it	ne
 8001f54:	461a      	movne	r2, r3
 8001f56:	4668      	mov	r0, sp
 8001f58:	f000 f9f6 	bl	8002348 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001f5c:	4668      	mov	r0, sp
 8001f5e:	f7fe f937 	bl	80001d0 <strlen>
 8001f62:	f04f 33ff 	mov.w	r3, #4294967295
 8001f66:	b282      	uxth	r2, r0
 8001f68:	4669      	mov	r1, sp
 8001f6a:	4805      	ldr	r0, [pc, #20]	; (8001f80 <processUserInput+0x80>)
 8001f6c:	f7ff fe47 	bl	8001bfe <HAL_UART_Transmit>
 8001f70:	e7e3      	b.n	8001f3a <processUserInput+0x3a>
		return 2;
 8001f72:	2002      	movs	r0, #2
 8001f74:	e7e2      	b.n	8001f3c <processUserInput+0x3c>
		return 0;
 8001f76:	2000      	movs	r0, #0
 8001f78:	e7e0      	b.n	8001f3c <processUserInput+0x3c>
 8001f7a:	bf00      	nop
 8001f7c:	08002e3d 	.word	0x08002e3d
 8001f80:	20000214 	.word	0x20000214
 8001f84:	48000800 	.word	0x48000800
 8001f88:	08002e34 	.word	0x08002e34
 8001f8c:	08002e2c 	.word	0x08002e2c
 8001f90:	08002e40 	.word	0x08002e40

08001f94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f94:	b510      	push	{r4, lr}
 8001f96:	b0b8      	sub	sp, #224	; 0xe0
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f9c:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8001f9e:	2310      	movs	r3, #16
 8001fa0:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001fa2:	230a      	movs	r3, #10
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001fa4:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001fa6:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fa8:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001faa:	2307      	movs	r3, #7
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001fac:	9405      	str	r4, [sp, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001fae:	940f      	str	r4, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001fb0:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001fb2:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001fb4:	9414      	str	r4, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001fb6:	9415      	str	r4, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fb8:	f7fe fe02 	bl	8000bc0 <HAL_RCC_OscConfig>
 8001fbc:	b100      	cbz	r0, 8001fc0 <SystemClock_Config+0x2c>
 8001fbe:	e7fe      	b.n	8001fbe <SystemClock_Config+0x2a>

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fc0:	220f      	movs	r2, #15
 8001fc2:	2303      	movs	r3, #3
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fc4:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001fc6:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001fc8:	9004      	str	r0, [sp, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001fca:	2104      	movs	r1, #4
 8001fcc:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fce:	e88d 000c 	stmia.w	sp, {r2, r3}
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001fd2:	f7ff f827 	bl	8001024 <HAL_RCC_ClockConfig>
 8001fd6:	b100      	cbz	r0, 8001fda <SystemClock_Config+0x46>
 8001fd8:	e7fe      	b.n	8001fd8 <SystemClock_Config+0x44>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001fda:	9025      	str	r0, [sp, #148]	; 0x94
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fdc:	a816      	add	r0, sp, #88	; 0x58
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001fde:	9416      	str	r4, [sp, #88]	; 0x58
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fe0:	f7ff fa08 	bl	80013f4 <HAL_RCCEx_PeriphCLKConfig>
 8001fe4:	b100      	cbz	r0, 8001fe8 <SystemClock_Config+0x54>
 8001fe6:	e7fe      	b.n	8001fe6 <SystemClock_Config+0x52>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the main internal regulator output voltage 
    */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001fe8:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001fec:	f7fe fd0a 	bl	8000a04 <HAL_PWREx_ControlVoltageScaling>
 8001ff0:	4604      	mov	r4, r0
 8001ff2:	b100      	cbz	r0, 8001ff6 <SystemClock_Config+0x62>
 8001ff4:	e7fe      	b.n	8001ff4 <SystemClock_Config+0x60>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001ff6:	f7ff f8cb 	bl	8001190 <HAL_RCC_GetHCLKFreq>
 8001ffa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ffe:	fbb0 f0f3 	udiv	r0, r0, r3
 8002002:	f7fe fb4d 	bl	80006a0 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002006:	2004      	movs	r0, #4
 8002008:	f7fe fb60 	bl	80006cc <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800200c:	4622      	mov	r2, r4
 800200e:	4621      	mov	r1, r4
 8002010:	f04f 30ff 	mov.w	r0, #4294967295
 8002014:	f7fe fb10 	bl	8000638 <HAL_NVIC_SetPriority>
}
 8002018:	b038      	add	sp, #224	; 0xe0
 800201a:	bd10      	pop	{r4, pc}

0800201c <main>:
{
 800201c:	b530      	push	{r4, r5, lr}
 800201e:	b08f      	sub	sp, #60	; 0x3c
  HAL_Init();
 8002020:	f7fe faca 	bl	80005b8 <HAL_Init>
  SystemClock_Config();
 8002024:	f7ff ffb6 	bl	8001f94 <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002028:	4b3b      	ldr	r3, [pc, #236]	; (8002118 <main+0xfc>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 800202a:	483c      	ldr	r0, [pc, #240]	; (800211c <main+0x100>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800202c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800202e:	f042 0204 	orr.w	r2, r2, #4
 8002032:	64da      	str	r2, [r3, #76]	; 0x4c
 8002034:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002036:	f002 0204 	and.w	r2, r2, #4
 800203a:	9201      	str	r2, [sp, #4]
 800203c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800203e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002040:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002044:	64da      	str	r2, [r3, #76]	; 0x4c
 8002046:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002048:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800204c:	9202      	str	r2, [sp, #8]
 800204e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002050:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002052:	f042 0201 	orr.w	r2, r2, #1
 8002056:	64da      	str	r2, [r3, #76]	; 0x4c
 8002058:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800205a:	f002 0201 	and.w	r2, r2, #1
 800205e:	9203      	str	r2, [sp, #12]
 8002060:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002062:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002064:	f042 0202 	orr.w	r2, r2, #2
 8002068:	64da      	str	r2, [r3, #76]	; 0x4c
 800206a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800206c:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8002070:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002072:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8002074:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002076:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8002078:	f7fe fcb2 	bl	80009e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800207c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002080:	2400      	movs	r4, #0
  GPIO_InitStruct.Pin = B1_Pin;
 8002082:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002084:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002086:	4b26      	ldr	r3, [pc, #152]	; (8002120 <main+0x104>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002088:	4824      	ldr	r0, [pc, #144]	; (800211c <main+0x100>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800208a:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208c:	9407      	str	r4, [sp, #28]

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800208e:	2501      	movs	r5, #1
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002090:	f7fe fbc4 	bl	800081c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002094:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002096:	4821      	ldr	r0, [pc, #132]	; (800211c <main+0x100>)
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002098:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800209a:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800209c:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209e:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020a0:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020a2:	f7fe fbbb 	bl	800081c <HAL_GPIO_Init>
  huart2.Instance = USART2;
 80020a6:	481f      	ldr	r0, [pc, #124]	; (8002124 <main+0x108>)
  huart2.Init.BaudRate = 115200;
 80020a8:	4a1f      	ldr	r2, [pc, #124]	; (8002128 <main+0x10c>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80020aa:	6084      	str	r4, [r0, #8]
  huart2.Init.BaudRate = 115200;
 80020ac:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80020b0:	e880 000c 	stmia.w	r0, {r2, r3}
  huart2.Init.Mode = UART_MODE_TX_RX;
 80020b4:	230c      	movs	r3, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 80020b6:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80020b8:	6104      	str	r4, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80020ba:	6143      	str	r3, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020bc:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80020be:	61c4      	str	r4, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80020c0:	6204      	str	r4, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020c2:	6244      	str	r4, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80020c4:	f7ff fe93 	bl	8001dee <HAL_UART_Init>
 80020c8:	b100      	cbz	r0, 80020cc <main+0xb0>
 80020ca:	e7fe      	b.n	80020ca <main+0xae>
  hdac1.Instance = DAC1;
 80020cc:	4c17      	ldr	r4, [pc, #92]	; (800212c <main+0x110>)
 80020ce:	4b18      	ldr	r3, [pc, #96]	; (8002130 <main+0x114>)
 80020d0:	6023      	str	r3, [r4, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80020d2:	4620      	mov	r0, r4
 80020d4:	f7fe fb0b 	bl	80006ee <HAL_DAC_Init>
 80020d8:	4602      	mov	r2, r0
 80020da:	b100      	cbz	r0, 80020de <main+0xc2>
 80020dc:	e7fe      	b.n	80020dc <main+0xc0>
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80020de:	9005      	str	r0, [sp, #20]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80020e0:	9006      	str	r0, [sp, #24]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80020e2:	9007      	str	r0, [sp, #28]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80020e4:	9009      	str	r0, [sp, #36]	; 0x24
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80020e6:	a905      	add	r1, sp, #20
 80020e8:	4620      	mov	r0, r4
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 80020ea:	9508      	str	r5, [sp, #32]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80020ec:	f7fe fb12 	bl	8000714 <HAL_DAC_ConfigChannel>
 80020f0:	b100      	cbz	r0, 80020f4 <main+0xd8>
 80020f2:	e7fe      	b.n	80020f2 <main+0xd6>
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80020f4:	2210      	movs	r2, #16
 80020f6:	a905      	add	r1, sp, #20
 80020f8:	4620      	mov	r0, r4
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 80020fa:	9508      	str	r5, [sp, #32]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80020fc:	f7fe fb0a 	bl	8000714 <HAL_DAC_ConfigChannel>
 8002100:	b100      	cbz	r0, 8002104 <main+0xe8>
 8002102:	e7fe      	b.n	8002102 <main+0xe6>
  printWelcomeMessage();
 8002104:	f7ff fea6 	bl	8001e54 <printWelcomeMessage>
	  opt = readUserInput();
 8002108:	f7ff fee0 	bl	8001ecc <readUserInput>
 800210c:	4604      	mov	r4, r0
	  processUserInput(opt);
 800210e:	f7ff fef7 	bl	8001f00 <processUserInput>
	  if(opt == 3)
 8002112:	2c03      	cmp	r4, #3
 8002114:	d1f8      	bne.n	8002108 <main+0xec>
 8002116:	e7f5      	b.n	8002104 <main+0xe8>
 8002118:	40021000 	.word	0x40021000
 800211c:	48000800 	.word	0x48000800
 8002120:	10210000 	.word	0x10210000
 8002124:	20000214 	.word	0x20000214
 8002128:	40004400 	.word	0x40004400
 800212c:	20000200 	.word	0x20000200
 8002130:	40007400 	.word	0x40007400

08002134 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002134:	4b21      	ldr	r3, [pc, #132]	; (80021bc <HAL_MspInit+0x88>)
{
 8002136:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002138:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800213a:	f042 0201 	orr.w	r2, r2, #1
 800213e:	661a      	str	r2, [r3, #96]	; 0x60
 8002140:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002142:	f002 0201 	and.w	r2, r2, #1
 8002146:	9200      	str	r2, [sp, #0]
 8002148:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800214a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800214c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002150:	659a      	str	r2, [r3, #88]	; 0x58
 8002152:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002154:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002158:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800215a:	2003      	movs	r0, #3
  __HAL_RCC_PWR_CLK_ENABLE();
 800215c:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800215e:	f7fe fa59 	bl	8000614 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8002162:	2200      	movs	r2, #0
 8002164:	4611      	mov	r1, r2
 8002166:	f06f 000b 	mvn.w	r0, #11
 800216a:	f7fe fa65 	bl	8000638 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800216e:	2200      	movs	r2, #0
 8002170:	4611      	mov	r1, r2
 8002172:	f06f 000a 	mvn.w	r0, #10
 8002176:	f7fe fa5f 	bl	8000638 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800217a:	2200      	movs	r2, #0
 800217c:	4611      	mov	r1, r2
 800217e:	f06f 0009 	mvn.w	r0, #9
 8002182:	f7fe fa59 	bl	8000638 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8002186:	2200      	movs	r2, #0
 8002188:	4611      	mov	r1, r2
 800218a:	f06f 0004 	mvn.w	r0, #4
 800218e:	f7fe fa53 	bl	8000638 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8002192:	2200      	movs	r2, #0
 8002194:	4611      	mov	r1, r2
 8002196:	f06f 0003 	mvn.w	r0, #3
 800219a:	f7fe fa4d 	bl	8000638 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 800219e:	2200      	movs	r2, #0
 80021a0:	4611      	mov	r1, r2
 80021a2:	f06f 0001 	mvn.w	r0, #1
 80021a6:	f7fe fa47 	bl	8000638 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80021aa:	2200      	movs	r2, #0
 80021ac:	4611      	mov	r1, r2
 80021ae:	f04f 30ff 	mov.w	r0, #4294967295
 80021b2:	f7fe fa41 	bl	8000638 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021b6:	b003      	add	sp, #12
 80021b8:	f85d fb04 	ldr.w	pc, [sp], #4
 80021bc:	40021000 	.word	0x40021000

080021c0 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80021c0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hdac->Instance==DAC1)
 80021c2:	6802      	ldr	r2, [r0, #0]
 80021c4:	4b0d      	ldr	r3, [pc, #52]	; (80021fc <HAL_DAC_MspInit+0x3c>)
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d115      	bne.n	80021f6 <HAL_DAC_MspInit+0x36>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80021ca:	f503 33ce 	add.w	r3, r3, #105472	; 0x19c00
    PA5     ------> DAC1_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ce:	a901      	add	r1, sp, #4
    __HAL_RCC_DAC1_CLK_ENABLE();
 80021d0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80021d2:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80021d6:	659a      	str	r2, [r3, #88]	; 0x58
 80021d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80021de:	9300      	str	r3, [sp, #0]
 80021e0:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80021e2:	2330      	movs	r3, #48	; 0x30
 80021e4:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021e6:	2303      	movs	r3, #3
 80021e8:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ee:	2300      	movs	r3, #0
 80021f0:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021f2:	f7fe fb13 	bl	800081c <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80021f6:	b007      	add	sp, #28
 80021f8:	f85d fb04 	ldr.w	pc, [sp], #4
 80021fc:	40007400 	.word	0x40007400

08002200 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002200:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 8002202:	6802      	ldr	r2, [r0, #0]
 8002204:	4b0f      	ldr	r3, [pc, #60]	; (8002244 <HAL_UART_MspInit+0x44>)
 8002206:	429a      	cmp	r2, r3
 8002208:	d119      	bne.n	800223e <HAL_UART_MspInit+0x3e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800220a:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800220e:	a901      	add	r1, sp, #4
    __HAL_RCC_USART2_CLK_ENABLE();
 8002210:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002212:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002216:	659a      	str	r2, [r3, #88]	; 0x58
 8002218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800221a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800221e:	9300      	str	r3, [sp, #0]
 8002220:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002222:	230c      	movs	r3, #12
 8002224:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002226:	2302      	movs	r3, #2
 8002228:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800222a:	2300      	movs	r3, #0
 800222c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800222e:	2303      	movs	r3, #3
 8002230:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002232:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002236:	2307      	movs	r3, #7
 8002238:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800223a:	f7fe faef 	bl	800081c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800223e:	b007      	add	sp, #28
 8002240:	f85d fb04 	ldr.w	pc, [sp], #4
 8002244:	40004400 	.word	0x40004400

08002248 <SVC_Handler>:
 8002248:	4770      	bx	lr

0800224a <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 800224a:	4770      	bx	lr

0800224c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800224c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800224e:	f7fe f9c5 	bl	80005dc <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002252:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8002256:	f7fe ba46 	b.w	80006e6 <HAL_SYSTICK_IRQHandler>
	...

0800225c <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800225c:	490f      	ldr	r1, [pc, #60]	; (800229c <SystemInit+0x40>)
 800225e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002262:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002266:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800226a:	4b0d      	ldr	r3, [pc, #52]	; (80022a0 <SystemInit+0x44>)
 800226c:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800226e:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 8002270:	f042 0201 	orr.w	r2, r2, #1
 8002274:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 8002276:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 800227e:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8002282:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002284:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002288:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002290:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002292:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002294:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002298:	608b      	str	r3, [r1, #8]
 800229a:	4770      	bx	lr
 800229c:	e000ed00 	.word	0xe000ed00
 80022a0:	40021000 	.word	0x40021000

080022a4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80022a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022dc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80022a8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80022aa:	e003      	b.n	80022b4 <LoopCopyDataInit>

080022ac <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80022ac:	4b0c      	ldr	r3, [pc, #48]	; (80022e0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80022ae:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80022b0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80022b2:	3104      	adds	r1, #4

080022b4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80022b4:	480b      	ldr	r0, [pc, #44]	; (80022e4 <LoopForever+0xa>)
	ldr	r3, =_edata
 80022b6:	4b0c      	ldr	r3, [pc, #48]	; (80022e8 <LoopForever+0xe>)
	adds	r2, r0, r1
 80022b8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80022ba:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80022bc:	d3f6      	bcc.n	80022ac <CopyDataInit>
	ldr	r2, =_sbss
 80022be:	4a0b      	ldr	r2, [pc, #44]	; (80022ec <LoopForever+0x12>)
	b	LoopFillZerobss
 80022c0:	e002      	b.n	80022c8 <LoopFillZerobss>

080022c2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80022c2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80022c4:	f842 3b04 	str.w	r3, [r2], #4

080022c8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80022c8:	4b09      	ldr	r3, [pc, #36]	; (80022f0 <LoopForever+0x16>)
	cmp	r2, r3
 80022ca:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80022cc:	d3f9      	bcc.n	80022c2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80022ce:	f7ff ffc5 	bl	800225c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022d2:	f000 f815 	bl	8002300 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80022d6:	f7ff fea1 	bl	800201c <main>

080022da <LoopForever>:

LoopForever:
    b LoopForever
 80022da:	e7fe      	b.n	80022da <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80022dc:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80022e0:	08002ff8 	.word	0x08002ff8
	ldr	r0, =_sdata
 80022e4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80022e8:	200001d4 	.word	0x200001d4
	ldr	r2, =_sbss
 80022ec:	200001d4 	.word	0x200001d4
	ldr	r3, = _ebss
 80022f0:	20000290 	.word	0x20000290

080022f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80022f4:	e7fe      	b.n	80022f4 <ADC1_2_IRQHandler>

080022f6 <atoi>:
 80022f6:	220a      	movs	r2, #10
 80022f8:	2100      	movs	r1, #0
 80022fa:	f000 b8c9 	b.w	8002490 <strtol>
	...

08002300 <__libc_init_array>:
 8002300:	b570      	push	{r4, r5, r6, lr}
 8002302:	4e0d      	ldr	r6, [pc, #52]	; (8002338 <__libc_init_array+0x38>)
 8002304:	4c0d      	ldr	r4, [pc, #52]	; (800233c <__libc_init_array+0x3c>)
 8002306:	1ba4      	subs	r4, r4, r6
 8002308:	10a4      	asrs	r4, r4, #2
 800230a:	2500      	movs	r5, #0
 800230c:	42a5      	cmp	r5, r4
 800230e:	d109      	bne.n	8002324 <__libc_init_array+0x24>
 8002310:	4e0b      	ldr	r6, [pc, #44]	; (8002340 <__libc_init_array+0x40>)
 8002312:	4c0c      	ldr	r4, [pc, #48]	; (8002344 <__libc_init_array+0x44>)
 8002314:	f000 fcfa 	bl	8002d0c <_init>
 8002318:	1ba4      	subs	r4, r4, r6
 800231a:	10a4      	asrs	r4, r4, #2
 800231c:	2500      	movs	r5, #0
 800231e:	42a5      	cmp	r5, r4
 8002320:	d105      	bne.n	800232e <__libc_init_array+0x2e>
 8002322:	bd70      	pop	{r4, r5, r6, pc}
 8002324:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002328:	4798      	blx	r3
 800232a:	3501      	adds	r5, #1
 800232c:	e7ee      	b.n	800230c <__libc_init_array+0xc>
 800232e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002332:	4798      	blx	r3
 8002334:	3501      	adds	r5, #1
 8002336:	e7f2      	b.n	800231e <__libc_init_array+0x1e>
 8002338:	08002ff0 	.word	0x08002ff0
 800233c:	08002ff0 	.word	0x08002ff0
 8002340:	08002ff0 	.word	0x08002ff0
 8002344:	08002ff4 	.word	0x08002ff4

08002348 <siprintf>:
 8002348:	b40e      	push	{r1, r2, r3}
 800234a:	b500      	push	{lr}
 800234c:	b09c      	sub	sp, #112	; 0x70
 800234e:	f44f 7102 	mov.w	r1, #520	; 0x208
 8002352:	ab1d      	add	r3, sp, #116	; 0x74
 8002354:	f8ad 1014 	strh.w	r1, [sp, #20]
 8002358:	9002      	str	r0, [sp, #8]
 800235a:	9006      	str	r0, [sp, #24]
 800235c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002360:	480a      	ldr	r0, [pc, #40]	; (800238c <siprintf+0x44>)
 8002362:	9104      	str	r1, [sp, #16]
 8002364:	9107      	str	r1, [sp, #28]
 8002366:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800236a:	f853 2b04 	ldr.w	r2, [r3], #4
 800236e:	f8ad 1016 	strh.w	r1, [sp, #22]
 8002372:	6800      	ldr	r0, [r0, #0]
 8002374:	9301      	str	r3, [sp, #4]
 8002376:	a902      	add	r1, sp, #8
 8002378:	f000 f910 	bl	800259c <_svfiprintf_r>
 800237c:	9b02      	ldr	r3, [sp, #8]
 800237e:	2200      	movs	r2, #0
 8002380:	701a      	strb	r2, [r3, #0]
 8002382:	b01c      	add	sp, #112	; 0x70
 8002384:	f85d eb04 	ldr.w	lr, [sp], #4
 8002388:	b003      	add	sp, #12
 800238a:	4770      	bx	lr
 800238c:	20000004 	.word	0x20000004

08002390 <_strtol_l.isra.0>:
 8002390:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002394:	4680      	mov	r8, r0
 8002396:	4689      	mov	r9, r1
 8002398:	4692      	mov	sl, r2
 800239a:	461f      	mov	r7, r3
 800239c:	468b      	mov	fp, r1
 800239e:	465d      	mov	r5, fp
 80023a0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80023a2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80023a6:	f000 f889 	bl	80024bc <__locale_ctype_ptr_l>
 80023aa:	4420      	add	r0, r4
 80023ac:	7846      	ldrb	r6, [r0, #1]
 80023ae:	f016 0608 	ands.w	r6, r6, #8
 80023b2:	d10b      	bne.n	80023cc <_strtol_l.isra.0+0x3c>
 80023b4:	2c2d      	cmp	r4, #45	; 0x2d
 80023b6:	d10b      	bne.n	80023d0 <_strtol_l.isra.0+0x40>
 80023b8:	782c      	ldrb	r4, [r5, #0]
 80023ba:	2601      	movs	r6, #1
 80023bc:	f10b 0502 	add.w	r5, fp, #2
 80023c0:	b167      	cbz	r7, 80023dc <_strtol_l.isra.0+0x4c>
 80023c2:	2f10      	cmp	r7, #16
 80023c4:	d114      	bne.n	80023f0 <_strtol_l.isra.0+0x60>
 80023c6:	2c30      	cmp	r4, #48	; 0x30
 80023c8:	d00a      	beq.n	80023e0 <_strtol_l.isra.0+0x50>
 80023ca:	e011      	b.n	80023f0 <_strtol_l.isra.0+0x60>
 80023cc:	46ab      	mov	fp, r5
 80023ce:	e7e6      	b.n	800239e <_strtol_l.isra.0+0xe>
 80023d0:	2c2b      	cmp	r4, #43	; 0x2b
 80023d2:	bf04      	itt	eq
 80023d4:	782c      	ldrbeq	r4, [r5, #0]
 80023d6:	f10b 0502 	addeq.w	r5, fp, #2
 80023da:	e7f1      	b.n	80023c0 <_strtol_l.isra.0+0x30>
 80023dc:	2c30      	cmp	r4, #48	; 0x30
 80023de:	d127      	bne.n	8002430 <_strtol_l.isra.0+0xa0>
 80023e0:	782b      	ldrb	r3, [r5, #0]
 80023e2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80023e6:	2b58      	cmp	r3, #88	; 0x58
 80023e8:	d14b      	bne.n	8002482 <_strtol_l.isra.0+0xf2>
 80023ea:	786c      	ldrb	r4, [r5, #1]
 80023ec:	2710      	movs	r7, #16
 80023ee:	3502      	adds	r5, #2
 80023f0:	2e00      	cmp	r6, #0
 80023f2:	bf0c      	ite	eq
 80023f4:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80023f8:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80023fc:	2200      	movs	r2, #0
 80023fe:	fbb1 fef7 	udiv	lr, r1, r7
 8002402:	4610      	mov	r0, r2
 8002404:	fb07 1c1e 	mls	ip, r7, lr, r1
 8002408:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800240c:	2b09      	cmp	r3, #9
 800240e:	d811      	bhi.n	8002434 <_strtol_l.isra.0+0xa4>
 8002410:	461c      	mov	r4, r3
 8002412:	42a7      	cmp	r7, r4
 8002414:	dd1d      	ble.n	8002452 <_strtol_l.isra.0+0xc2>
 8002416:	1c53      	adds	r3, r2, #1
 8002418:	d007      	beq.n	800242a <_strtol_l.isra.0+0x9a>
 800241a:	4586      	cmp	lr, r0
 800241c:	d316      	bcc.n	800244c <_strtol_l.isra.0+0xbc>
 800241e:	d101      	bne.n	8002424 <_strtol_l.isra.0+0x94>
 8002420:	45a4      	cmp	ip, r4
 8002422:	db13      	blt.n	800244c <_strtol_l.isra.0+0xbc>
 8002424:	fb00 4007 	mla	r0, r0, r7, r4
 8002428:	2201      	movs	r2, #1
 800242a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800242e:	e7eb      	b.n	8002408 <_strtol_l.isra.0+0x78>
 8002430:	270a      	movs	r7, #10
 8002432:	e7dd      	b.n	80023f0 <_strtol_l.isra.0+0x60>
 8002434:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8002438:	2b19      	cmp	r3, #25
 800243a:	d801      	bhi.n	8002440 <_strtol_l.isra.0+0xb0>
 800243c:	3c37      	subs	r4, #55	; 0x37
 800243e:	e7e8      	b.n	8002412 <_strtol_l.isra.0+0x82>
 8002440:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8002444:	2b19      	cmp	r3, #25
 8002446:	d804      	bhi.n	8002452 <_strtol_l.isra.0+0xc2>
 8002448:	3c57      	subs	r4, #87	; 0x57
 800244a:	e7e2      	b.n	8002412 <_strtol_l.isra.0+0x82>
 800244c:	f04f 32ff 	mov.w	r2, #4294967295
 8002450:	e7eb      	b.n	800242a <_strtol_l.isra.0+0x9a>
 8002452:	1c53      	adds	r3, r2, #1
 8002454:	d108      	bne.n	8002468 <_strtol_l.isra.0+0xd8>
 8002456:	2322      	movs	r3, #34	; 0x22
 8002458:	f8c8 3000 	str.w	r3, [r8]
 800245c:	4608      	mov	r0, r1
 800245e:	f1ba 0f00 	cmp.w	sl, #0
 8002462:	d107      	bne.n	8002474 <_strtol_l.isra.0+0xe4>
 8002464:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002468:	b106      	cbz	r6, 800246c <_strtol_l.isra.0+0xdc>
 800246a:	4240      	negs	r0, r0
 800246c:	f1ba 0f00 	cmp.w	sl, #0
 8002470:	d00c      	beq.n	800248c <_strtol_l.isra.0+0xfc>
 8002472:	b122      	cbz	r2, 800247e <_strtol_l.isra.0+0xee>
 8002474:	3d01      	subs	r5, #1
 8002476:	f8ca 5000 	str.w	r5, [sl]
 800247a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800247e:	464d      	mov	r5, r9
 8002480:	e7f9      	b.n	8002476 <_strtol_l.isra.0+0xe6>
 8002482:	2430      	movs	r4, #48	; 0x30
 8002484:	2f00      	cmp	r7, #0
 8002486:	d1b3      	bne.n	80023f0 <_strtol_l.isra.0+0x60>
 8002488:	2708      	movs	r7, #8
 800248a:	e7b1      	b.n	80023f0 <_strtol_l.isra.0+0x60>
 800248c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002490 <strtol>:
 8002490:	4b08      	ldr	r3, [pc, #32]	; (80024b4 <strtol+0x24>)
 8002492:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002494:	681c      	ldr	r4, [r3, #0]
 8002496:	4d08      	ldr	r5, [pc, #32]	; (80024b8 <strtol+0x28>)
 8002498:	6a23      	ldr	r3, [r4, #32]
 800249a:	2b00      	cmp	r3, #0
 800249c:	bf08      	it	eq
 800249e:	462b      	moveq	r3, r5
 80024a0:	9300      	str	r3, [sp, #0]
 80024a2:	4613      	mov	r3, r2
 80024a4:	460a      	mov	r2, r1
 80024a6:	4601      	mov	r1, r0
 80024a8:	4620      	mov	r0, r4
 80024aa:	f7ff ff71 	bl	8002390 <_strtol_l.isra.0>
 80024ae:	b003      	add	sp, #12
 80024b0:	bd30      	pop	{r4, r5, pc}
 80024b2:	bf00      	nop
 80024b4:	20000004 	.word	0x20000004
 80024b8:	20000068 	.word	0x20000068

080024bc <__locale_ctype_ptr_l>:
 80024bc:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80024c0:	4770      	bx	lr

080024c2 <__ascii_mbtowc>:
 80024c2:	b082      	sub	sp, #8
 80024c4:	b901      	cbnz	r1, 80024c8 <__ascii_mbtowc+0x6>
 80024c6:	a901      	add	r1, sp, #4
 80024c8:	b142      	cbz	r2, 80024dc <__ascii_mbtowc+0x1a>
 80024ca:	b14b      	cbz	r3, 80024e0 <__ascii_mbtowc+0x1e>
 80024cc:	7813      	ldrb	r3, [r2, #0]
 80024ce:	600b      	str	r3, [r1, #0]
 80024d0:	7812      	ldrb	r2, [r2, #0]
 80024d2:	1c10      	adds	r0, r2, #0
 80024d4:	bf18      	it	ne
 80024d6:	2001      	movne	r0, #1
 80024d8:	b002      	add	sp, #8
 80024da:	4770      	bx	lr
 80024dc:	4610      	mov	r0, r2
 80024de:	e7fb      	b.n	80024d8 <__ascii_mbtowc+0x16>
 80024e0:	f06f 0001 	mvn.w	r0, #1
 80024e4:	e7f8      	b.n	80024d8 <__ascii_mbtowc+0x16>

080024e6 <__ssputs_r>:
 80024e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80024ea:	688e      	ldr	r6, [r1, #8]
 80024ec:	429e      	cmp	r6, r3
 80024ee:	4682      	mov	sl, r0
 80024f0:	460c      	mov	r4, r1
 80024f2:	4691      	mov	r9, r2
 80024f4:	4698      	mov	r8, r3
 80024f6:	d835      	bhi.n	8002564 <__ssputs_r+0x7e>
 80024f8:	898a      	ldrh	r2, [r1, #12]
 80024fa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80024fe:	d031      	beq.n	8002564 <__ssputs_r+0x7e>
 8002500:	6825      	ldr	r5, [r4, #0]
 8002502:	6909      	ldr	r1, [r1, #16]
 8002504:	1a6f      	subs	r7, r5, r1
 8002506:	6965      	ldr	r5, [r4, #20]
 8002508:	2302      	movs	r3, #2
 800250a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800250e:	fb95 f5f3 	sdiv	r5, r5, r3
 8002512:	f108 0301 	add.w	r3, r8, #1
 8002516:	443b      	add	r3, r7
 8002518:	429d      	cmp	r5, r3
 800251a:	bf38      	it	cc
 800251c:	461d      	movcc	r5, r3
 800251e:	0553      	lsls	r3, r2, #21
 8002520:	d531      	bpl.n	8002586 <__ssputs_r+0xa0>
 8002522:	4629      	mov	r1, r5
 8002524:	f000 fb44 	bl	8002bb0 <_malloc_r>
 8002528:	4606      	mov	r6, r0
 800252a:	b950      	cbnz	r0, 8002542 <__ssputs_r+0x5c>
 800252c:	230c      	movs	r3, #12
 800252e:	f8ca 3000 	str.w	r3, [sl]
 8002532:	89a3      	ldrh	r3, [r4, #12]
 8002534:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002538:	81a3      	strh	r3, [r4, #12]
 800253a:	f04f 30ff 	mov.w	r0, #4294967295
 800253e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002542:	463a      	mov	r2, r7
 8002544:	6921      	ldr	r1, [r4, #16]
 8002546:	f000 fac0 	bl	8002aca <memcpy>
 800254a:	89a3      	ldrh	r3, [r4, #12]
 800254c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002550:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002554:	81a3      	strh	r3, [r4, #12]
 8002556:	6126      	str	r6, [r4, #16]
 8002558:	6165      	str	r5, [r4, #20]
 800255a:	443e      	add	r6, r7
 800255c:	1bed      	subs	r5, r5, r7
 800255e:	6026      	str	r6, [r4, #0]
 8002560:	60a5      	str	r5, [r4, #8]
 8002562:	4646      	mov	r6, r8
 8002564:	4546      	cmp	r6, r8
 8002566:	bf28      	it	cs
 8002568:	4646      	movcs	r6, r8
 800256a:	4632      	mov	r2, r6
 800256c:	4649      	mov	r1, r9
 800256e:	6820      	ldr	r0, [r4, #0]
 8002570:	f000 fab6 	bl	8002ae0 <memmove>
 8002574:	68a3      	ldr	r3, [r4, #8]
 8002576:	1b9b      	subs	r3, r3, r6
 8002578:	60a3      	str	r3, [r4, #8]
 800257a:	6823      	ldr	r3, [r4, #0]
 800257c:	441e      	add	r6, r3
 800257e:	6026      	str	r6, [r4, #0]
 8002580:	2000      	movs	r0, #0
 8002582:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002586:	462a      	mov	r2, r5
 8002588:	f000 fb70 	bl	8002c6c <_realloc_r>
 800258c:	4606      	mov	r6, r0
 800258e:	2800      	cmp	r0, #0
 8002590:	d1e1      	bne.n	8002556 <__ssputs_r+0x70>
 8002592:	6921      	ldr	r1, [r4, #16]
 8002594:	4650      	mov	r0, sl
 8002596:	f000 fabd 	bl	8002b14 <_free_r>
 800259a:	e7c7      	b.n	800252c <__ssputs_r+0x46>

0800259c <_svfiprintf_r>:
 800259c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025a0:	b09d      	sub	sp, #116	; 0x74
 80025a2:	4680      	mov	r8, r0
 80025a4:	9303      	str	r3, [sp, #12]
 80025a6:	898b      	ldrh	r3, [r1, #12]
 80025a8:	061c      	lsls	r4, r3, #24
 80025aa:	460d      	mov	r5, r1
 80025ac:	4616      	mov	r6, r2
 80025ae:	d50f      	bpl.n	80025d0 <_svfiprintf_r+0x34>
 80025b0:	690b      	ldr	r3, [r1, #16]
 80025b2:	b96b      	cbnz	r3, 80025d0 <_svfiprintf_r+0x34>
 80025b4:	2140      	movs	r1, #64	; 0x40
 80025b6:	f000 fafb 	bl	8002bb0 <_malloc_r>
 80025ba:	6028      	str	r0, [r5, #0]
 80025bc:	6128      	str	r0, [r5, #16]
 80025be:	b928      	cbnz	r0, 80025cc <_svfiprintf_r+0x30>
 80025c0:	230c      	movs	r3, #12
 80025c2:	f8c8 3000 	str.w	r3, [r8]
 80025c6:	f04f 30ff 	mov.w	r0, #4294967295
 80025ca:	e0c5      	b.n	8002758 <_svfiprintf_r+0x1bc>
 80025cc:	2340      	movs	r3, #64	; 0x40
 80025ce:	616b      	str	r3, [r5, #20]
 80025d0:	2300      	movs	r3, #0
 80025d2:	9309      	str	r3, [sp, #36]	; 0x24
 80025d4:	2320      	movs	r3, #32
 80025d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80025da:	2330      	movs	r3, #48	; 0x30
 80025dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80025e0:	f04f 0b01 	mov.w	fp, #1
 80025e4:	4637      	mov	r7, r6
 80025e6:	463c      	mov	r4, r7
 80025e8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d13c      	bne.n	800266a <_svfiprintf_r+0xce>
 80025f0:	ebb7 0a06 	subs.w	sl, r7, r6
 80025f4:	d00b      	beq.n	800260e <_svfiprintf_r+0x72>
 80025f6:	4653      	mov	r3, sl
 80025f8:	4632      	mov	r2, r6
 80025fa:	4629      	mov	r1, r5
 80025fc:	4640      	mov	r0, r8
 80025fe:	f7ff ff72 	bl	80024e6 <__ssputs_r>
 8002602:	3001      	adds	r0, #1
 8002604:	f000 80a3 	beq.w	800274e <_svfiprintf_r+0x1b2>
 8002608:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800260a:	4453      	add	r3, sl
 800260c:	9309      	str	r3, [sp, #36]	; 0x24
 800260e:	783b      	ldrb	r3, [r7, #0]
 8002610:	2b00      	cmp	r3, #0
 8002612:	f000 809c 	beq.w	800274e <_svfiprintf_r+0x1b2>
 8002616:	2300      	movs	r3, #0
 8002618:	f04f 32ff 	mov.w	r2, #4294967295
 800261c:	9304      	str	r3, [sp, #16]
 800261e:	9307      	str	r3, [sp, #28]
 8002620:	9205      	str	r2, [sp, #20]
 8002622:	9306      	str	r3, [sp, #24]
 8002624:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002628:	931a      	str	r3, [sp, #104]	; 0x68
 800262a:	2205      	movs	r2, #5
 800262c:	7821      	ldrb	r1, [r4, #0]
 800262e:	4850      	ldr	r0, [pc, #320]	; (8002770 <_svfiprintf_r+0x1d4>)
 8002630:	f7fd fdd6 	bl	80001e0 <memchr>
 8002634:	1c67      	adds	r7, r4, #1
 8002636:	9b04      	ldr	r3, [sp, #16]
 8002638:	b9d8      	cbnz	r0, 8002672 <_svfiprintf_r+0xd6>
 800263a:	06d9      	lsls	r1, r3, #27
 800263c:	bf44      	itt	mi
 800263e:	2220      	movmi	r2, #32
 8002640:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002644:	071a      	lsls	r2, r3, #28
 8002646:	bf44      	itt	mi
 8002648:	222b      	movmi	r2, #43	; 0x2b
 800264a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800264e:	7822      	ldrb	r2, [r4, #0]
 8002650:	2a2a      	cmp	r2, #42	; 0x2a
 8002652:	d016      	beq.n	8002682 <_svfiprintf_r+0xe6>
 8002654:	9a07      	ldr	r2, [sp, #28]
 8002656:	2100      	movs	r1, #0
 8002658:	200a      	movs	r0, #10
 800265a:	4627      	mov	r7, r4
 800265c:	3401      	adds	r4, #1
 800265e:	783b      	ldrb	r3, [r7, #0]
 8002660:	3b30      	subs	r3, #48	; 0x30
 8002662:	2b09      	cmp	r3, #9
 8002664:	d951      	bls.n	800270a <_svfiprintf_r+0x16e>
 8002666:	b1c9      	cbz	r1, 800269c <_svfiprintf_r+0x100>
 8002668:	e011      	b.n	800268e <_svfiprintf_r+0xf2>
 800266a:	2b25      	cmp	r3, #37	; 0x25
 800266c:	d0c0      	beq.n	80025f0 <_svfiprintf_r+0x54>
 800266e:	4627      	mov	r7, r4
 8002670:	e7b9      	b.n	80025e6 <_svfiprintf_r+0x4a>
 8002672:	4a3f      	ldr	r2, [pc, #252]	; (8002770 <_svfiprintf_r+0x1d4>)
 8002674:	1a80      	subs	r0, r0, r2
 8002676:	fa0b f000 	lsl.w	r0, fp, r0
 800267a:	4318      	orrs	r0, r3
 800267c:	9004      	str	r0, [sp, #16]
 800267e:	463c      	mov	r4, r7
 8002680:	e7d3      	b.n	800262a <_svfiprintf_r+0x8e>
 8002682:	9a03      	ldr	r2, [sp, #12]
 8002684:	1d11      	adds	r1, r2, #4
 8002686:	6812      	ldr	r2, [r2, #0]
 8002688:	9103      	str	r1, [sp, #12]
 800268a:	2a00      	cmp	r2, #0
 800268c:	db01      	blt.n	8002692 <_svfiprintf_r+0xf6>
 800268e:	9207      	str	r2, [sp, #28]
 8002690:	e004      	b.n	800269c <_svfiprintf_r+0x100>
 8002692:	4252      	negs	r2, r2
 8002694:	f043 0302 	orr.w	r3, r3, #2
 8002698:	9207      	str	r2, [sp, #28]
 800269a:	9304      	str	r3, [sp, #16]
 800269c:	783b      	ldrb	r3, [r7, #0]
 800269e:	2b2e      	cmp	r3, #46	; 0x2e
 80026a0:	d10e      	bne.n	80026c0 <_svfiprintf_r+0x124>
 80026a2:	787b      	ldrb	r3, [r7, #1]
 80026a4:	2b2a      	cmp	r3, #42	; 0x2a
 80026a6:	f107 0101 	add.w	r1, r7, #1
 80026aa:	d132      	bne.n	8002712 <_svfiprintf_r+0x176>
 80026ac:	9b03      	ldr	r3, [sp, #12]
 80026ae:	1d1a      	adds	r2, r3, #4
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	9203      	str	r2, [sp, #12]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	bfb8      	it	lt
 80026b8:	f04f 33ff 	movlt.w	r3, #4294967295
 80026bc:	3702      	adds	r7, #2
 80026be:	9305      	str	r3, [sp, #20]
 80026c0:	4c2c      	ldr	r4, [pc, #176]	; (8002774 <_svfiprintf_r+0x1d8>)
 80026c2:	7839      	ldrb	r1, [r7, #0]
 80026c4:	2203      	movs	r2, #3
 80026c6:	4620      	mov	r0, r4
 80026c8:	f7fd fd8a 	bl	80001e0 <memchr>
 80026cc:	b138      	cbz	r0, 80026de <_svfiprintf_r+0x142>
 80026ce:	2340      	movs	r3, #64	; 0x40
 80026d0:	1b00      	subs	r0, r0, r4
 80026d2:	fa03 f000 	lsl.w	r0, r3, r0
 80026d6:	9b04      	ldr	r3, [sp, #16]
 80026d8:	4303      	orrs	r3, r0
 80026da:	9304      	str	r3, [sp, #16]
 80026dc:	3701      	adds	r7, #1
 80026de:	7839      	ldrb	r1, [r7, #0]
 80026e0:	4825      	ldr	r0, [pc, #148]	; (8002778 <_svfiprintf_r+0x1dc>)
 80026e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80026e6:	2206      	movs	r2, #6
 80026e8:	1c7e      	adds	r6, r7, #1
 80026ea:	f7fd fd79 	bl	80001e0 <memchr>
 80026ee:	2800      	cmp	r0, #0
 80026f0:	d035      	beq.n	800275e <_svfiprintf_r+0x1c2>
 80026f2:	4b22      	ldr	r3, [pc, #136]	; (800277c <_svfiprintf_r+0x1e0>)
 80026f4:	b9fb      	cbnz	r3, 8002736 <_svfiprintf_r+0x19a>
 80026f6:	9b03      	ldr	r3, [sp, #12]
 80026f8:	3307      	adds	r3, #7
 80026fa:	f023 0307 	bic.w	r3, r3, #7
 80026fe:	3308      	adds	r3, #8
 8002700:	9303      	str	r3, [sp, #12]
 8002702:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002704:	444b      	add	r3, r9
 8002706:	9309      	str	r3, [sp, #36]	; 0x24
 8002708:	e76c      	b.n	80025e4 <_svfiprintf_r+0x48>
 800270a:	fb00 3202 	mla	r2, r0, r2, r3
 800270e:	2101      	movs	r1, #1
 8002710:	e7a3      	b.n	800265a <_svfiprintf_r+0xbe>
 8002712:	2300      	movs	r3, #0
 8002714:	9305      	str	r3, [sp, #20]
 8002716:	4618      	mov	r0, r3
 8002718:	240a      	movs	r4, #10
 800271a:	460f      	mov	r7, r1
 800271c:	3101      	adds	r1, #1
 800271e:	783a      	ldrb	r2, [r7, #0]
 8002720:	3a30      	subs	r2, #48	; 0x30
 8002722:	2a09      	cmp	r2, #9
 8002724:	d903      	bls.n	800272e <_svfiprintf_r+0x192>
 8002726:	2b00      	cmp	r3, #0
 8002728:	d0ca      	beq.n	80026c0 <_svfiprintf_r+0x124>
 800272a:	9005      	str	r0, [sp, #20]
 800272c:	e7c8      	b.n	80026c0 <_svfiprintf_r+0x124>
 800272e:	fb04 2000 	mla	r0, r4, r0, r2
 8002732:	2301      	movs	r3, #1
 8002734:	e7f1      	b.n	800271a <_svfiprintf_r+0x17e>
 8002736:	ab03      	add	r3, sp, #12
 8002738:	9300      	str	r3, [sp, #0]
 800273a:	462a      	mov	r2, r5
 800273c:	4b10      	ldr	r3, [pc, #64]	; (8002780 <_svfiprintf_r+0x1e4>)
 800273e:	a904      	add	r1, sp, #16
 8002740:	4640      	mov	r0, r8
 8002742:	f3af 8000 	nop.w
 8002746:	f1b0 3fff 	cmp.w	r0, #4294967295
 800274a:	4681      	mov	r9, r0
 800274c:	d1d9      	bne.n	8002702 <_svfiprintf_r+0x166>
 800274e:	89ab      	ldrh	r3, [r5, #12]
 8002750:	065b      	lsls	r3, r3, #25
 8002752:	f53f af38 	bmi.w	80025c6 <_svfiprintf_r+0x2a>
 8002756:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002758:	b01d      	add	sp, #116	; 0x74
 800275a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800275e:	ab03      	add	r3, sp, #12
 8002760:	9300      	str	r3, [sp, #0]
 8002762:	462a      	mov	r2, r5
 8002764:	4b06      	ldr	r3, [pc, #24]	; (8002780 <_svfiprintf_r+0x1e4>)
 8002766:	a904      	add	r1, sp, #16
 8002768:	4640      	mov	r0, r8
 800276a:	f000 f881 	bl	8002870 <_printf_i>
 800276e:	e7ea      	b.n	8002746 <_svfiprintf_r+0x1aa>
 8002770:	08002eb2 	.word	0x08002eb2
 8002774:	08002eb8 	.word	0x08002eb8
 8002778:	08002ebc 	.word	0x08002ebc
 800277c:	00000000 	.word	0x00000000
 8002780:	080024e7 	.word	0x080024e7

08002784 <_printf_common>:
 8002784:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002788:	4691      	mov	r9, r2
 800278a:	461f      	mov	r7, r3
 800278c:	688a      	ldr	r2, [r1, #8]
 800278e:	690b      	ldr	r3, [r1, #16]
 8002790:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002794:	4293      	cmp	r3, r2
 8002796:	bfb8      	it	lt
 8002798:	4613      	movlt	r3, r2
 800279a:	f8c9 3000 	str.w	r3, [r9]
 800279e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80027a2:	4606      	mov	r6, r0
 80027a4:	460c      	mov	r4, r1
 80027a6:	b112      	cbz	r2, 80027ae <_printf_common+0x2a>
 80027a8:	3301      	adds	r3, #1
 80027aa:	f8c9 3000 	str.w	r3, [r9]
 80027ae:	6823      	ldr	r3, [r4, #0]
 80027b0:	0699      	lsls	r1, r3, #26
 80027b2:	bf42      	ittt	mi
 80027b4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80027b8:	3302      	addmi	r3, #2
 80027ba:	f8c9 3000 	strmi.w	r3, [r9]
 80027be:	6825      	ldr	r5, [r4, #0]
 80027c0:	f015 0506 	ands.w	r5, r5, #6
 80027c4:	d107      	bne.n	80027d6 <_printf_common+0x52>
 80027c6:	f104 0a19 	add.w	sl, r4, #25
 80027ca:	68e3      	ldr	r3, [r4, #12]
 80027cc:	f8d9 2000 	ldr.w	r2, [r9]
 80027d0:	1a9b      	subs	r3, r3, r2
 80027d2:	429d      	cmp	r5, r3
 80027d4:	db29      	blt.n	800282a <_printf_common+0xa6>
 80027d6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80027da:	6822      	ldr	r2, [r4, #0]
 80027dc:	3300      	adds	r3, #0
 80027de:	bf18      	it	ne
 80027e0:	2301      	movne	r3, #1
 80027e2:	0692      	lsls	r2, r2, #26
 80027e4:	d42e      	bmi.n	8002844 <_printf_common+0xc0>
 80027e6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80027ea:	4639      	mov	r1, r7
 80027ec:	4630      	mov	r0, r6
 80027ee:	47c0      	blx	r8
 80027f0:	3001      	adds	r0, #1
 80027f2:	d021      	beq.n	8002838 <_printf_common+0xb4>
 80027f4:	6823      	ldr	r3, [r4, #0]
 80027f6:	68e5      	ldr	r5, [r4, #12]
 80027f8:	f8d9 2000 	ldr.w	r2, [r9]
 80027fc:	f003 0306 	and.w	r3, r3, #6
 8002800:	2b04      	cmp	r3, #4
 8002802:	bf08      	it	eq
 8002804:	1aad      	subeq	r5, r5, r2
 8002806:	68a3      	ldr	r3, [r4, #8]
 8002808:	6922      	ldr	r2, [r4, #16]
 800280a:	bf0c      	ite	eq
 800280c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002810:	2500      	movne	r5, #0
 8002812:	4293      	cmp	r3, r2
 8002814:	bfc4      	itt	gt
 8002816:	1a9b      	subgt	r3, r3, r2
 8002818:	18ed      	addgt	r5, r5, r3
 800281a:	f04f 0900 	mov.w	r9, #0
 800281e:	341a      	adds	r4, #26
 8002820:	454d      	cmp	r5, r9
 8002822:	d11b      	bne.n	800285c <_printf_common+0xd8>
 8002824:	2000      	movs	r0, #0
 8002826:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800282a:	2301      	movs	r3, #1
 800282c:	4652      	mov	r2, sl
 800282e:	4639      	mov	r1, r7
 8002830:	4630      	mov	r0, r6
 8002832:	47c0      	blx	r8
 8002834:	3001      	adds	r0, #1
 8002836:	d103      	bne.n	8002840 <_printf_common+0xbc>
 8002838:	f04f 30ff 	mov.w	r0, #4294967295
 800283c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002840:	3501      	adds	r5, #1
 8002842:	e7c2      	b.n	80027ca <_printf_common+0x46>
 8002844:	18e1      	adds	r1, r4, r3
 8002846:	1c5a      	adds	r2, r3, #1
 8002848:	2030      	movs	r0, #48	; 0x30
 800284a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800284e:	4422      	add	r2, r4
 8002850:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002854:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002858:	3302      	adds	r3, #2
 800285a:	e7c4      	b.n	80027e6 <_printf_common+0x62>
 800285c:	2301      	movs	r3, #1
 800285e:	4622      	mov	r2, r4
 8002860:	4639      	mov	r1, r7
 8002862:	4630      	mov	r0, r6
 8002864:	47c0      	blx	r8
 8002866:	3001      	adds	r0, #1
 8002868:	d0e6      	beq.n	8002838 <_printf_common+0xb4>
 800286a:	f109 0901 	add.w	r9, r9, #1
 800286e:	e7d7      	b.n	8002820 <_printf_common+0x9c>

08002870 <_printf_i>:
 8002870:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002874:	4617      	mov	r7, r2
 8002876:	7e0a      	ldrb	r2, [r1, #24]
 8002878:	b085      	sub	sp, #20
 800287a:	2a6e      	cmp	r2, #110	; 0x6e
 800287c:	4698      	mov	r8, r3
 800287e:	4606      	mov	r6, r0
 8002880:	460c      	mov	r4, r1
 8002882:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002884:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8002888:	f000 80bc 	beq.w	8002a04 <_printf_i+0x194>
 800288c:	d81a      	bhi.n	80028c4 <_printf_i+0x54>
 800288e:	2a63      	cmp	r2, #99	; 0x63
 8002890:	d02e      	beq.n	80028f0 <_printf_i+0x80>
 8002892:	d80a      	bhi.n	80028aa <_printf_i+0x3a>
 8002894:	2a00      	cmp	r2, #0
 8002896:	f000 80c8 	beq.w	8002a2a <_printf_i+0x1ba>
 800289a:	2a58      	cmp	r2, #88	; 0x58
 800289c:	f000 808a 	beq.w	80029b4 <_printf_i+0x144>
 80028a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80028a4:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80028a8:	e02a      	b.n	8002900 <_printf_i+0x90>
 80028aa:	2a64      	cmp	r2, #100	; 0x64
 80028ac:	d001      	beq.n	80028b2 <_printf_i+0x42>
 80028ae:	2a69      	cmp	r2, #105	; 0x69
 80028b0:	d1f6      	bne.n	80028a0 <_printf_i+0x30>
 80028b2:	6821      	ldr	r1, [r4, #0]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	f011 0f80 	tst.w	r1, #128	; 0x80
 80028ba:	d023      	beq.n	8002904 <_printf_i+0x94>
 80028bc:	1d11      	adds	r1, r2, #4
 80028be:	6019      	str	r1, [r3, #0]
 80028c0:	6813      	ldr	r3, [r2, #0]
 80028c2:	e027      	b.n	8002914 <_printf_i+0xa4>
 80028c4:	2a73      	cmp	r2, #115	; 0x73
 80028c6:	f000 80b4 	beq.w	8002a32 <_printf_i+0x1c2>
 80028ca:	d808      	bhi.n	80028de <_printf_i+0x6e>
 80028cc:	2a6f      	cmp	r2, #111	; 0x6f
 80028ce:	d02a      	beq.n	8002926 <_printf_i+0xb6>
 80028d0:	2a70      	cmp	r2, #112	; 0x70
 80028d2:	d1e5      	bne.n	80028a0 <_printf_i+0x30>
 80028d4:	680a      	ldr	r2, [r1, #0]
 80028d6:	f042 0220 	orr.w	r2, r2, #32
 80028da:	600a      	str	r2, [r1, #0]
 80028dc:	e003      	b.n	80028e6 <_printf_i+0x76>
 80028de:	2a75      	cmp	r2, #117	; 0x75
 80028e0:	d021      	beq.n	8002926 <_printf_i+0xb6>
 80028e2:	2a78      	cmp	r2, #120	; 0x78
 80028e4:	d1dc      	bne.n	80028a0 <_printf_i+0x30>
 80028e6:	2278      	movs	r2, #120	; 0x78
 80028e8:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80028ec:	496e      	ldr	r1, [pc, #440]	; (8002aa8 <_printf_i+0x238>)
 80028ee:	e064      	b.n	80029ba <_printf_i+0x14a>
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80028f6:	1d11      	adds	r1, r2, #4
 80028f8:	6019      	str	r1, [r3, #0]
 80028fa:	6813      	ldr	r3, [r2, #0]
 80028fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002900:	2301      	movs	r3, #1
 8002902:	e0a3      	b.n	8002a4c <_printf_i+0x1dc>
 8002904:	f011 0f40 	tst.w	r1, #64	; 0x40
 8002908:	f102 0104 	add.w	r1, r2, #4
 800290c:	6019      	str	r1, [r3, #0]
 800290e:	d0d7      	beq.n	80028c0 <_printf_i+0x50>
 8002910:	f9b2 3000 	ldrsh.w	r3, [r2]
 8002914:	2b00      	cmp	r3, #0
 8002916:	da03      	bge.n	8002920 <_printf_i+0xb0>
 8002918:	222d      	movs	r2, #45	; 0x2d
 800291a:	425b      	negs	r3, r3
 800291c:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002920:	4962      	ldr	r1, [pc, #392]	; (8002aac <_printf_i+0x23c>)
 8002922:	220a      	movs	r2, #10
 8002924:	e017      	b.n	8002956 <_printf_i+0xe6>
 8002926:	6820      	ldr	r0, [r4, #0]
 8002928:	6819      	ldr	r1, [r3, #0]
 800292a:	f010 0f80 	tst.w	r0, #128	; 0x80
 800292e:	d003      	beq.n	8002938 <_printf_i+0xc8>
 8002930:	1d08      	adds	r0, r1, #4
 8002932:	6018      	str	r0, [r3, #0]
 8002934:	680b      	ldr	r3, [r1, #0]
 8002936:	e006      	b.n	8002946 <_printf_i+0xd6>
 8002938:	f010 0f40 	tst.w	r0, #64	; 0x40
 800293c:	f101 0004 	add.w	r0, r1, #4
 8002940:	6018      	str	r0, [r3, #0]
 8002942:	d0f7      	beq.n	8002934 <_printf_i+0xc4>
 8002944:	880b      	ldrh	r3, [r1, #0]
 8002946:	4959      	ldr	r1, [pc, #356]	; (8002aac <_printf_i+0x23c>)
 8002948:	2a6f      	cmp	r2, #111	; 0x6f
 800294a:	bf14      	ite	ne
 800294c:	220a      	movne	r2, #10
 800294e:	2208      	moveq	r2, #8
 8002950:	2000      	movs	r0, #0
 8002952:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8002956:	6865      	ldr	r5, [r4, #4]
 8002958:	60a5      	str	r5, [r4, #8]
 800295a:	2d00      	cmp	r5, #0
 800295c:	f2c0 809c 	blt.w	8002a98 <_printf_i+0x228>
 8002960:	6820      	ldr	r0, [r4, #0]
 8002962:	f020 0004 	bic.w	r0, r0, #4
 8002966:	6020      	str	r0, [r4, #0]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d13f      	bne.n	80029ec <_printf_i+0x17c>
 800296c:	2d00      	cmp	r5, #0
 800296e:	f040 8095 	bne.w	8002a9c <_printf_i+0x22c>
 8002972:	4675      	mov	r5, lr
 8002974:	2a08      	cmp	r2, #8
 8002976:	d10b      	bne.n	8002990 <_printf_i+0x120>
 8002978:	6823      	ldr	r3, [r4, #0]
 800297a:	07da      	lsls	r2, r3, #31
 800297c:	d508      	bpl.n	8002990 <_printf_i+0x120>
 800297e:	6923      	ldr	r3, [r4, #16]
 8002980:	6862      	ldr	r2, [r4, #4]
 8002982:	429a      	cmp	r2, r3
 8002984:	bfde      	ittt	le
 8002986:	2330      	movle	r3, #48	; 0x30
 8002988:	f805 3c01 	strble.w	r3, [r5, #-1]
 800298c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002990:	ebae 0305 	sub.w	r3, lr, r5
 8002994:	6123      	str	r3, [r4, #16]
 8002996:	f8cd 8000 	str.w	r8, [sp]
 800299a:	463b      	mov	r3, r7
 800299c:	aa03      	add	r2, sp, #12
 800299e:	4621      	mov	r1, r4
 80029a0:	4630      	mov	r0, r6
 80029a2:	f7ff feef 	bl	8002784 <_printf_common>
 80029a6:	3001      	adds	r0, #1
 80029a8:	d155      	bne.n	8002a56 <_printf_i+0x1e6>
 80029aa:	f04f 30ff 	mov.w	r0, #4294967295
 80029ae:	b005      	add	sp, #20
 80029b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80029b4:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80029b8:	493c      	ldr	r1, [pc, #240]	; (8002aac <_printf_i+0x23c>)
 80029ba:	6822      	ldr	r2, [r4, #0]
 80029bc:	6818      	ldr	r0, [r3, #0]
 80029be:	f012 0f80 	tst.w	r2, #128	; 0x80
 80029c2:	f100 0504 	add.w	r5, r0, #4
 80029c6:	601d      	str	r5, [r3, #0]
 80029c8:	d001      	beq.n	80029ce <_printf_i+0x15e>
 80029ca:	6803      	ldr	r3, [r0, #0]
 80029cc:	e002      	b.n	80029d4 <_printf_i+0x164>
 80029ce:	0655      	lsls	r5, r2, #25
 80029d0:	d5fb      	bpl.n	80029ca <_printf_i+0x15a>
 80029d2:	8803      	ldrh	r3, [r0, #0]
 80029d4:	07d0      	lsls	r0, r2, #31
 80029d6:	bf44      	itt	mi
 80029d8:	f042 0220 	orrmi.w	r2, r2, #32
 80029dc:	6022      	strmi	r2, [r4, #0]
 80029de:	b91b      	cbnz	r3, 80029e8 <_printf_i+0x178>
 80029e0:	6822      	ldr	r2, [r4, #0]
 80029e2:	f022 0220 	bic.w	r2, r2, #32
 80029e6:	6022      	str	r2, [r4, #0]
 80029e8:	2210      	movs	r2, #16
 80029ea:	e7b1      	b.n	8002950 <_printf_i+0xe0>
 80029ec:	4675      	mov	r5, lr
 80029ee:	fbb3 f0f2 	udiv	r0, r3, r2
 80029f2:	fb02 3310 	mls	r3, r2, r0, r3
 80029f6:	5ccb      	ldrb	r3, [r1, r3]
 80029f8:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80029fc:	4603      	mov	r3, r0
 80029fe:	2800      	cmp	r0, #0
 8002a00:	d1f5      	bne.n	80029ee <_printf_i+0x17e>
 8002a02:	e7b7      	b.n	8002974 <_printf_i+0x104>
 8002a04:	6808      	ldr	r0, [r1, #0]
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	6949      	ldr	r1, [r1, #20]
 8002a0a:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002a0e:	d004      	beq.n	8002a1a <_printf_i+0x1aa>
 8002a10:	1d10      	adds	r0, r2, #4
 8002a12:	6018      	str	r0, [r3, #0]
 8002a14:	6813      	ldr	r3, [r2, #0]
 8002a16:	6019      	str	r1, [r3, #0]
 8002a18:	e007      	b.n	8002a2a <_printf_i+0x1ba>
 8002a1a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002a1e:	f102 0004 	add.w	r0, r2, #4
 8002a22:	6018      	str	r0, [r3, #0]
 8002a24:	6813      	ldr	r3, [r2, #0]
 8002a26:	d0f6      	beq.n	8002a16 <_printf_i+0x1a6>
 8002a28:	8019      	strh	r1, [r3, #0]
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	6123      	str	r3, [r4, #16]
 8002a2e:	4675      	mov	r5, lr
 8002a30:	e7b1      	b.n	8002996 <_printf_i+0x126>
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	1d11      	adds	r1, r2, #4
 8002a36:	6019      	str	r1, [r3, #0]
 8002a38:	6815      	ldr	r5, [r2, #0]
 8002a3a:	6862      	ldr	r2, [r4, #4]
 8002a3c:	2100      	movs	r1, #0
 8002a3e:	4628      	mov	r0, r5
 8002a40:	f7fd fbce 	bl	80001e0 <memchr>
 8002a44:	b108      	cbz	r0, 8002a4a <_printf_i+0x1da>
 8002a46:	1b40      	subs	r0, r0, r5
 8002a48:	6060      	str	r0, [r4, #4]
 8002a4a:	6863      	ldr	r3, [r4, #4]
 8002a4c:	6123      	str	r3, [r4, #16]
 8002a4e:	2300      	movs	r3, #0
 8002a50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002a54:	e79f      	b.n	8002996 <_printf_i+0x126>
 8002a56:	6923      	ldr	r3, [r4, #16]
 8002a58:	462a      	mov	r2, r5
 8002a5a:	4639      	mov	r1, r7
 8002a5c:	4630      	mov	r0, r6
 8002a5e:	47c0      	blx	r8
 8002a60:	3001      	adds	r0, #1
 8002a62:	d0a2      	beq.n	80029aa <_printf_i+0x13a>
 8002a64:	6823      	ldr	r3, [r4, #0]
 8002a66:	079b      	lsls	r3, r3, #30
 8002a68:	d507      	bpl.n	8002a7a <_printf_i+0x20a>
 8002a6a:	2500      	movs	r5, #0
 8002a6c:	f104 0919 	add.w	r9, r4, #25
 8002a70:	68e3      	ldr	r3, [r4, #12]
 8002a72:	9a03      	ldr	r2, [sp, #12]
 8002a74:	1a9b      	subs	r3, r3, r2
 8002a76:	429d      	cmp	r5, r3
 8002a78:	db05      	blt.n	8002a86 <_printf_i+0x216>
 8002a7a:	68e0      	ldr	r0, [r4, #12]
 8002a7c:	9b03      	ldr	r3, [sp, #12]
 8002a7e:	4298      	cmp	r0, r3
 8002a80:	bfb8      	it	lt
 8002a82:	4618      	movlt	r0, r3
 8002a84:	e793      	b.n	80029ae <_printf_i+0x13e>
 8002a86:	2301      	movs	r3, #1
 8002a88:	464a      	mov	r2, r9
 8002a8a:	4639      	mov	r1, r7
 8002a8c:	4630      	mov	r0, r6
 8002a8e:	47c0      	blx	r8
 8002a90:	3001      	adds	r0, #1
 8002a92:	d08a      	beq.n	80029aa <_printf_i+0x13a>
 8002a94:	3501      	adds	r5, #1
 8002a96:	e7eb      	b.n	8002a70 <_printf_i+0x200>
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d1a7      	bne.n	80029ec <_printf_i+0x17c>
 8002a9c:	780b      	ldrb	r3, [r1, #0]
 8002a9e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002aa2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002aa6:	e765      	b.n	8002974 <_printf_i+0x104>
 8002aa8:	08002ed4 	.word	0x08002ed4
 8002aac:	08002ec3 	.word	0x08002ec3

08002ab0 <__ascii_wctomb>:
 8002ab0:	b149      	cbz	r1, 8002ac6 <__ascii_wctomb+0x16>
 8002ab2:	2aff      	cmp	r2, #255	; 0xff
 8002ab4:	bf85      	ittet	hi
 8002ab6:	238a      	movhi	r3, #138	; 0x8a
 8002ab8:	6003      	strhi	r3, [r0, #0]
 8002aba:	700a      	strbls	r2, [r1, #0]
 8002abc:	f04f 30ff 	movhi.w	r0, #4294967295
 8002ac0:	bf98      	it	ls
 8002ac2:	2001      	movls	r0, #1
 8002ac4:	4770      	bx	lr
 8002ac6:	4608      	mov	r0, r1
 8002ac8:	4770      	bx	lr

08002aca <memcpy>:
 8002aca:	b510      	push	{r4, lr}
 8002acc:	1e43      	subs	r3, r0, #1
 8002ace:	440a      	add	r2, r1
 8002ad0:	4291      	cmp	r1, r2
 8002ad2:	d100      	bne.n	8002ad6 <memcpy+0xc>
 8002ad4:	bd10      	pop	{r4, pc}
 8002ad6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002ada:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002ade:	e7f7      	b.n	8002ad0 <memcpy+0x6>

08002ae0 <memmove>:
 8002ae0:	4288      	cmp	r0, r1
 8002ae2:	b510      	push	{r4, lr}
 8002ae4:	eb01 0302 	add.w	r3, r1, r2
 8002ae8:	d803      	bhi.n	8002af2 <memmove+0x12>
 8002aea:	1e42      	subs	r2, r0, #1
 8002aec:	4299      	cmp	r1, r3
 8002aee:	d10c      	bne.n	8002b0a <memmove+0x2a>
 8002af0:	bd10      	pop	{r4, pc}
 8002af2:	4298      	cmp	r0, r3
 8002af4:	d2f9      	bcs.n	8002aea <memmove+0xa>
 8002af6:	1881      	adds	r1, r0, r2
 8002af8:	1ad2      	subs	r2, r2, r3
 8002afa:	42d3      	cmn	r3, r2
 8002afc:	d100      	bne.n	8002b00 <memmove+0x20>
 8002afe:	bd10      	pop	{r4, pc}
 8002b00:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002b04:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8002b08:	e7f7      	b.n	8002afa <memmove+0x1a>
 8002b0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002b0e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8002b12:	e7eb      	b.n	8002aec <memmove+0xc>

08002b14 <_free_r>:
 8002b14:	b538      	push	{r3, r4, r5, lr}
 8002b16:	4605      	mov	r5, r0
 8002b18:	2900      	cmp	r1, #0
 8002b1a:	d045      	beq.n	8002ba8 <_free_r+0x94>
 8002b1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002b20:	1f0c      	subs	r4, r1, #4
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	bfb8      	it	lt
 8002b26:	18e4      	addlt	r4, r4, r3
 8002b28:	f000 f8d6 	bl	8002cd8 <__malloc_lock>
 8002b2c:	4a1f      	ldr	r2, [pc, #124]	; (8002bac <_free_r+0x98>)
 8002b2e:	6813      	ldr	r3, [r2, #0]
 8002b30:	4610      	mov	r0, r2
 8002b32:	b933      	cbnz	r3, 8002b42 <_free_r+0x2e>
 8002b34:	6063      	str	r3, [r4, #4]
 8002b36:	6014      	str	r4, [r2, #0]
 8002b38:	4628      	mov	r0, r5
 8002b3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002b3e:	f000 b8cc 	b.w	8002cda <__malloc_unlock>
 8002b42:	42a3      	cmp	r3, r4
 8002b44:	d90c      	bls.n	8002b60 <_free_r+0x4c>
 8002b46:	6821      	ldr	r1, [r4, #0]
 8002b48:	1862      	adds	r2, r4, r1
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	bf04      	itt	eq
 8002b4e:	681a      	ldreq	r2, [r3, #0]
 8002b50:	685b      	ldreq	r3, [r3, #4]
 8002b52:	6063      	str	r3, [r4, #4]
 8002b54:	bf04      	itt	eq
 8002b56:	1852      	addeq	r2, r2, r1
 8002b58:	6022      	streq	r2, [r4, #0]
 8002b5a:	6004      	str	r4, [r0, #0]
 8002b5c:	e7ec      	b.n	8002b38 <_free_r+0x24>
 8002b5e:	4613      	mov	r3, r2
 8002b60:	685a      	ldr	r2, [r3, #4]
 8002b62:	b10a      	cbz	r2, 8002b68 <_free_r+0x54>
 8002b64:	42a2      	cmp	r2, r4
 8002b66:	d9fa      	bls.n	8002b5e <_free_r+0x4a>
 8002b68:	6819      	ldr	r1, [r3, #0]
 8002b6a:	1858      	adds	r0, r3, r1
 8002b6c:	42a0      	cmp	r0, r4
 8002b6e:	d10b      	bne.n	8002b88 <_free_r+0x74>
 8002b70:	6820      	ldr	r0, [r4, #0]
 8002b72:	4401      	add	r1, r0
 8002b74:	1858      	adds	r0, r3, r1
 8002b76:	4282      	cmp	r2, r0
 8002b78:	6019      	str	r1, [r3, #0]
 8002b7a:	d1dd      	bne.n	8002b38 <_free_r+0x24>
 8002b7c:	6810      	ldr	r0, [r2, #0]
 8002b7e:	6852      	ldr	r2, [r2, #4]
 8002b80:	605a      	str	r2, [r3, #4]
 8002b82:	4401      	add	r1, r0
 8002b84:	6019      	str	r1, [r3, #0]
 8002b86:	e7d7      	b.n	8002b38 <_free_r+0x24>
 8002b88:	d902      	bls.n	8002b90 <_free_r+0x7c>
 8002b8a:	230c      	movs	r3, #12
 8002b8c:	602b      	str	r3, [r5, #0]
 8002b8e:	e7d3      	b.n	8002b38 <_free_r+0x24>
 8002b90:	6820      	ldr	r0, [r4, #0]
 8002b92:	1821      	adds	r1, r4, r0
 8002b94:	428a      	cmp	r2, r1
 8002b96:	bf04      	itt	eq
 8002b98:	6811      	ldreq	r1, [r2, #0]
 8002b9a:	6852      	ldreq	r2, [r2, #4]
 8002b9c:	6062      	str	r2, [r4, #4]
 8002b9e:	bf04      	itt	eq
 8002ba0:	1809      	addeq	r1, r1, r0
 8002ba2:	6021      	streq	r1, [r4, #0]
 8002ba4:	605c      	str	r4, [r3, #4]
 8002ba6:	e7c7      	b.n	8002b38 <_free_r+0x24>
 8002ba8:	bd38      	pop	{r3, r4, r5, pc}
 8002baa:	bf00      	nop
 8002bac:	200001f0 	.word	0x200001f0

08002bb0 <_malloc_r>:
 8002bb0:	b570      	push	{r4, r5, r6, lr}
 8002bb2:	1ccd      	adds	r5, r1, #3
 8002bb4:	f025 0503 	bic.w	r5, r5, #3
 8002bb8:	3508      	adds	r5, #8
 8002bba:	2d0c      	cmp	r5, #12
 8002bbc:	bf38      	it	cc
 8002bbe:	250c      	movcc	r5, #12
 8002bc0:	2d00      	cmp	r5, #0
 8002bc2:	4606      	mov	r6, r0
 8002bc4:	db01      	blt.n	8002bca <_malloc_r+0x1a>
 8002bc6:	42a9      	cmp	r1, r5
 8002bc8:	d903      	bls.n	8002bd2 <_malloc_r+0x22>
 8002bca:	230c      	movs	r3, #12
 8002bcc:	6033      	str	r3, [r6, #0]
 8002bce:	2000      	movs	r0, #0
 8002bd0:	bd70      	pop	{r4, r5, r6, pc}
 8002bd2:	f000 f881 	bl	8002cd8 <__malloc_lock>
 8002bd6:	4a23      	ldr	r2, [pc, #140]	; (8002c64 <_malloc_r+0xb4>)
 8002bd8:	6814      	ldr	r4, [r2, #0]
 8002bda:	4621      	mov	r1, r4
 8002bdc:	b991      	cbnz	r1, 8002c04 <_malloc_r+0x54>
 8002bde:	4c22      	ldr	r4, [pc, #136]	; (8002c68 <_malloc_r+0xb8>)
 8002be0:	6823      	ldr	r3, [r4, #0]
 8002be2:	b91b      	cbnz	r3, 8002bec <_malloc_r+0x3c>
 8002be4:	4630      	mov	r0, r6
 8002be6:	f000 f867 	bl	8002cb8 <_sbrk_r>
 8002bea:	6020      	str	r0, [r4, #0]
 8002bec:	4629      	mov	r1, r5
 8002bee:	4630      	mov	r0, r6
 8002bf0:	f000 f862 	bl	8002cb8 <_sbrk_r>
 8002bf4:	1c43      	adds	r3, r0, #1
 8002bf6:	d126      	bne.n	8002c46 <_malloc_r+0x96>
 8002bf8:	230c      	movs	r3, #12
 8002bfa:	6033      	str	r3, [r6, #0]
 8002bfc:	4630      	mov	r0, r6
 8002bfe:	f000 f86c 	bl	8002cda <__malloc_unlock>
 8002c02:	e7e4      	b.n	8002bce <_malloc_r+0x1e>
 8002c04:	680b      	ldr	r3, [r1, #0]
 8002c06:	1b5b      	subs	r3, r3, r5
 8002c08:	d41a      	bmi.n	8002c40 <_malloc_r+0x90>
 8002c0a:	2b0b      	cmp	r3, #11
 8002c0c:	d90f      	bls.n	8002c2e <_malloc_r+0x7e>
 8002c0e:	600b      	str	r3, [r1, #0]
 8002c10:	50cd      	str	r5, [r1, r3]
 8002c12:	18cc      	adds	r4, r1, r3
 8002c14:	4630      	mov	r0, r6
 8002c16:	f000 f860 	bl	8002cda <__malloc_unlock>
 8002c1a:	f104 000b 	add.w	r0, r4, #11
 8002c1e:	1d23      	adds	r3, r4, #4
 8002c20:	f020 0007 	bic.w	r0, r0, #7
 8002c24:	1ac3      	subs	r3, r0, r3
 8002c26:	d01b      	beq.n	8002c60 <_malloc_r+0xb0>
 8002c28:	425a      	negs	r2, r3
 8002c2a:	50e2      	str	r2, [r4, r3]
 8002c2c:	bd70      	pop	{r4, r5, r6, pc}
 8002c2e:	428c      	cmp	r4, r1
 8002c30:	bf0d      	iteet	eq
 8002c32:	6863      	ldreq	r3, [r4, #4]
 8002c34:	684b      	ldrne	r3, [r1, #4]
 8002c36:	6063      	strne	r3, [r4, #4]
 8002c38:	6013      	streq	r3, [r2, #0]
 8002c3a:	bf18      	it	ne
 8002c3c:	460c      	movne	r4, r1
 8002c3e:	e7e9      	b.n	8002c14 <_malloc_r+0x64>
 8002c40:	460c      	mov	r4, r1
 8002c42:	6849      	ldr	r1, [r1, #4]
 8002c44:	e7ca      	b.n	8002bdc <_malloc_r+0x2c>
 8002c46:	1cc4      	adds	r4, r0, #3
 8002c48:	f024 0403 	bic.w	r4, r4, #3
 8002c4c:	42a0      	cmp	r0, r4
 8002c4e:	d005      	beq.n	8002c5c <_malloc_r+0xac>
 8002c50:	1a21      	subs	r1, r4, r0
 8002c52:	4630      	mov	r0, r6
 8002c54:	f000 f830 	bl	8002cb8 <_sbrk_r>
 8002c58:	3001      	adds	r0, #1
 8002c5a:	d0cd      	beq.n	8002bf8 <_malloc_r+0x48>
 8002c5c:	6025      	str	r5, [r4, #0]
 8002c5e:	e7d9      	b.n	8002c14 <_malloc_r+0x64>
 8002c60:	bd70      	pop	{r4, r5, r6, pc}
 8002c62:	bf00      	nop
 8002c64:	200001f0 	.word	0x200001f0
 8002c68:	200001f4 	.word	0x200001f4

08002c6c <_realloc_r>:
 8002c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c6e:	4607      	mov	r7, r0
 8002c70:	4614      	mov	r4, r2
 8002c72:	460e      	mov	r6, r1
 8002c74:	b921      	cbnz	r1, 8002c80 <_realloc_r+0x14>
 8002c76:	4611      	mov	r1, r2
 8002c78:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002c7c:	f7ff bf98 	b.w	8002bb0 <_malloc_r>
 8002c80:	b922      	cbnz	r2, 8002c8c <_realloc_r+0x20>
 8002c82:	f7ff ff47 	bl	8002b14 <_free_r>
 8002c86:	4625      	mov	r5, r4
 8002c88:	4628      	mov	r0, r5
 8002c8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002c8c:	f000 f826 	bl	8002cdc <_malloc_usable_size_r>
 8002c90:	4284      	cmp	r4, r0
 8002c92:	d90f      	bls.n	8002cb4 <_realloc_r+0x48>
 8002c94:	4621      	mov	r1, r4
 8002c96:	4638      	mov	r0, r7
 8002c98:	f7ff ff8a 	bl	8002bb0 <_malloc_r>
 8002c9c:	4605      	mov	r5, r0
 8002c9e:	2800      	cmp	r0, #0
 8002ca0:	d0f2      	beq.n	8002c88 <_realloc_r+0x1c>
 8002ca2:	4631      	mov	r1, r6
 8002ca4:	4622      	mov	r2, r4
 8002ca6:	f7ff ff10 	bl	8002aca <memcpy>
 8002caa:	4631      	mov	r1, r6
 8002cac:	4638      	mov	r0, r7
 8002cae:	f7ff ff31 	bl	8002b14 <_free_r>
 8002cb2:	e7e9      	b.n	8002c88 <_realloc_r+0x1c>
 8002cb4:	4635      	mov	r5, r6
 8002cb6:	e7e7      	b.n	8002c88 <_realloc_r+0x1c>

08002cb8 <_sbrk_r>:
 8002cb8:	b538      	push	{r3, r4, r5, lr}
 8002cba:	4c06      	ldr	r4, [pc, #24]	; (8002cd4 <_sbrk_r+0x1c>)
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	4605      	mov	r5, r0
 8002cc0:	4608      	mov	r0, r1
 8002cc2:	6023      	str	r3, [r4, #0]
 8002cc4:	f000 f814 	bl	8002cf0 <_sbrk>
 8002cc8:	1c43      	adds	r3, r0, #1
 8002cca:	d102      	bne.n	8002cd2 <_sbrk_r+0x1a>
 8002ccc:	6823      	ldr	r3, [r4, #0]
 8002cce:	b103      	cbz	r3, 8002cd2 <_sbrk_r+0x1a>
 8002cd0:	602b      	str	r3, [r5, #0]
 8002cd2:	bd38      	pop	{r3, r4, r5, pc}
 8002cd4:	2000028c 	.word	0x2000028c

08002cd8 <__malloc_lock>:
 8002cd8:	4770      	bx	lr

08002cda <__malloc_unlock>:
 8002cda:	4770      	bx	lr

08002cdc <_malloc_usable_size_r>:
 8002cdc:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8002ce0:	2800      	cmp	r0, #0
 8002ce2:	f1a0 0004 	sub.w	r0, r0, #4
 8002ce6:	bfbc      	itt	lt
 8002ce8:	580b      	ldrlt	r3, [r1, r0]
 8002cea:	18c0      	addlt	r0, r0, r3
 8002cec:	4770      	bx	lr
	...

08002cf0 <_sbrk>:
 8002cf0:	4b04      	ldr	r3, [pc, #16]	; (8002d04 <_sbrk+0x14>)
 8002cf2:	6819      	ldr	r1, [r3, #0]
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	b909      	cbnz	r1, 8002cfc <_sbrk+0xc>
 8002cf8:	4903      	ldr	r1, [pc, #12]	; (8002d08 <_sbrk+0x18>)
 8002cfa:	6019      	str	r1, [r3, #0]
 8002cfc:	6818      	ldr	r0, [r3, #0]
 8002cfe:	4402      	add	r2, r0
 8002d00:	601a      	str	r2, [r3, #0]
 8002d02:	4770      	bx	lr
 8002d04:	200001f8 	.word	0x200001f8
 8002d08:	20000290 	.word	0x20000290

08002d0c <_init>:
 8002d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d0e:	bf00      	nop
 8002d10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d12:	bc08      	pop	{r3}
 8002d14:	469e      	mov	lr, r3
 8002d16:	4770      	bx	lr

08002d18 <_fini>:
 8002d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d1a:	bf00      	nop
 8002d1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d1e:	bc08      	pop	{r3}
 8002d20:	469e      	mov	lr, r3
 8002d22:	4770      	bx	lr
